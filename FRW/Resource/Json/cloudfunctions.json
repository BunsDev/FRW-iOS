{
    "scripts": {
        "mainnet": {
            "version": "1.0",
            "ft": {
                "isTokenListEnabled": "",
                "isLinkedAccountTokenListEnabled": "",
                "getTokenListBalance": "",
                "addToken": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhZGRUb2tlbiAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewoKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPiApID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC0gPFRva2VuPi5jcmVhdGVFbXB0eVZhdWx0KHZhdWx0VHlwZTogVHlwZTxAPFRva2VuPi5WYXVsdD4oKSksIHRvOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgfQoKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwYWJpbGl0eSwgYXQ6IDxUb2tlblJlY2VpdmVyUGF0aD4pCiAgICAgICAgCiAgICAgICAgfQogICAgICAgCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCBiYWxhbmNlQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPFRva2VuPi5WYXVsdD4oPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goYmFsYW5jZUNhcGFiaWxpdHksIGF0OiA8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICAgICAgfQogICAgCiAgICB9Cn0=",
                "enableTokenStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBlbmFibGVUb2tlblN0b3JhZ2UgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
                "transferEvmTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlckV2bVRva2VucyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCi8vLyBUcmFuc2ZlcnMgJEZMT1cgZnJvbSB0aGUgc2lnbmVyJ3MgYWNjb3VudCBDYWRlbmNlIEZsb3cgYmFsYW5jZSB0byB0aGUgcmVjaXBpZW50J3MgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MuCi8vLyBOb3RlIHRoYXQgYSBDT0EgbXVzdCBoYXZlIGEgJEZMT1cgYmFsYW5jZSBpbiBFVk0gYmVmb3JlIHRyYW5zZmVycmluZyB2YWx1ZSB0byBhbm90aGVyIEVWTSBhZGRyZXNzLgovLy8KdHJhbnNhY3Rpb24odG9FVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUludDI1NiwgZ2FzTGltaXQ6IFVJbnQ2NCkgewoKICAgIGxldCBjb2E6IGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IC9zdG9yYWdlL2V2bSkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LUVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCksIHRvOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgfQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgYnJpZGdlZCBhY2NvdW50IikKCiAgICAgICAgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzID0gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHRvRVZNQWRkcmVzc0hleCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBpZiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MuYnl0ZXMgPT0gc2VsZi5jb2EuYWRkcmVzcygpLmJ5dGVzIHsKICAgICAgICAvLyAgICAgcmV0dXJuCiAgICAgICAgLy8gfQogICAgICAgIGxldCBkYXRhID0gIiIKICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgIH0KfQ==",
                "transferTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlclRva2VucyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBBZGRyZXNzKSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oPFRva2VuUmVjZWl2ZXJQYXRoPikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9"
            },
            "nft": {
                "checkNFTListEnabled": ""
            },
            "swap": {
                "DeployPairTemplate": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBEZXBsb3lQYWlyVGVtcGxhdGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCnRyYW5zYWN0aW9uKHBhaXJUZW1wbGF0ZUNvZGU6IFN0cmluZykgewogICAgcHJlcGFyZShkZXBsb3lBY2NvdW50OiBBdXRoQWNjb3VudCkgewogICAgICAgIGxldCB0b2tlbjBWYXVsdCA8LSBGbG93VG9rZW4uY3JlYXRlRW1wdHlWYXVsdCgpCiAgICAgICAgbGV0IHRva2VuMVZhdWx0IDwtIEZsb3dUb2tlbi5jcmVhdGVFbXB0eVZhdWx0KCkKICAgICAgICBkZXBsb3lBY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogIlN3YXBQYWlyIiwgY29kZTogcGFpclRlbXBsYXRlQ29kZS51dGY4LCB0b2tlbjBWYXVsdDogPC10b2tlbjBWYXVsdCwgdG9rZW4xVmF1bHQ6IDwtdG9rZW4xVmF1bHQpCiAgICB9Cn0=",
                "CreatePairTemplate": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBDcmVhdGVQYWlyVGVtcGxhdGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICBpbXBvcnQgVG9rZW4wTmFtZSBmcm9tIFRva2VuMEFkZHIKaW1wb3J0IFRva2VuMU5hbWUgZnJvbSBUb2tlbjFBZGRyCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKaW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnRyYW5zYWN0aW9uKCkgewogICAgcHJlcGFyZSh1c2VyQWNjb3VudDogQXV0aEFjY291bnQpIHsKICAgICAgICBsZXQgZmxvd1ZhdWx0UmVmID0gdXNlckFjY291bnQuYm9ycm93PCZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KSEKICAgICAgICBhc3NlcnQoZmxvd1ZhdWx0UmVmLmJhbGFuY2UgPj0gMC4wMDIsIG1lc3NhZ2U6ICJJbnN1ZmZpY2llbnQgYmFsYW5jZSB0byBjcmVhdGUgcGFpciwgbWluaW11bSBiYWxhbmNlIHJlcXVpcmVtZW50OiAwLjAwMiBmbG93IikKICAgICAgICBsZXQgYWNjb3VudENyZWF0aW9uRmVlVmF1bHQgPC0gZmxvd1ZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogMC4wMDEpCiAgICAgICAgbGV0IHRva2VuMFZhdWx0IDwtIFRva2VuME5hbWUuY3JlYXRlRW1wdHlWYXVsdCgpCiAgICAgICAgbGV0IHRva2VuMVZhdWx0IDwtIFRva2VuMU5hbWUuY3JlYXRlRW1wdHlWYXVsdCgpCiAgICAgICAgU3dhcEZhY3RvcnkuY3JlYXRlUGFpcih0b2tlbjBWYXVsdDogPC10b2tlbjBWYXVsdCwgdG9rZW4xVmF1bHQ6IDwtdG9rZW4xVmF1bHQsIGFjY291bnRDcmVhdGlvbkZlZTogPC1hY2NvdW50Q3JlYXRpb25GZWVWYXVsdCkKICAgIH0KfQ==",
                "AddLiquidity": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBBZGRMaXF1aWRpdHkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQppbXBvcnQgU3dhcEZhY3RvcnkgZnJvbSAweGIwNjNjMTZjYWM4NWRiZDEKaW1wb3J0IFN3YXBJbnRlcmZhY2VzIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwRXJyb3IgZnJvbSAweGI3OGVmN2FmYTUyZmY5MDYKdHJhbnNhY3Rpb24oCiAgICB0b2tlbjBLZXk6IFN0cmluZywKICAgIHRva2VuMUtleTogU3RyaW5nLAogICAgdG9rZW4wSW5EZXNpcmVkOiBVRml4NjQsCiAgICB0b2tlbjFJbkRlc2lyZWQ6IFVGaXg2NCwKICAgIHRva2VuMEluTWluOiBVRml4NjQsCiAgICB0b2tlbjFJbk1pbjogVUZpeDY0LAogICAgZGVhZGxpbmU6IFVGaXg2NCwKICAgIHRva2VuMFZhdWx0UGF0aDogU3RvcmFnZVBhdGgsCiAgICB0b2tlbjFWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAopIHsKICAgIHByZXBhcmUodXNlckFjY291bnQ6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgYXNzZXJ0KGRlYWRsaW5lID49IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCwgbWVzc2FnZToKICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgbXNnOiAiQWRkTGlxdWlkaXR5OiBleHBpcmVkICIuY29uY2F0KGRlYWRsaW5lLnRvU3RyaW5nKCkpLmNvbmNhdCgiIDwgIikuY29uY2F0KGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcC50b1N0cmluZygpKSwKICAgICAgICAgICAgICAgIGVycjogU3dhcEVycm9yLkVycm9yQ29kZS5FWFBJUkVECiAgICAgICAgICAgICkKICAgICAgICApCiAgICAgICAgbGV0IHBhaXJBZGRyID0gU3dhcEZhY3RvcnkuZ2V0UGFpckFkZHJlc3ModG9rZW4wS2V5OiB0b2tlbjBLZXksIHRva2VuMUtleTogdG9rZW4xS2V5KQogICAgICAgICAgICA/PyBwYW5pYygiQWRkTGlxdWlkaXR5OiBub25leGlzdGVudCBwYWlyICIuY29uY2F0KHRva2VuMEtleSkuY29uY2F0KCIgPC0+ICIpLmNvbmNhdCh0b2tlbjFLZXkpLmNvbmNhdCgiLCBjcmVhdGUgcGFpciBmaXJzdCIpKQogICAgICAgIGxldCBwYWlyUHVibGljUmVmID0gZ2V0QWNjb3VudChwYWlyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme1N3YXBJbnRlcmZhY2VzLlBhaXJQdWJsaWN9PihTd2FwQ29uZmlnLlBhaXJQdWJsaWNQYXRoKS5ib3Jyb3coKSEKICAgICAgICBsZXQgcGFpckluZm8gPSBwYWlyUHVibGljUmVmLmdldFBhaXJJbmZvKCkKICAgICAgICB2YXIgdG9rZW4wSW4gPSAwLjAKICAgICAgICB2YXIgdG9rZW4xSW4gPSAwLjAKICAgICAgICB2YXIgdG9rZW4wUmVzZXJ2ZSA9IDAuMAogICAgICAgIHZhciB0b2tlbjFSZXNlcnZlID0gMC4wCiAgICAgICAgaWYgdG9rZW4wS2V5ID09IChwYWlySW5mb1swXSBhcyEgU3RyaW5nKSB7CiAgICAgICAgICAgIHRva2VuMFJlc2VydmUgPSAocGFpckluZm9bMl0gYXMhIFVGaXg2NCkKICAgICAgICAgICAgdG9rZW4xUmVzZXJ2ZSA9IChwYWlySW5mb1szXSBhcyEgVUZpeDY0KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHRva2VuMFJlc2VydmUgPSAocGFpckluZm9bM10gYXMhIFVGaXg2NCkKICAgICAgICAgICAgdG9rZW4xUmVzZXJ2ZSA9IChwYWlySW5mb1syXSBhcyEgVUZpeDY0KQogICAgICAgIH0KICAgICAgICBpZiB0b2tlbjBSZXNlcnZlID09IDAuMCAmJiB0b2tlbjFSZXNlcnZlID09IDAuMCB7CiAgICAgICAgICAgIHRva2VuMEluID0gdG9rZW4wSW5EZXNpcmVkCiAgICAgICAgICAgIHRva2VuMUluID0gdG9rZW4xSW5EZXNpcmVkCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdmFyIGFtb3VudDFPcHRpbWFsID0gU3dhcENvbmZpZy5xdW90ZShhbW91bnRBOiB0b2tlbjBJbkRlc2lyZWQsIHJlc2VydmVBOiB0b2tlbjBSZXNlcnZlLCByZXNlcnZlQjogdG9rZW4xUmVzZXJ2ZSkKICAgICAgICAgICAgaWYgKGFtb3VudDFPcHRpbWFsIDw9IHRva2VuMUluRGVzaXJlZCkgewogICAgICAgICAgICAgICAgYXNzZXJ0KGFtb3VudDFPcHRpbWFsID49IHRva2VuMUluTWluLCBtZXNzYWdlOgogICAgICAgICAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgICAgICAgICAgbXNnOiAiU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRSBleHBlY3QgbWluIi5jb25jYXQodG9rZW4xSW5NaW4udG9TdHJpbmcoKSkuY29uY2F0KCIgZ290ICIpLmNvbmNhdChhbW91bnQxT3B0aW1hbC50b1N0cmluZygpKSwKICAgICAgICAgICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0b2tlbjBJbiA9IHRva2VuMEluRGVzaXJlZAogICAgICAgICAgICAgICAgdG9rZW4xSW4gPSBhbW91bnQxT3B0aW1hbAogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdmFyIGFtb3VudDBPcHRpbWFsID0gU3dhcENvbmZpZy5xdW90ZShhbW91bnRBOiB0b2tlbjFJbkRlc2lyZWQsIHJlc2VydmVBOiB0b2tlbjFSZXNlcnZlLCByZXNlcnZlQjogdG9rZW4wUmVzZXJ2ZSkKICAgICAgICAgICAgICAgIGFzc2VydChhbW91bnQwT3B0aW1hbCA8PSB0b2tlbjBJbkRlc2lyZWQpCiAgICAgICAgICAgICAgICBhc3NlcnQoYW1vdW50ME9wdGltYWwgPj0gdG9rZW4wSW5NaW4sIG1lc3NhZ2U6CiAgICAgICAgICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgICAgICAgICBtc2c6ICJTTElQUEFHRV9PRkZTRVRfVE9PX0xBUkdFIGV4cGVjdCBtaW4iLmNvbmNhdCh0b2tlbjBJbk1pbi50b1N0cmluZygpKS5jb25jYXQoIiBnb3QgIikuY29uY2F0KGFtb3VudDBPcHRpbWFsLnRvU3RyaW5nKCkpLAogICAgICAgICAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRQogICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIHRva2VuMEluID0gYW1vdW50ME9wdGltYWwKICAgICAgICAgICAgICAgIHRva2VuMUluID0gdG9rZW4xSW5EZXNpcmVkCiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgbGV0IHRva2VuMFZhdWx0IDwtIHVzZXJBY2NvdW50LmJvcnJvdzwmRnVuZ2libGVUb2tlbi5WYXVsdD4oZnJvbTogdG9rZW4wVmF1bHRQYXRoKSEud2l0aGRyYXcoYW1vdW50OiB0b2tlbjBJbikKICAgICAgICBsZXQgdG9rZW4xVmF1bHQgPC0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbjFWYXVsdFBhdGgpIS53aXRoZHJhdyhhbW91bnQ6IHRva2VuMUluKQogICAgICAgIGxldCBscFRva2VuVmF1bHQgPC0gcGFpclB1YmxpY1JlZi5hZGRMaXF1aWRpdHkoCiAgICAgICAgICAgIHRva2VuQVZhdWx0OiA8LSB0b2tlbjBWYXVsdCwKICAgICAgICAgICAgdG9rZW5CVmF1bHQ6IDwtIHRva2VuMVZhdWx0CiAgICAgICAgKQogICAgICAgIGxldCBscFRva2VuQ29sbGVjdGlvblN0b3JhZ2VQYXRoID0gU3dhcENvbmZpZy5McFRva2VuQ29sbGVjdGlvblN0b3JhZ2VQYXRoCiAgICAgICAgbGV0IGxwVG9rZW5Db2xsZWN0aW9uUHVibGljUGF0aCA9IFN3YXBDb25maWcuTHBUb2tlbkNvbGxlY3Rpb25QdWJsaWNQYXRoCiAgICAgICAgdmFyIGxwVG9rZW5Db2xsZWN0aW9uUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZTd2FwRmFjdG9yeS5McFRva2VuQ29sbGVjdGlvbj4oZnJvbTogbHBUb2tlbkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICBpZiBscFRva2VuQ29sbGVjdGlvblJlZiA9PSBuaWwgewogICAgICAgICAgICBkZXN0cm95IDwtIHVzZXJBY2NvdW50LmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiBscFRva2VuQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICB1c2VyQWNjb3VudC5zYXZlKDwtU3dhcEZhY3RvcnkuY3JlYXRlRW1wdHlMcFRva2VuQ29sbGVjdGlvbigpLCB0bzogbHBUb2tlbkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgdXNlckFjY291bnQubGluazwme1N3YXBJbnRlcmZhY2VzLkxwVG9rZW5Db2xsZWN0aW9uUHVibGljfT4obHBUb2tlbkNvbGxlY3Rpb25QdWJsaWNQYXRoLCB0YXJnZXQ6IGxwVG9rZW5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgIGxwVG9rZW5Db2xsZWN0aW9uUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZTd2FwRmFjdG9yeS5McFRva2VuQ29sbGVjdGlvbj4oZnJvbTogbHBUb2tlbkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgbHBUb2tlbkNvbGxlY3Rpb25SZWYhLmRlcG9zaXQocGFpckFkZHI6IHBhaXJBZGRyLCBscFRva2VuVmF1bHQ6IDwtIGxwVG9rZW5WYXVsdCkKICAgIH0KfQ==",
                "RemoveLiquidity": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBSZW1vdmVMaXF1aWRpdHkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQppbXBvcnQgU3dhcEZhY3RvcnkgZnJvbSAweGIwNjNjMTZjYWM4NWRiZDEKaW1wb3J0IFN3YXBJbnRlcmZhY2VzIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwRXJyb3IgZnJvbSAweGI3OGVmN2FmYTUyZmY5MDYKdHJhbnNhY3Rpb24oCiAgICB0b2tlbjBLZXk6IFN0cmluZywKICAgIHRva2VuMUtleTogU3RyaW5nLAogICAgbHBUb2tlbkFtb3VudDogVUZpeDY0LAogICAgdG9rZW4wT3V0TWluOiBVRml4NjQsCiAgICB0b2tlbjFPdXRNaW46IFVGaXg2NCwKICAgIGRlYWRsaW5lOiBVRml4NjQsCiAgICB0b2tlbjBWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW4xVmF1bHRQYXRoOiBTdG9yYWdlUGF0aCwKKSB7CiAgICBwcmVwYXJlKHVzZXJBY2NvdW50OiBBdXRoQWNjb3VudCkgewogICAgICAgIGFzc2VydChkZWFkbGluZSA+PSBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAsIG1lc3NhZ2U6CiAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgIG1zZzogIlJlbW92ZUxpcXVpZGl0eTogZXhwaXJlZCAiLmNvbmNhdChkZWFkbGluZS50b1N0cmluZygpKS5jb25jYXQoIiA8ICIpLmNvbmNhdChnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAudG9TdHJpbmcoKSksCiAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuRVhQSVJFRAogICAgICAgICAgICApCiAgICAgICAgKQogICAgICAgIGxldCBwYWlyQWRkciA9IFN3YXBGYWN0b3J5LmdldFBhaXJBZGRyZXNzKHRva2VuMEtleTogdG9rZW4wS2V5LCB0b2tlbjFLZXk6IHRva2VuMUtleSkKICAgICAgICAgICAgPz8gcGFuaWMoIlJlbW92ZUxpcXVpZGl0eTogbm9uZXhpc3RlbnQgcGFpciAiLmNvbmNhdCh0b2tlbjBLZXkpLmNvbmNhdCgiIDwtPiAiKS5jb25jYXQodG9rZW4xS2V5KS5jb25jYXQoIiwgY3JlYXRlIHBhaXIgZmlyc3QiKSkKICAgICAgICBsZXQgbHBUb2tlbkNvbGxlY3Rpb25SZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JlN3YXBGYWN0b3J5LkxwVG9rZW5Db2xsZWN0aW9uPihmcm9tOiBTd2FwQ29uZmlnLkxwVG9rZW5Db2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJSZW1vdmVMaXF1aWRpdHk6IGNhbm5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIExwVG9rZW5Db2xsZWN0aW9uIikKICAgICAgICBsZXQgbHBUb2tlblJlbW92ZSA8LSBscFRva2VuQ29sbGVjdGlvblJlZi53aXRoZHJhdyhwYWlyQWRkcjogcGFpckFkZHIsIGFtb3VudDogbHBUb2tlbkFtb3VudCkKICAgICAgICBsZXQgdG9rZW5zIDwtIGdldEFjY291bnQocGFpckFkZHIpLmdldENhcGFiaWxpdHk8JntTd2FwSW50ZXJmYWNlcy5QYWlyUHVibGljfT4oU3dhcENvbmZpZy5QYWlyUHVibGljUGF0aCkuYm9ycm93KCkhLnJlbW92ZUxpcXVpZGl0eShscFRva2VuVmF1bHQ6IDwtbHBUb2tlblJlbW92ZSkKICAgICAgICBsZXQgdG9rZW4wVmF1bHQgPC0gdG9rZW5zWzBdLndpdGhkcmF3KGFtb3VudDogdG9rZW5zWzBdLmJhbGFuY2UpCiAgICAgICAgbGV0IHRva2VuMVZhdWx0IDwtIHRva2Vuc1sxXS53aXRoZHJhdyhhbW91bnQ6IHRva2Vuc1sxXS5iYWxhbmNlKQogICAgICAgIGRlc3Ryb3kgdG9rZW5zCiAgICAgICAgYXNzZXJ0KHRva2VuMFZhdWx0LmJhbGFuY2UgPj0gdG9rZW4wT3V0TWluICYmIHRva2VuMVZhdWx0LmJhbGFuY2UgPj0gdG9rZW4xT3V0TWluLCBtZXNzYWdlOgogICAgICAgICAgICBTd2FwRXJyb3IuRXJyb3JFbmNvZGUoCiAgICAgICAgICAgICAgICBtc2c6ICJSZW1vdmVMaXF1aWRpdHk6IElOU1VGRklDSUVOVF9SRU1PVkVfTElRVUlESVRZX09VVF9BTU9VTlQiLAogICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UKICAgICAgICAgICAgKQogICAgICAgICkKICAgICAgICBsZXQgbG9jYWxWYXVsdDBSZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuMFZhdWx0UGF0aCkhCiAgICAgICAgbGV0IGxvY2FsVmF1bHQxUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbjFWYXVsdFBhdGgpIQogICAgICAgIGlmIHRva2VuMFZhdWx0LmlzSW5zdGFuY2UobG9jYWxWYXVsdDBSZWYuZ2V0VHlwZSgpKSB7CiAgICAgICAgICAgIGxvY2FsVmF1bHQwUmVmLmRlcG9zaXQoZnJvbTogPC10b2tlbjBWYXVsdCkKICAgICAgICAgICAgbG9jYWxWYXVsdDFSZWYuZGVwb3NpdChmcm9tOiA8LXRva2VuMVZhdWx0KQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxvY2FsVmF1bHQwUmVmLmRlcG9zaXQoZnJvbTogPC10b2tlbjFWYXVsdCkKICAgICAgICAgICAgbG9jYWxWYXVsdDFSZWYuZGVwb3NpdChmcm9tOiA8LXRva2VuMFZhdWx0KQogICAgICAgIH0KICAgIH0KfQ==",
                "SwapExactTokensForTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBTd2FwRXhhY3RUb2tlbnNGb3JUb2tlbnMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICBpbXBvcnQgVG9rZW4xTmFtZSBmcm9tIFRva2VuMUFkZHIKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKaW1wb3J0IFN3YXBSb3V0ZXIgZnJvbSAweGE2ODUwNzc2YTk0ZTY1NTEKaW1wb3J0IFN3YXBFcnJvciBmcm9tIDB4Yjc4ZWY3YWZhNTJmZjkwNgp0cmFuc2FjdGlvbigKICAgIHRva2VuS2V5RmxhdFNwbGl0UGF0aDogW1N0cmluZ10sCiAgICBhbW91bnRJblNwbGl0OiBbVUZpeDY0XSwKICAgIGFtb3VudE91dE1pbjogVUZpeDY0LAogICAgZGVhZGxpbmU6IFVGaXg2NCwKICAgIHRva2VuSW5WYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRSZWNlaXZlclBhdGg6IFB1YmxpY1BhdGgsCiAgICB0b2tlbk91dEJhbGFuY2VQYXRoOiBQdWJsaWNQYXRoLAopIHsKICAgIHByZXBhcmUodXNlckFjY291bnQ6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgYXNzZXJ0KGRlYWRsaW5lID49IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCwgbWVzc2FnZToKICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgbXNnOiAiRVhQSVJFRCIsCiAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuRVhQSVJFRAogICAgICAgICAgICApCiAgICAgICAgKQogICAgICAgIGxldCBsZW4gPSB0b2tlbktleUZsYXRTcGxpdFBhdGgubGVuZ3RoCiAgICAgICAgbGV0IHRva2VuSW5LZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbMF0KICAgICAgICBsZXQgdG9rZW5PdXRLZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbbGVuLTFdCiAgICAgICAgdmFyIHRva2VuT3V0QW1vdW50VG90YWwgPSAwLjAKICAgICAgICB2YXIgdG9rZW5PdXRSZWNlaXZlclJlZiA9IHVzZXJBY2NvdW50LmJvcnJvdzwmRnVuZ2libGVUb2tlbi5WYXVsdD4oZnJvbTogdG9rZW5PdXRWYXVsdFBhdGgpCiAgICAgICAgaWYgdG9rZW5PdXRSZWNlaXZlclJlZiA9PSBuaWwgewogICAgICAgICAgICB1c2VyQWNjb3VudC5zYXZlKDwtIFRva2VuMU5hbWUuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdG9rZW5PdXRWYXVsdFBhdGgpCiAgICAgICAgICAgIHVzZXJBY2NvdW50Lmxpbms8JlRva2VuMU5hbWUuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHRva2VuT3V0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgICAgICB1c2VyQWNjb3VudC5saW5rPCZUb2tlbjFOYW1lLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHRva2VuT3V0QmFsYW5jZVBhdGgsIHRhcmdldDogdG9rZW5PdXRWYXVsdFBhdGgpCiAgICAgICAgICAgIHRva2VuT3V0UmVjZWl2ZXJSZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgIH0KICAgICAgICB2YXIgcGF0aEluZGV4ID0gMAogICAgICAgIHZhciBpID0gMAogICAgICAgIHZhciBwYXRoOiBbU3RyaW5nXSA9IFtdCiAgICAgICAgd2hpbGUoaSA8IGxlbikgewogICAgICAgICAgICB2YXIgY3VyVG9rZW5LZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbaV0KICAgICAgICAgICAgcGF0aC5hcHBlbmQoY3VyVG9rZW5LZXkpCiAgICAgICAgICAgIGlmIChjdXJUb2tlbktleSA9PSB0b2tlbk91dEtleSkgewogICAgICAgICAgICAgICAgbGV0IHRva2VuSW5BbW91bnQgPSBhbW91bnRJblNwbGl0W3BhdGhJbmRleF0KICAgICAgICAgICAgICAgIGxldCB0b2tlbkluVmF1bHQgPC0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbkluVmF1bHRQYXRoKSEud2l0aGRyYXcoYW1vdW50OiB0b2tlbkluQW1vdW50KQogICAgICAgICAgICAgICAgbGV0IHRva2VuT3V0VmF1bHQgPC0gU3dhcFJvdXRlci5zd2FwV2l0aFBhdGgodmF1bHRJbjogPC0gdG9rZW5JblZhdWx0LCB0b2tlbktleVBhdGg6IHBhdGgsIGV4YWN0QW1vdW50czogbmlsKQogICAgICAgICAgICAgICAgdG9rZW5PdXRBbW91bnRUb3RhbCA9IHRva2VuT3V0QW1vdW50VG90YWwgKyB0b2tlbk91dFZhdWx0LmJhbGFuY2UKICAgICAgICAgICAgICAgIHRva2VuT3V0UmVjZWl2ZXJSZWYhLmRlcG9zaXQoZnJvbTogPC0gdG9rZW5PdXRWYXVsdCkKICAgICAgICAgICAgICAgIHBhdGggPSBbXQogICAgICAgICAgICAgICAgcGF0aEluZGV4ID0gcGF0aEluZGV4ICsgMQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgIH0KICAgICAgICBhc3NlcnQodG9rZW5PdXRBbW91bnRUb3RhbCA+PSBhbW91bnRPdXRNaW4sIG1lc3NhZ2U6CiAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgIG1zZzogIlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UgZXhwZWN0IG1pbiAiLmNvbmNhdChhbW91bnRPdXRNaW4udG9TdHJpbmcoKSkuY29uY2F0KCIgZ290ICIpLmNvbmNhdCh0b2tlbk91dEFtb3VudFRvdGFsLnRvU3RyaW5nKCkpLAogICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLlNMSVBQQUdFX09GRlNFVF9UT09fTEFSR0UKICAgICAgICAgICAgKQogICAgICAgICkKICAgIH0KfQ==",
                "SwapTokensForExactTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBTd2FwVG9rZW5zRm9yRXhhY3RUb2tlbnMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICBpbXBvcnQgVG9rZW4xTmFtZSBmcm9tIFRva2VuMUFkZHIKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKaW1wb3J0IFN3YXBSb3V0ZXIgZnJvbSAweGE2ODUwNzc2YTk0ZTY1NTEKaW1wb3J0IFN3YXBFcnJvciBmcm9tIDB4Yjc4ZWY3YWZhNTJmZjkwNgp0cmFuc2FjdGlvbigKICAgIHRva2VuS2V5RmxhdFNwbGl0UGF0aDogW1N0cmluZ10sCiAgICBhbW91bnRPdXRTcGxpdDogW1VGaXg2NF0sCiAgICBhbW91bnRJbk1heDogVUZpeDY0LAogICAgZGVhZGxpbmU6IFVGaXg2NCwKICAgIHRva2VuSW5WYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRWYXVsdFBhdGg6IFN0b3JhZ2VQYXRoLAogICAgdG9rZW5PdXRSZWNlaXZlclBhdGg6IFB1YmxpY1BhdGgsCiAgICB0b2tlbk91dEJhbGFuY2VQYXRoOiBQdWJsaWNQYXRoLAopIHsKICAgIHByZXBhcmUodXNlckFjY291bnQ6IEF1dGhBY2NvdW50KSB7CiAgICAgICAgYXNzZXJ0KCBkZWFkbGluZSA+PSBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAsIG1lc3NhZ2U6CiAgICAgICAgICAgIFN3YXBFcnJvci5FcnJvckVuY29kZSgKICAgICAgICAgICAgICAgIG1zZzogIkVYUElSRUQiLAogICAgICAgICAgICAgICAgZXJyOiBTd2FwRXJyb3IuRXJyb3JDb2RlLkVYUElSRUQKICAgICAgICAgICAgKQogICAgICAgICkKICAgICAgICBsZXQgbGVuID0gdG9rZW5LZXlGbGF0U3BsaXRQYXRoLmxlbmd0aAogICAgICAgIGxldCB0b2tlbkluS2V5ID0gdG9rZW5LZXlGbGF0U3BsaXRQYXRoWzBdCiAgICAgICAgbGV0IHRva2VuT3V0S2V5ID0gdG9rZW5LZXlGbGF0U3BsaXRQYXRoW2xlbi0xXQogICAgICAgIHZhciB0b2tlbk91dEFtb3VudFRvdGFsID0gMC4wCiAgICAgICAgdmFyIHRva2VuT3V0UmVjZWl2ZXJSZWYgPSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgIGlmIHRva2VuT3V0UmVjZWl2ZXJSZWYgPT0gbmlsIHsKICAgICAgICAgICAgdXNlckFjY291bnQuc2F2ZSg8LSBUb2tlbjFOYW1lLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgICAgICB1c2VyQWNjb3VudC5saW5rPCZUb2tlbjFOYW1lLlZhdWx0e0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pih0b2tlbk91dFJlY2VpdmVyUGF0aCwgdGFyZ2V0OiB0b2tlbk91dFZhdWx0UGF0aCkKICAgICAgICAgICAgdXNlckFjY291bnQubGluazwmVG9rZW4xTmFtZS5WYXVsdHtGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih0b2tlbk91dEJhbGFuY2VQYXRoLCB0YXJnZXQ6IHRva2VuT3V0VmF1bHRQYXRoKQogICAgICAgICAgICB0b2tlbk91dFJlY2VpdmVyUmVmID0gdXNlckFjY291bnQuYm9ycm93PCZGdW5naWJsZVRva2VuLlZhdWx0Pihmcm9tOiB0b2tlbk91dFZhdWx0UGF0aCkKICAgICAgICB9CiAgICAgICAgdmFyIHBhdGhJbmRleCA9IDAKICAgICAgICB2YXIgaSA9IDAKICAgICAgICB2YXIgcGF0aDogW1N0cmluZ10gPSBbXQogICAgICAgIHZhciBhbW91bnRJblRvdGFsID0gMC4wCiAgICAgICAgd2hpbGUoaSA8IGxlbikgewogICAgICAgICAgICB2YXIgY3VyVG9rZW5LZXkgPSB0b2tlbktleUZsYXRTcGxpdFBhdGhbaV0KICAgICAgICAgICAgcGF0aC5hcHBlbmQoY3VyVG9rZW5LZXkpCiAgICAgICAgICAgIGlmIChjdXJUb2tlbktleSA9PSB0b2tlbk91dEtleSkgewogICAgICAgICAgICAgICAgbGV0IHRva2VuT3V0RXhwZWN0QW1vdW50ID0gYW1vdW50T3V0U3BsaXRbcGF0aEluZGV4XQogICAgICAgICAgICAgICAgbGV0IGFtb3VudHMgPSBTd2FwUm91dGVyLmdldEFtb3VudHNJbihhbW91bnRPdXQ6IHRva2VuT3V0RXhwZWN0QW1vdW50LCB0b2tlbktleVBhdGg6IHBhdGgpCiAgICAgICAgICAgICAgICBsZXQgdG9rZW5JbkFtb3VudCA9IGFtb3VudHNbMF0KICAgICAgICAgICAgICAgIGFtb3VudEluVG90YWwgPSBhbW91bnRJblRvdGFsICsgdG9rZW5JbkFtb3VudAogICAgICAgICAgICAgICAgbGV0IHRva2VuSW5WYXVsdCA8LSB1c2VyQWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHRva2VuSW5WYXVsdFBhdGgpIS53aXRoZHJhdyhhbW91bnQ6IHRva2VuSW5BbW91bnQpCiAgICAgICAgICAgICAgICBsZXQgdG9rZW5PdXRWYXVsdCA8LSBTd2FwUm91dGVyLnN3YXBXaXRoUGF0aCh2YXVsdEluOiA8LSB0b2tlbkluVmF1bHQsIHRva2VuS2V5UGF0aDogcGF0aCwgZXhhY3RBbW91bnRzOiBhbW91bnRzKQogICAgICAgICAgICAgICAgdG9rZW5PdXRBbW91bnRUb3RhbCA9IHRva2VuT3V0QW1vdW50VG90YWwgKyB0b2tlbk91dFZhdWx0LmJhbGFuY2UKICAgICAgICAgICAgICAgIHRva2VuT3V0UmVjZWl2ZXJSZWYhLmRlcG9zaXQoZnJvbTogPC0gdG9rZW5PdXRWYXVsdCkKICAgICAgICAgICAgICAgIHBhdGggPSBbXQogICAgICAgICAgICAgICAgcGF0aEluZGV4ID0gcGF0aEluZGV4ICsgMQogICAgICAgICAgICB9CiAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgIH0KICAgICAgICBhc3NlcnQoYW1vdW50SW5Ub3RhbCA8PSBhbW91bnRJbk1heCwgbWVzc2FnZToKICAgICAgICAgICAgU3dhcEVycm9yLkVycm9yRW5jb2RlKAogICAgICAgICAgICAgICAgbXNnOiAiU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRSIsCiAgICAgICAgICAgICAgICBlcnI6IFN3YXBFcnJvci5FcnJvckNvZGUuU0xJUFBBR0VfT0ZGU0VUX1RPT19MQVJHRQogICAgICAgICAgICApCiAgICAgICAgKQogICAgfQp9",
                "MintAllTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBNaW50QWxsVG9rZW5zIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKaW1wb3J0IEJVU0QgZnJvbSAweEJVU0QKaW1wb3J0IEZVU0QgZnJvbSAweDNjNTk1OWI1Njg4OTYzOTMKaW1wb3J0IFVTREMgZnJvbSAweFVTREMKaW1wb3J0IFVTRFQgZnJvbSAweFVTRFQKaW1wb3J0IHdGbG93IGZyb20gMHh3RmxvdwppbXBvcnQgQkxUIGZyb20gMHhCTFQKaW1wb3J0IFRlc3RUb2tlbkEgZnJvbSAweFRlc3RUb2tlbkEKaW1wb3J0IFRlc3RUb2tlbkIgZnJvbSAweFRlc3RUb2tlbkIKaW1wb3J0IFRlc3RUb2tlbkMgZnJvbSAweFRlc3RUb2tlbkMKdHJhbnNhY3Rpb24obWludEFtb3VudDogVUZpeDY0KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogQXV0aEFjY291bnQpIHsKICAgICAgICB2YXIgdmF1bHRTdG9yYWdlUGF0aCA9IC9zdG9yYWdlL3Rlc3RfYnVzZFZhdWx0CiAgICAgICAgdmFyIHZhdWx0UmVjZWl2ZXJQYXRoID0gL3B1YmxpYy90ZXN0X2J1c2RSZWNlaXZlcgogICAgICAgIHZhciB2YXVsdEJhbGFuY2VQYXRoID0gL3B1YmxpYy90ZXN0X2J1c2RCYWxhbmNlCiAgICAgICAgdmFyIGJ1c2RWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JkJVU0QuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgYnVzZFZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LUJVU0QuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JkJVU0QuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZCVVNELlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgYnVzZFZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmQlVTRC5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICBidXNkVmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1CVVNELnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdF9mdXNkVmF1bHQKICAgICAgICB2YXVsdFJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvdGVzdF9mdXNkUmVjZWl2ZXIKICAgICAgICB2YXVsdEJhbGFuY2VQYXRoID0gL3B1YmxpYy90ZXN0X2Z1c2RCYWxhbmNlCiAgICAgICAgdmFyIGZ1c2RWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JkZVU0QuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgZnVzZFZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LUZVU0QuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JkZVU0QuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZGVVNELlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgZnVzZFZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmRlVTRC5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICBmdXNkVmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1GVVNELnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdF91c2RjVmF1bHQKICAgICAgICB2YXVsdFJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvdGVzdF91c2RjUmVjZWl2ZXIKICAgICAgICB2YXVsdEJhbGFuY2VQYXRoID0gL3B1YmxpYy90ZXN0X3VzZGNCYWxhbmNlCiAgICAgICAgdmFyIHVzZGNWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JlVTREMuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgdXNkY1ZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LVVTREMuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JlVTREMuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZVU0RDLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgdXNkY1ZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmVVNEQy5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB1c2RjVmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1VU0RDLnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdF91c2R0VmF1bHQKICAgICAgICB2YXVsdFJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvdGVzdF91c2R0UmVjZWl2ZXIKICAgICAgICB2YXVsdEJhbGFuY2VQYXRoID0gL3B1YmxpYy90ZXN0X3VzZHRCYWxhbmNlCiAgICAgICAgdmFyIHVzZHRWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JlVTRFQuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgdXNkdFZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LVVTRFQuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JlVTRFQuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZVU0RULlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgdXNkdFZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmVVNEVC5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB1c2R0VmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1VU0RULnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdF93Zmxvd1ZhdWx0CiAgICAgICAgdmF1bHRSZWNlaXZlclBhdGggPSAvcHVibGljL3Rlc3Rfd2Zsb3dSZWNlaXZlcgogICAgICAgIHZhdWx0QmFsYW5jZVBhdGggPSAvcHVibGljL3Rlc3Rfd2Zsb3dCYWxhbmNlCiAgICAgICAgdmFyIHdmbG93VmF1bHRSZWYgPSBzaWduZXIuYm9ycm93PCZ3Rmxvdy5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICBpZiB3Zmxvd1ZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LXdGbG93LmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZ3Rmxvdy5WYXVsdHtGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4odmF1bHRSZWNlaXZlclBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JndGbG93LlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgd2Zsb3dWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JndGbG93LlZhdWx0Pihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgIHdmbG93VmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC13Rmxvdy50ZXN0X21pbnRlci5taW50VG9rZW5zKGFtb3VudDogbWludEFtb3VudCkpCiAgICAgICAgdmF1bHRTdG9yYWdlUGF0aCA9IC9zdG9yYWdlL3Rlc3RfYmx0VmF1bHQKICAgICAgICB2YXVsdFJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvdGVzdF9ibHRSZWNlaXZlcgogICAgICAgIHZhdWx0QmFsYW5jZVBhdGggPSAvcHVibGljL3Rlc3RfYmx0QmFsYW5jZQogICAgICAgIHZhciBiTFRWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JkJMVC5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICBpZiBiTFRWYXVsdFJlZiA9PSBuaWwgewogICAgICAgICAgICBkZXN0cm95IDwtIHNpZ25lci5sb2FkPEBBbnlSZXNvdXJjZT4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLnNhdmUoPC1CTFQuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JkJMVC5WYXVsdHtGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4odmF1bHRSZWNlaXZlclBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JkJMVC5WYXVsdHtGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih2YXVsdEJhbGFuY2VQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIGJMVFZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmQkxULlZhdWx0Pihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgIGJMVFZhdWx0UmVmIS5kZXBvc2l0KGZyb206IDwtQkxULnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdFRva2VuQVZhdWx0CiAgICAgICAgdmF1bHRSZWNlaXZlclBhdGggPSAvcHVibGljL3Rlc3RUb2tlbkFSZWNlaXZlcgogICAgICAgIHZhdWx0QmFsYW5jZVBhdGggPSAvcHVibGljL3Rlc3RUb2tlbkFCYWxhbmNlCiAgICAgICAgdmFyIHRlc3RUb2tlbkFWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JlRlc3RUb2tlbkEuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgdGVzdFRva2VuQVZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LVRlc3RUb2tlbkEuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JlRlc3RUb2tlbkEuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZUZXN0VG9rZW5BLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgdGVzdFRva2VuQVZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmVGVzdFRva2VuQS5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB0ZXN0VG9rZW5BVmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1UZXN0VG9rZW5BLnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdFRva2VuQlZhdWx0CiAgICAgICAgdmF1bHRSZWNlaXZlclBhdGggPSAvcHVibGljL3Rlc3RUb2tlbkJSZWNlaXZlcgogICAgICAgIHZhdWx0QmFsYW5jZVBhdGggPSAvcHVibGljL3Rlc3RUb2tlbkJCYWxhbmNlCiAgICAgICAgdmFyIHRlc3RUb2tlbkJWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JlRlc3RUb2tlbkIuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgdGVzdFRva2VuQlZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LVRlc3RUb2tlbkIuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JlRlc3RUb2tlbkIuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZUZXN0VG9rZW5CLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgdGVzdFRva2VuQlZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmVGVzdFRva2VuQi5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB0ZXN0VG9rZW5CVmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1UZXN0VG9rZW5CLnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgICAgICB2YXVsdFN0b3JhZ2VQYXRoID0gL3N0b3JhZ2UvdGVzdFRva2VuQ1ZhdWx0CiAgICAgICAgdmF1bHRSZWNlaXZlclBhdGggPSAvcHVibGljL3Rlc3RUb2tlbkNSZWNlaXZlcgogICAgICAgIHZhdWx0QmFsYW5jZVBhdGggPSAvcHVibGljL3Rlc3RUb2tlbkNCYWxhbmNlCiAgICAgICAgdmFyIHRlc3RUb2tlbkNWYXVsdFJlZiA9IHNpZ25lci5ib3Jyb3c8JlRlc3RUb2tlbkMuVmF1bHQ+KGZyb206IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgaWYgdGVzdFRva2VuQ1ZhdWx0UmVmID09IG5pbCB7CiAgICAgICAgICAgIGRlc3Ryb3kgPC0gc2lnbmVyLmxvYWQ8QEFueVJlc291cmNlPihmcm9tOiB2YXVsdFN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuc2F2ZSg8LVRlc3RUb2tlbkMuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmxpbms8JlRlc3RUb2tlbkMuVmF1bHR7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0UmVjZWl2ZXJQYXRoLCB0YXJnZXQ6IHZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5saW5rPCZUZXN0VG9rZW5DLlZhdWx0e0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0QmFsYW5jZVBhdGgsIHRhcmdldDogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgdGVzdFRva2VuQ1ZhdWx0UmVmID0gc2lnbmVyLmJvcnJvdzwmVGVzdFRva2VuQy5WYXVsdD4oZnJvbTogdmF1bHRTdG9yYWdlUGF0aCkKICAgICAgICB0ZXN0VG9rZW5DVmF1bHRSZWYhLmRlcG9zaXQoZnJvbTogPC1UZXN0VG9rZW5DLnRlc3RfbWludGVyLm1pbnRUb2tlbnMoYW1vdW50OiBtaW50QW1vdW50KSkKICAgIH0KfQo=",
                "QueryTokenNames": "cHViIGZ1biBtYWluKHF1ZXJ5QWRkcjogQWRkcmVzcyk6IFtTdHJpbmddIHsKICAgIGxldCBuYW1lcyA9IGdldEFjY291bnQocXVlcnlBZGRyKS5jb250cmFjdHMubmFtZXMKICAgIGxldCB0b2tlbk5hbWVzOiBbU3RyaW5nXSA9IFtdCiAgICBsZXQgY29sb246IFVJbnQ4ID0gNTgKICAgIGxldCBzcGFjZTogVUludDggPSAzMgogICAgbGV0IGJyYWNlOiBVSW50OCA9IDEyMwogICAgbGV0IHRva2VuSW5kZW50aWZpZXI6IFtVSW50OF0gPSBbNzAsIDExNywgMTEwLCAxMDMsIDEwNSwgOTgsIDEwOCwgMTAxLCA4NCwgMTExLCAxMDcsIDEwMSwgMTEwXSAKICAgIGxldCBpbmRlbnRpZmllckxlbmd0aCA9IHRva2VuSW5kZW50aWZpZXIubGVuZ3RoCiAgICBmb3IgbmFtZSBpbiBuYW1lcyB7CiAgICAgICAgbGV0IGNvZGUgPSBnZXRBY2NvdW50KHF1ZXJ5QWRkcikuY29udHJhY3RzLmdldChuYW1lOiBuYW1lKSEuY29kZQogICAgICAgIGxldCBjb2RlTGVuZ3RoID0gY29kZS5sZW5ndGgKICAgICAgICB2YXIgaXNUb2tlbiA9IGZhbHNlCiAgICAgICAgdmFyIGkgPSAxMwogICAgICAgIHdoaWxlKGkgPCBjb2RlTGVuZ3RoLTEpIHsKICAgICAgICAgICAgaWYgY29kZVtpXSA9PSBicmFjZSB7CiAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIGNvZGVbaV0gPT0gY29sb24gJiYgY29kZVtpKzFdID09IHNwYWNlIHsKICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICAgICAgd2hpbGUoY29kZVtpXSA9PSBzcGFjZSAmJiBpIDwgY29kZUxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgdmFyIGogPSAwCiAgICAgICAgICAgICAgICB3aGlsZShqIDwgaW5kZW50aWZpZXJMZW5ndGggJiYgaSA8IGNvZGVMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBpZiBjb2RlW2ldID09IHRva2VuSW5kZW50aWZpZXJbal0gewogICAgICAgICAgICAgICAgICAgICAgICBpID0gaSArIDEKICAgICAgICAgICAgICAgICAgICAgICAgaiA9IGogKyAxCiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiBqID09IGluZGVudGlmaWVyTGVuZ3RoICYmIChjb2RlW2ldPT1zcGFjZSB8fCBjb2RlW2ldPT1icmFjZSkgewogICAgICAgICAgICAgICAgICAgIGlzVG9rZW4gPSB0cnVlCiAgICAgICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGkgPSBpICsgMQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIGlmIGlzVG9rZW4gewogICAgICAgICAgICB0b2tlbk5hbWVzLmFwcGVuZChuYW1lKQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiB0b2tlbk5hbWVzCn0=",
                "QueryPairArrayAddr": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnB1YiBmdW4gbWFpbihmcm9tOiBVSW50NjQsIHRvOiBVSW50NjQpOiBbQWRkcmVzc10gewogICAgcmV0dXJuIFN3YXBGYWN0b3J5LmdldFNsaWNlZFBhaXJzKGZyb206IGZyb20sIHRvOiB0bykKfQo=",
                "QueryPairArrayInfo": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnB1YiBmdW4gbWFpbihmcm9tOiBVSW50NjQsIHRvOiBVSW50NjQpOiBbQW55U3RydWN0XSB7CiAgICByZXR1cm4gU3dhcEZhY3RvcnkuZ2V0U2xpY2VkUGFpckluZm9zKGZyb206IGZyb20sIHRvOiB0bykKfQo=",
                "QueryPairInfoByAddrs": "aW1wb3J0IFN3YXBJbnRlcmZhY2VzIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CnB1YiBmdW4gbWFpbihwYWlyQWRkcnM6IFtBZGRyZXNzXSk6IFtBbnlTdHJ1Y3RdIHsKICAgIHZhciByZXM6IFtBbnlTdHJ1Y3RdID0gW10KICAgIHZhciBpID0gMAogICAgdmFyIGxlbiA9IHBhaXJBZGRycy5sZW5ndGgKICAgIHdoaWxlKGkgPCBsZW4pIHsKICAgICAgICByZXMuYXBwZW5kKAogICAgICAgICAgICBnZXRBY2NvdW50KHBhaXJBZGRyc1tpXSkuZ2V0Q2FwYWJpbGl0eTwme1N3YXBJbnRlcmZhY2VzLlBhaXJQdWJsaWN9PihTd2FwQ29uZmlnLlBhaXJQdWJsaWNQYXRoKS5ib3Jyb3coKSEuZ2V0UGFpckluZm8oKQogICAgICAgICkKICAgICAgICBpID0gaSArIDEKICAgIH0KICAgIHJldHVybiByZXMKfQo=",
                "QueryPairInfoByTokenKey": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCnB1YiBmdW4gbWFpbih0b2tlbjBLZXk6U3RyaW5nICx0b2tlbjFLZXk6U3RyaW5nKTogQW55U3RydWN0PyB7CiAgICByZXR1cm4gU3dhcEZhY3RvcnkuZ2V0UGFpckluZm8odG9rZW4wS2V5OiB0b2tlbjBLZXksIHRva2VuMUtleTogdG9rZW4xS2V5KQp9",
                "QueryUserAllLiquidities": "aW1wb3J0IFN3YXBGYWN0b3J5IGZyb20gMHhiMDYzYzE2Y2FjODVkYmQxCmltcG9ydCBTd2FwQ29uZmlnIGZyb20gMHhiNzhlZjdhZmE1MmZmOTA2CmltcG9ydCBTd2FwSW50ZXJmYWNlcyBmcm9tIDB4Yjc4ZWY3YWZhNTJmZjkwNgpwdWIgZnVuIG1haW4odXNlckFkZHI6IEFkZHJlc3MpOiB7QWRkcmVzczogVUZpeDY0fSB7CiAgICB2YXIgbHBUb2tlbkNvbGxlY3Rpb25QdWJsaWNQYXRoID0gU3dhcENvbmZpZy5McFRva2VuQ29sbGVjdGlvblB1YmxpY1BhdGgKICAgIGxldCBscFRva2VuQ29sbGVjdGlvbkNhcCA9IGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntTd2FwSW50ZXJmYWNlcy5McFRva2VuQ29sbGVjdGlvblB1YmxpY30+KGxwVG9rZW5Db2xsZWN0aW9uUHVibGljUGF0aCkKICAgIGlmIGxwVG9rZW5Db2xsZWN0aW9uQ2FwLmNoZWNrKCkgPT0gZmFsc2UgewogICAgICAgIHJldHVybiB7fQogICAgfQogICAgbGV0IGxwVG9rZW5Db2xsZWN0aW9uUmVmID0gbHBUb2tlbkNvbGxlY3Rpb25DYXAuYm9ycm93KCkhCiAgICBsZXQgbGlxdWlkaXR5UGFpckFkZHJzID0gbHBUb2tlbkNvbGxlY3Rpb25SZWYuZ2V0QWxsTFBUb2tlbnMoKQogICAgdmFyIHJlczoge0FkZHJlc3M6IFVGaXg2NH0gPSB7fQogICAgZm9yIHBhaXJBZGRyIGluIGxpcXVpZGl0eVBhaXJBZGRycyB7CiAgICAgICAgdmFyIGxwVG9rZW5BbW91bnQgPSBscFRva2VuQ29sbGVjdGlvblJlZi5nZXRMcFRva2VuQmFsYW5jZShwYWlyQWRkcjogcGFpckFkZHIpCiAgICAgICAgcmVzW3BhaXJBZGRyXSA9IGxwVG9rZW5BbW91bnQKICAgIH0KICAgIHJldHVybiByZXMKfQ==",
                "QueryTimestamp": "cHViIGZ1biBtYWluKCk6IFVGaXg2NCB7CiAgICByZXR1cm4gZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wCn0=",
                "QueryVaultBalanceBatched": "aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKcHViIGZ1biBtYWluKHVzZXJBZGRyOiBBZGRyZXNzLCB2YXVsdFBhdGhzOiBbUHVibGljUGF0aF0pOiBbVUZpeDY0XSB7CiAgICB2YXIgYmFsYW5jZXM6IFtVRml4NjRdID0gW10KICAgIGZvciB2YXVsdFBhdGggaW4gdmF1bHRQYXRocyB7CiAgICAgICAgbGV0IHZhdWx0QmFsYW5jZSA9IGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9Pih2YXVsdFBhdGgpCiAgICAgICAgaWYgdmF1bHRCYWxhbmNlLmNoZWNrKCkgPT0gZmFsc2UgfHwgdmF1bHRCYWxhbmNlLmJvcnJvdygpID09IG5pbCB7CiAgICAgICAgICAgIGJhbGFuY2VzLmFwcGVuZCgwLjApCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYmFsYW5jZXMuYXBwZW5kKHZhdWx0QmFsYW5jZS5ib3Jyb3coKSEuYmFsYW5jZSkKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gYmFsYW5jZXMKfQ==",
                "QueryTokenPathPrefix": "aW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweGYyMzNkY2VlODhmZTBhYmUKcHViIGZ1biBtYWluKHRva2VuTmFtZTogU3RyaW5nLCB0b2tlbkFkZHI6IEFkZHJlc3MsIHVzZXJBZGRyOiBBZGRyZXNzKToge1N0cmluZzogQW55U3RydWN0fSB7CiAgICBsZXQgY29kZSA9IGdldEFjY291bnQodG9rZW5BZGRyKS5jb250cmFjdHMuZ2V0KG5hbWU6IHRva2VuTmFtZSkhLmNvZGUKICAgIHZhciBsb2NhbFByZWZpeCA9ICIiCiAgICB2YXIgYmFsYW5jZVBhdGggPSAvcHVibGljL1BhdGhQcmVmaXgxQmFsYW5jZQogICAgdmFyIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDFSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4MSIKICAgIH0KICAgIGJhbGFuY2VQYXRoID0gL3B1YmxpYy9QYXRoUHJlZml4MkJhbGFuY2UKICAgIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDJSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4MiIKICAgIH0KICAgIGJhbGFuY2VQYXRoID0gL3B1YmxpYy9QYXRoUHJlZml4M0JhbGFuY2UKICAgIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDNSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4MyIKICAgIH0KICAgIGJhbGFuY2VQYXRoID0gL3B1YmxpYy9QYXRoUHJlZml4NEJhbGFuY2UKICAgIHJlY2VpdmVyUGF0aCA9IC9wdWJsaWMvUGF0aFByZWZpeDRSZWNlaXZlcgogICAgaWYgZ2V0QWNjb3VudCh1c2VyQWRkcikuZ2V0Q2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGJhbGFuY2VQYXRoKS5jaGVjaygpICYmIGdldEFjY291bnQodXNlckFkZHIpLmdldENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocmVjZWl2ZXJQYXRoKS5jaGVjaygpIHsKICAgICAgICBsb2NhbFByZWZpeCA9ICJQYXRoUHJlZml4NCIKICAgIH0KICAgIHJldHVybiB7CiAgICAgICAgIkxvY2FsUHJlZml4IjogbG9jYWxQcmVmaXgsCiAgICAgICAgIlRva2VuQ29kZSI6IGNvZGUKICAgIH0KfQ==",
                "CenterTokens": [
                    "A.1654653399040a61.FlowToken",
                    "A.3c5959b568896393.FUSD",
                    "A.b19436aae4d94622.FiatToken",
                    "A.cfdd90d4a00f7b5b.TeleportedTetherToken",
                    "A.231cc0dbbcffc4b7.ceWETH",
                    "A.231cc0dbbcffc4b7.ceWBTC"
                ]
            },
            "basic": {
                "accountStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhY2NvdW50U3RvcmFnZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAgYWNjZXNzKGFsbCkgc3RydWN0IFN0b3JhZ2VJbmZvIHsKICAgIGFjY2VzcyhhbGwpICBsZXQgY2FwYWNpdHk6IFVJbnQ2NAogICAgYWNjZXNzKGFsbCkgIGxldCB1c2VkOiBVSW50NjQKICAgIGFjY2VzcyhhbGwpICBsZXQgYXZhaWxhYmxlOiBVSW50NjQKCiAgICBpbml0KGNhcGFjaXR5OiBVSW50NjQsIHVzZWQ6IFVJbnQ2NCwgYXZhaWxhYmxlOiBVSW50NjQpIHsKICAgICAgICBzZWxmLmNhcGFjaXR5ID0gY2FwYWNpdHkKICAgICAgICBzZWxmLnVzZWQgPSB1c2VkCiAgICAgICAgc2VsZi5hdmFpbGFibGUgPSBhdmFpbGFibGUKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcyk6IFN0b3JhZ2VJbmZvIHsKICAgIGxldCBhY2N0ID0gZ2V0QWNjb3VudChhZGRyKQogICAgcmV0dXJuIFN0b3JhZ2VJbmZvKGNhcGFjaXR5OiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHksCiAgICAgICAgICAgIHVzZWQ6IGFjY3Quc3RvcmFnZS51c2VkLAogICAgICAgICAgICBhdmFpbGFibGU6IGFjY3Quc3RvcmFnZS5jYXBhY2l0eSAtIGFjY3Quc3RvcmFnZS51c2VkKQp9",
                "addContractToAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhZGRDb250cmFjdFRvQWNjb3VudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICB0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmcsIGNvZGU6IFN0cmluZykgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29udHJhY3RzLCBBZGRDb250cmFjdCkgJkFjY291bnQpIHsKICAgICAgICBzaWduZXIuY29udHJhY3RzLmFkZChuYW1lOiBuYW1lLCBjb2RlOiBjb2RlLnV0ZjgpCiAgICB9Cn0=",
                "addKey": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhZGRLZXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcsIHNpZ25hdHVyZUFsZ29yaXRobTogVUludDgsIGhhc2hBbGdvcml0aG06IFVJbnQ4LCB3ZWlnaHQ6IFVGaXg2NCkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoS2V5cykgJkFjY291bnQpIHsKICAgICAgICBsZXQga2V5ID0gUHVibGljS2V5KAogICAgICAgICAgICBwdWJsaWNLZXk6IHB1YmxpY0tleS5kZWNvZGVIZXgoKSwKICAgICAgICAgICAgc2lnbmF0dXJlQWxnb3JpdGhtOiBTaWduYXR1cmVBbGdvcml0aG0ocmF3VmFsdWU6IHNpZ25hdHVyZUFsZ29yaXRobSkhCiAgICAgICAgKQoKICAgICAgICBzaWduZXIua2V5cy5hZGQoCiAgICAgICAgICAgIHB1YmxpY0tleToga2V5LAogICAgICAgICAgICBoYXNoQWxnb3JpdGhtOiBIYXNoQWxnb3JpdGhtKHJhd1ZhbHVlOiBoYXNoQWxnb3JpdGhtKSEsCiAgICAgICAgICAgIHdlaWdodDogd2VpZ2h0CiAgICAgICAgKQogICAgfQp9",
                "addKeyTemp": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhZGRLZXlUZW1wIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCnRyYW5zYWN0aW9uKHB1YmxpY0tleXM6IFtDcnlwdG8uS2V5TGlzdEVudHJ5XSwgY29udHJhY3RzOiB7U3RyaW5nOiBTdHJpbmd9KSB7CglwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSB8IFN0b3JhZ2UpICZBY2NvdW50KSB7CgoJCWxldCBhY2NvdW50ID0gQWNjb3VudChwYXllcjogc2lnbmVyKQoKCQkvLyBhZGQgYWxsIHRoZSBrZXlzIHRvIHRoZSBhY2NvdW50CgkJZm9yIGtleSBpbiBwdWJsaWNLZXlzIHsKCQkJYWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleS5wdWJsaWNLZXksIGhhc2hBbGdvcml0aG06IGtleS5oYXNoQWxnb3JpdGhtLCB3ZWlnaHQ6IGtleS53ZWlnaHQpCgkJfQoJCQoJCS8vIGFkZCBjb250cmFjdHMgaWYgcHJvdmlkZWQKCQlmb3IgY29udHJhY3QgaW4gY29udHJhY3RzLmtleXMgewoJCQlhY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogY29udHJhY3QsIGNvZGU6IGNvbnRyYWN0c1tjb250cmFjdF0hLmRlY29kZUhleCgpKQoJCX0KCX0KfQ==",
                "createAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVBY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKIHRyYW5zYWN0aW9uKHB1YmxpY0tleXM6IFtDcnlwdG8uS2V5TGlzdEVudHJ5XSwgY29udHJhY3RzOiB7U3RyaW5nOiBTdHJpbmd9LCBmdW5kQW1vdW50OiBVRml4NjQpIHsKICAgIGxldCB0b2tlblJlY2VpdmVyOiAme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9CiAgICBsZXQgc2VudFZhdWx0OiBARnVuZ2libGVUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlIHwgU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICBsZXQgYWNjb3VudCA9IEFjY291bnQocGF5ZXI6IHNpZ25lcikKICAgICAgICBmb3Iga2V5IGluIHB1YmxpY0tleXMgewogICAgICAgICAgICBhY2NvdW50LmtleXMuYWRkKHB1YmxpY0tleToga2V5LnB1YmxpY0tleSwgaGFzaEFsZ29yaXRobToga2V5Lmhhc2hBbGdvcml0aG0sIHdlaWdodDoga2V5LndlaWdodCkKICAgICAgICB9CiAgICAgICAgZm9yIGNvbnRyYWN0IGluIGNvbnRyYWN0cy5rZXlzIHsKICAgICAgICAgICAgYWNjb3VudC5jb250cmFjdHMuYWRkKG5hbWU6IGNvbnRyYWN0LCBjb2RlOiBjb250cmFjdHNbY29udHJhY3RdIS5kZWNvZGVIZXgoKSkKICAgICAgICB9CiAgICAgICAgc2VsZi50b2tlblJlY2VpdmVyID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpID8/IHBhbmljKCJVbmFibGUgdG8gYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSIpCiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXInJ3MgVmF1bHQhIikKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGZ1bmRBbW91bnQpCiAgICB9CiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnRva2VuUmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQogfQ==",
                "createAccountSdk": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVBY2NvdW50U2RrIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCnRyYW5zYWN0aW9uKHB1YmxpY0tleTogU3RyaW5nLCBzaWduYXR1cmVBbGdvcml0aG06IFVJbnQ4LCBoYXNoQWxnb3JpdGhtOiBVSW50OCwgd2VpZ2h0OiBVRml4NjQsIGNvbnRyYWN0czoge1N0cmluZzogU3RyaW5nfSkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUgfCBTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAgIGxldCBhY2NvdW50ID0gQWNjb3VudChwYXllcjogc2lnbmVyKQoKICAgICAgICBsZXQga2V5ID0gUHVibGljS2V5KAogICAgICAgICAgICBwdWJsaWNLZXk6IHB1YmxpY0tleS5kZWNvZGVIZXgoKSwKICAgICAgICAgICAgc2lnbmF0dXJlQWxnb3JpdGhtOiBTaWduYXR1cmVBbGdvcml0aG0ocmF3VmFsdWU6IHNpZ25hdHVyZUFsZ29yaXRobSkhCiAgICAgICAgKQoKICAgICAgICBhY2NvdW50LmtleXMuYWRkKAogICAgICAgICAgICBwdWJsaWNLZXk6IGtleSwKICAgICAgICAgICAgaGFzaEFsZ29yaXRobTogSGFzaEFsZ29yaXRobShyYXdWYWx1ZTogaGFzaEFsZ29yaXRobSkhLAogICAgICAgICAgICB3ZWlnaHQ6IHdlaWdodAogICAgICAgICkKCiAgICAgICAgZm9yIGNvbnRyYWN0IGluIGNvbnRyYWN0cy5rZXlzIHsKICAgICAgICAgICAgYWNjb3VudC5jb250cmFjdHMuYWRkKG5hbWU6IGNvbnRyYWN0LCBjb2RlOiBjb250cmFjdHNbY29udHJhY3RdIS5kZWNvZGVIZXgoKSkKICAgICAgICB9CiAgICB9Cn0=",
                "getAccountInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2NvdW50SW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBhY2Nlc3MoYWxsKSBzdHJ1Y3QgUmVzdWx0IHsKICBhY2Nlc3MoYWxsKSBsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpIGxldCBiYWxhbmNlOiBVRml4NjQKICBhY2Nlc3MoYWxsKSBsZXQgYXZhaWxhYmxlQmFsYW5jZTogVUZpeDY0CiAgYWNjZXNzKGFsbCkgbGV0IHN0b3JhZ2VVc2VkOiBVSW50NjQKICBhY2Nlc3MoYWxsKSBsZXQgc3RvcmFnZUNhcGFjaXR5OiBVSW50NjQKCiAgaW5pdCgKICAgIGFkZHJlc3M6IEFkZHJlc3MsCiAgICBiYWxhbmNlOiBVRml4NjQsCiAgICBhdmFpbGFibGVCYWxhbmNlOiBVRml4NjQsCiAgICBzdG9yYWdlVXNlZDogVUludDY0LAogICAgc3RvcmFnZUNhcGFjaXR5OiBVSW50NjQKICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYuYmFsYW5jZSA9IGJhbGFuY2UKICAgIHNlbGYuYXZhaWxhYmxlQmFsYW5jZSA9IGF2YWlsYWJsZUJhbGFuY2UKICAgIHNlbGYuc3RvcmFnZVVzZWQgPSBzdG9yYWdlVXNlZAogICAgc2VsZi5zdG9yYWdlQ2FwYWNpdHkgPSBzdG9yYWdlQ2FwYWNpdHkKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBSZXN1bHQgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHJldHVybiBSZXN1bHQoCiAgICBhZGRyZXNzOiBhY2NvdW50LmFkZHJlc3MsCiAgICBiYWxhbmNlOiBhY2NvdW50LmJhbGFuY2UsCiAgICBhdmFpbGFibGVCYWxhbmNlOiBhY2NvdW50LmF2YWlsYWJsZUJhbGFuY2UsCiAgICBzdG9yYWdlVXNlZDogYWNjb3VudC5zdG9yYWdlLnVzZWQsCiAgICBzdG9yYWdlQ2FwYWNpdHk6IGFjY291bnQuc3RvcmFnZS5jYXBhY2l0eQogICkKfQ==",
                "getAccountMinFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2NvdW50TWluRmxvdyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogVUZpeDY0IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICByZXR1cm4gYWNjb3VudC5iYWxhbmNlIC0gYWNjb3VudC5hdmFpbGFibGVCYWxhbmNlCn0=",
                "getAccountTotalFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2NvdW50VG90YWxGbG93QmFsYW5jZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCi8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhlZTgyODU2YmYyMGUyYWE2Ci8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDBhZTUzY2I2ZTNmNDJhNzkKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4ZjhkNmUwNTg2YjBhMjBjNwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCB1bmxvY2tlZFZhdWx0ID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvZmxvd1Rva2VuQmFsYW5jZSkhCiAgICAgIC5ib3Jyb3coKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IEJhbGFuY2UgcmVmZXJlbmNlIHRvIHRoZSBWYXVsdCIpCiAgICBsZXQgdW5sb2NrZWRCYWxhbmNlID0gdW5sb2NrZWRWYXVsdC5iYWxhbmNlCiAgICAgICAgCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9DYXAgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZ2V0CiAgICAgIDwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPgogICAgICAoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKICAgIGlmIGxvY2tlZEFjY291bnRJbmZvQ2FwID09IG5pbCB8fCAhKGxvY2tlZEFjY291bnRJbmZvQ2FwIS5jaGVjaygpKSB7CiAgICAgICAgcmV0dXJuIHVubG9ja2VkQmFsYW5jZQogICAgfQogICAgCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9SZWYgPSBsb2NrZWRBY2NvdW50SW5mb0NhcCEuYm9ycm93KCkhCiAgICBsZXQgbG9ja2VkQmFsYW5jZSA9IGxvY2tlZEFjY291bnRJbmZvUmVmLmdldExvY2tlZEFjY291bnRCYWxhbmNlKCkKICAgIAogICAgcmV0dXJuIGxvY2tlZEJhbGFuY2UgKyB1bmxvY2tlZEJhbGFuY2UKfQ==",
                "getAccountTotalLockedFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2NvdW50VG90YWxMb2NrZWRGbG93QmFsYW5jZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCgovLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZWU4Mjg1NmJmMjBlMmFhNgovLyBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgwYWU1M2NiNmUzZjQyYTc5Ci8vIGltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweGY4ZDZlMDU4NmIwYTIwYzcKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldAogICAgICA8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCiAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgIHJldHVybiBVRml4NjQoMCkKICAgIH0KICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICAKICAgIHJldHVybiBsb2NrZWRCYWxhbmNlCn0=",
                "getAccountTotalUnlockedFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2NvdW50VG90YWxVbmxvY2tlZEZsb3dCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIC8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCi8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgovLyBpbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHhMb2NrZWRUb2tlbnMKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhlZTgyODU2YmYyMGUyYWE2CmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDBhZTUzY2I2ZTNmNDJhNzkKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4ZjhkNmUwNTg2YjBhMjBjNwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICBsZXQgdW5sb2NrZWRWYXVsdCA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5nZXQ8JkZsb3dUb2tlbi5WYXVsdD4oL3B1YmxpYy9mbG93VG9rZW5CYWxhbmNlKSEKICAgICAgLmJvcnJvdygpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQmFsYW5jZSByZWZlcmVuY2UgdG8gdGhlIFZhdWx0IikKICAgIGxldCB1bmxvY2tlZEJhbGFuY2UgPSB1bmxvY2tlZFZhdWx0LmJhbGFuY2UKCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9DYXAgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZ2V0CiAgICAgIDwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPgogICAgICAoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKICAgIGlmIGxvY2tlZEFjY291bnRJbmZvQ2FwID09IG5pbCB8fCAhKGxvY2tlZEFjY291bnRJbmZvQ2FwIS5jaGVjaygpKSB7CiAgICAgICAgcmV0dXJuIHVubG9ja2VkQmFsYW5jZQogICAgfQogICAgCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9SZWYgPSBsb2NrZWRBY2NvdW50SW5mb0NhcCEuYm9ycm93KCkhCiAgICBsZXQgbG9ja2VkQmFsYW5jZSA9IGxvY2tlZEFjY291bnRJbmZvUmVmLmdldExvY2tlZEFjY291bnRCYWxhbmNlKCkKICAgIGxldCBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRVbmxvY2tMaW1pdCgpCgogICAgaWYgbG9ja2VkQmFsYW5jZSA9PSBVRml4NjQoMCkgewogICAgICAgIHJldHVybiB1bmxvY2tlZEJhbGFuY2UKICAgIH0KCiAgICBpZiBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgPiBsb2NrZWRCYWxhbmNlIHsKICAgICAgICByZXR1cm4gdW5sb2NrZWRCYWxhbmNlICsgbG9ja2VkQmFsYW5jZQogICAgfQoKICAgIHJldHVybiBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgKyB1bmxvY2tlZEJhbGFuY2UKfQ==",
                "getFindAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRGaW5kQWRkcmVzcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRklORCBmcm9tIDB4RmluZAovL0NoZWNrIHRoZSBzdGF0dXMgb2YgYSBmaW4gdXNlcgphY2Nlc3MoYWxsKSBmdW4gbWFpbihuYW1lOiBTdHJpbmcpIDogQWRkcmVzcz8gewogICAgbGV0IHN0YXR1cyA9IEZJTkQuc3RhdHVzKG5hbWUpCiAgICByZXR1cm4gc3RhdHVzLm93bmVyCn0=",
                "getFindDomainByAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRGaW5kRG9tYWluQnlBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGSU5EIGZyb20gMHhGaW5kCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IFN0cmluZz97CiAgICByZXR1cm4gRklORC5yZXZlcnNlTG9va3VwKGFkZHJlc3MpCn0=",
                "getFlownsAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRGbG93bnNBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93bnMgZnJvbSAweEZsb3ducwppbXBvcnQgRG9tYWlucyBmcm9tIDB4RG9tYWlucwoKYWNjZXNzKGFsbCkgZnVuIG1haW4obmFtZTogU3RyaW5nLCByb290OiBTdHJpbmcpIDogQWRkcmVzcz8gewogICAgbGV0IHByZWZpeCA9ICIweCIKICAgIGxldCByb290SGFoc2ggPSBGbG93bnMuaGFzaChub2RlOiAiIiwgbGFibGU6IHJvb3QpCiAgICBsZXQgbmFtZWhhc2ggPSBwcmVmaXguY29uY2F0KEZsb3ducy5oYXNoKG5vZGU6IHJvb3RIYWhzaCwgbGFibGU6IG5hbWUpKQogICAgdmFyIGFkZHJlc3MgPSBEb21haW5zLmdldFJlY29yZHMobmFtZWhhc2gpCiAgICByZXR1cm4gYWRkcmVzcwp9",
                "getFlownsDomainsByAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRGbG93bnNEb21haW5zQnlBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBEb21haW5zIGZyb20gMHhEb21haW5zCi8vIGFkZHJlc3M6IEZsb3cgYWRkcmVzcwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtEb21haW5zLkRvbWFpbkRldGFpbF0gewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICBsZXQgY29sbGVjdGlvbkNhcCA9IGFjY291bnQuZ2V0Q2FwYWJpbGl0eTwme0RvbWFpbnMuQ29sbGVjdGlvblB1YmxpY30+KERvbWFpbnMuQ29sbGVjdGlvblB1YmxpY1BhdGgpCiAgICBsZXQgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25DYXAuYm9ycm93KCkhCiAgICBsZXQgZG9tYWluczpbRG9tYWlucy5Eb21haW5EZXRhaWxdID0gW10KICAgIGxldCBpZHMgPSBjb2xsZWN0aW9uLmdldElEcygpCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgICAgbGV0IGRvbWFpbiA9IGNvbGxlY3Rpb24uYm9ycm93RG9tYWluKGlkOiBpZCkKICAgICAgICBsZXQgZGV0YWlsID0gZG9tYWluLmdldERldGFpbCgpCiAgICAgICAgZG9tYWlucy5hcHBlbmQoZGV0YWlsKQogICAgfQoKICAgIHJldHVybiBkb21haW5zCn0=",
                "getStorageInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdG9yYWdlSW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAgYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcyk6IHtTdHJpbmc6IFVJbnQ2NH0gewogICAgbGV0IGFjY3QgPSBnZXRBY2NvdW50KGFkZHIpCiAgICBsZXQgcmV0OiB7U3RyaW5nOiBVSW50NjR9ID0ge30KICAgIHJldFsiY2FwYWNpdHkiXSA9IGFjY3Quc3RvcmFnZS5jYXBhY2l0eQogICAgcmV0WyJ1c2VkIl0gPSBhY2N0LnN0b3JhZ2UudXNlZAogICAgcmV0WyJhdmFpbGFibGUiXSA9IGFjY3Quc3RvcmFnZS5jYXBhY2l0eSAtICBhY2N0LnN0b3JhZ2UudXNlZAogICAgcmV0dXJuIHJldAp9",
                "getTokenBalanceWithModel": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRUb2tlbkJhbGFuY2VXaXRoTW9kZWwgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9Pig8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBCYWxhbmNlIGNhcGFiaWxpdHkiKQoKICAgIHJldHVybiB2YXVsdFJlZi5iYWxhbmNlCn0=",
                "isKeyHasFullAuth": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBpc0tleUhhc0Z1bGxBdXRoIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwdWJsaWNLZXk6IFN0cmluZyk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHZhciBmbGFnID0gZmFsc2UKICBmdW4gYWNjb3VudEZuKGFjY291bnRLZXk6IEFjY291bnRLZXkpOiBCb29sIHsKICAgIGxldCBrZXkgPSBTdHJpbmcuZW5jb2RlSGV4KGFjY291bnRLZXkucHVibGljS2V5LnB1YmxpY0tleSkKICAgIGlmIHB1YmxpY0tleSA9PSBrZXkgewogICAgICBmbGFnID0gYWNjb3VudEtleS53ZWlnaHQgPj0gVUZpeDY0KDEwMDApICYmICFhY2NvdW50S2V5LmlzUmV2b2tlZAogICAgfQogICAgcmV0dXJuIGZhbHNlCiAgfQogIGFjY291bnQua2V5cy5mb3JFYWNoKGFjY291bnRGbikKCiAgcmV0dXJuIGZsYWcKfQo=",
                "isKeysHasFullAuth": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBpc0tleXNIYXNGdWxsQXV0aCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcHVibGljS2V5czogW1N0cmluZ10pOiBCb29sIHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICB2YXIgd2VpZ2h0OiBVRml4NjQgPSAwLjAKICBmdW4gYWNjb3VudEZuKGFjY291bnRLZXk6IEFjY291bnRLZXkpOiBCb29sIHsKICAgIGxldCBrZXkgPSBTdHJpbmcuZW5jb2RlSGV4KGFjY291bnRLZXkucHVibGljS2V5LnB1YmxpY0tleSkKICAgIGlmIHB1YmxpY0tleXMuY29udGFpbnMoa2V5KSAmJiAhYWNjb3VudEtleS5pc1Jldm9rZWQgewogICAgICB3ZWlnaHQgPSB3ZWlnaHQgKyBhY2NvdW50S2V5LndlaWdodCAKICAgIH0KICAgIHJldHVybiBmYWxzZQogIH0KICBhY2NvdW50LmtleXMuZm9yRWFjaChhY2NvdW50Rm4pCgogIHJldHVybiB3ZWlnaHQgPj0gVUZpeDY0KDEwMDApCn0K",
                "isLockedFlowEnable": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBpc0xvY2tlZEZsb3dFbmFibGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogQm9vbCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIHJldHVybiBhY2NvdW50LmNhcGFiaWxpdGllcy5leGlzdHMoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKfQ==",
                "isTokenStorageEnabled": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBpc1Rva2VuU3RvcmFnZUVuYWJsZWQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAKICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgbGV0IGJhbGFuY2UgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KQoKICAgIHJldHVybiByZWNlaXZlciAmJiBiYWxhbmNlCn0=",
                "queryCustomFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBxdWVyeUN1c3RvbUZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgY29udHJhY3ROYW1lOiBTdHJpbmcpOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YSB7CiAgICAKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IGNvbnRyYWN0TmFtZSkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgIHJldHVybiB2YXVsdERhdGEKfQ==",
                "queryCustomNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBxdWVyeUN1c3RvbU5GVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhNZXRhZGF0YVZpZXdzCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihjb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIGNvbnRyYWN0TmFtZTogU3RyaW5nKTogTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YSB7CgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoY29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogY29udHJhY3ROYW1lKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAKICAgIHJldHVybiBjb2xsZWN0aW9uRGF0YQp9",
                "queryFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBxdWVyeUZsb3dCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgoKYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd1Rva2VuQmFsYW5jZShhZGRyZXNzOiBBZGRyZXNzKSA6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvZmxvd1Rva2VuQmFsYW5jZSkKICAgID8/IG5pbAoKICAgIAogICAgaWYgdmF1bHRSZWYgIT0gbmlsIHsKICAgICAgICByZXR1cm4gdmF1bHRSZWYhLmJhbGFuY2UKICAgIH0KICAgIAogICAgcmV0dXJuIDAuMAp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyczogW0FkZHJlc3NdKTogW1VGaXg2NF0gewogICAgbGV0IGJhbHM6IFtVRml4NjRdID0gW10KCiAgICBmb3IgYWRkciBpbiBhZGRycyB7CiAgICAgICAgbGV0IGJhbCA9IGNoZWNrRmxvd1Rva2VuQmFsYW5jZShhZGRyZXNzOiBhZGRyKQogICAgICAgIGJhbHMuYXBwZW5kKGJhbCkKICAgIH0KICAgIAogICAgcmV0dXJuIGJhbHMKfQ==",
                "removeAccountKeyByIndex": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICByZW1vdmVBY2NvdW50S2V5QnlJbmRleCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICB0cmFuc2FjdGlvbihrZXlJbmRleDogSW50KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIHNpZ25lci5rZXlzLnJldm9rZShrZXlJbmRleDoga2V5SW5kZXgpCiAgICB9Cn0=",
                "removeContractFromAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICByZW1vdmVDb250cmFjdEZyb21BY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIHRyYW5zYWN0aW9uKG5hbWU6IFN0cmluZykgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoUmVtb3ZlQ29udHJhY3QpICZBY2NvdW50KSB7CiAgICAgICAgc2lnbmVyLmNvbnRyYWN0cy5yZW1vdmUobmFtZTogbmFtZSkKICAgIH0KfQ==",
                "revokeKey": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICByZXZva2VLZXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgdHJhbnNhY3Rpb24oaW5kZXg6IEludCkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoS2V5cykgJkFjY291bnQpIHsKICAgICAgICAvLyBHZXQgYSBrZXkgZnJvbSBhbiBhdXRoIGFjY291bnQuCiAgICAgICAgbGV0IGtleUEgPSBzaWduZXIua2V5cy5yZXZva2Uoa2V5SW5kZXg6IGluZGV4KQogICAgfQp9",
                "test": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0ZXN0IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0LCByZWNpcGllbnQ6IEFkZHJlc3MpIHsKCiAgICAvLyBUaGUgVmF1bHQgcmVzb3VyY2UgdGhhdCBob2xkcyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nIHRyYW5zZmVyZWQKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9",
                "updateContractOfAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB1cGRhdGVDb250cmFjdE9mQWNjb3VudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICB0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmcsIGNvZGU6IFN0cmluZykgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoVXBkYXRlQ29udHJhY3QpICZBY2NvdW50KSB7CiAgICAgICAgc2lnbmVyLmNvbnRyYWN0cy51cGRhdGUobmFtZTogbmFtZSwgY29kZTogY29kZS51dGY4KQogICAgfQp9",
                "verifyUserSignature": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB2ZXJpZnlVc2VyU2lnbmF0dXJlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCmFjY2VzcyhhbGwpIGZ1biBtYWluKAogICAgbWVzc2FnZTogU3RyaW5nLAogICAgcmF3UHVibGljS2V5czogW1N0cmluZ10sCiAgICB3ZWlnaHRzOiBbVUZpeDY0XSwKICAgIHNpZ25BbGdvczogW1VJbnQ4XSwKICAgIGhhc2hBbGdvczogW1VJbnQ4XSwKICAgIHNpZ25hdHVyZXM6IFtTdHJpbmddLAopOiBCb29sIHsKCiAgICBsZXQga2V5TGlzdCA9IENyeXB0by5LZXlMaXN0KCkKCiAgICB2YXIgaSA9IDAKICAgIGZvciByYXdQdWJsaWNLZXkgaW4gcmF3UHVibGljS2V5cyB7CiAgICBrZXlMaXN0LmFkZCgKICAgICAgICBQdWJsaWNLZXkoCiAgICAgICAgcHVibGljS2V5OiByYXdQdWJsaWNLZXkuZGVjb2RlSGV4KCksCiAgICAgICAgc2lnbmF0dXJlQWxnb3JpdGhtOiBTaWduYXR1cmVBbGdvcml0aG0ocmF3VmFsdWU6IHNpZ25BbGdvc1tpXSkhCiAgICAgICAgKSwKICAgICAgICBoYXNoQWxnb3JpdGhtOiBIYXNoQWxnb3JpdGhtKHJhd1ZhbHVlOiBoYXNoQWxnb3NbaV0pISwKICAgICAgICB3ZWlnaHQ6IHdlaWdodHNbaV0sCiAgICApCiAgICBpID0gaSArIDEKICAgIH0KCiAgICBsZXQgc2lnbmF0dXJlU2V0OiBbQ3J5cHRvLktleUxpc3RTaWduYXR1cmVdID0gW10KCiAgICB2YXIgaiA9IDAKICAgIGZvciBzaWduYXR1cmUgaW4gc2lnbmF0dXJlcyB7CiAgICBzaWduYXR1cmVTZXQuYXBwZW5kKAogICAgICAgIENyeXB0by5LZXlMaXN0U2lnbmF0dXJlKAogICAgICAgICAgICBrZXlJbmRleDogaiwKICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUuZGVjb2RlSGV4KCkKICAgICAgICApCiAgICApCiAgICAgICAgaiA9IGogKyAxCiAgICB9CgogICAgbGV0IHNpZ25lZERhdGEgPSBtZXNzYWdlLmRlY29kZUhleCgpCgogICAgcmV0dXJuIGtleUxpc3QudmVyaWZ5KAogICAgICAgIHNpZ25hdHVyZVNldDogc2lnbmF0dXJlU2V0LAogICAgICAgIHNpZ25lZERhdGE6IHNpZ25lZERhdGEsCiAgICAgICAgZG9tYWluU2VwYXJhdGlvblRhZzogIkZMT1ctVjAuMC11c2VyIgogICAgKQp9",
                "withdrawAllUnlockedFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB3aXRoZHJhd0FsbFVubG9ja2VkRmxvdyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCi8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhlZTgyODU2YmYyMGUyYWE2Ci8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDBhZTUzY2I2ZTNmNDJhNzkKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4ZjhkNmUwNTg2YjBhMjBjNwoKdHJhbnNhY3Rpb24oKSB7CgogICAgbGV0IGhvbGRlclJlZjogYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyCiAgICBsZXQgdmF1bHRSZWY6ICZGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhbW91bnQ6IFVGaXg2NAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgICBzZWxmLmhvbGRlclJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KGZyb206IExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBUb2tlbkhvbGRlciIpCgoJCQkJc2VsZi52YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgZmxvdyB0b2tlbiB2YXVsdCByZWYiKQoKICAgICAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9DYXAgPSBzaWduZXIKICAgICAgICAuY2FwYWJpbGl0aWVzLmdldDwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPgogICAgICAgIChMb2NrZWRUb2tlbnMuTG9ja2VkQWNjb3VudEluZm9QdWJsaWNQYXRoKQoKICAgICAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgICAgICBwYW5pYygiQ291bGQgbm90IGdldCBmbG93IGxvY2tlZCB0b2tlbiB2YXVsdCIpCiAgICAgICAgfQoKICAgICAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9SZWYgPSBsb2NrZWRBY2NvdW50SW5mb0NhcCEuYm9ycm93KCkhCiAgICAgICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICAgICAgbGV0IGxvY2tlZEJhbGFuY2VVbmxvY2tlZCA9IGxvY2tlZEFjY291bnRJbmZvUmVmLmdldFVubG9ja0xpbWl0KCkKCiAgICAgICAgLy8gaWYgbG9ja2VkQmFsYW5jZSA9PSBVRml4NjQoMCkgewogICAgICAgIC8vICAgICBwYW5pYygiTm90IGVub3VnaCBhbW91bnQgdG8gd2l0aGRyYXciKQogICAgICAgIC8vIH0KCiAgICAgICAgc2VsZi5hbW91bnQgPSBsb2NrZWRCYWxhbmNlVW5sb2NrZWQKICAgIAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYudmF1bHRSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuaG9sZGVyUmVmLndpdGhkcmF3KGFtb3VudDogc2VsZi5hbW91bnQpKQogICAgfQp9",
                "withdrawUnlockedFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB3aXRoZHJhd1VubG9ja2VkRmxvdyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAvLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgovLyBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZWU4Mjg1NmJmMjBlMmFhNgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgwYWU1M2NiNmUzZjQyYTc5CmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweGY4ZDZlMDU4NmIwYTIwYzcKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CgogICAgbGV0IGhvbGRlclJlZjogYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAgJkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcgogICAgbGV0IHZhdWx0UmVmOiAmRmxvd1Rva2VuLlZhdWx0CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5ob2xkZXJSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gVG9rZW5Ib2xkZXIiKQoKICAgICAgICBzZWxmLnZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBmbG93IHRva2VuIHZhdWx0IHJlZiIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi52YXVsdFJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5ob2xkZXJSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpKQogICAgfQp9"
            },
            "bridge": {
                "batchBridgeNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaEJyaWRnZU5GVEZyb21Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRDb250cmFjdEFkZHJlc3M6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyBob3N0aW5nIHRoZSBORlQtZGVmaW5pbmcgQ2FkZW5jZSBjb250cmFjdAovLy8gQHBhcmFtIG5mdENvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWRzOiBbVUludDI1Nl0pIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkM3MjEgY29udHJhY3QgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIE5GVCB0eXBlCiAgICAgICAgc2VsZi5uZnRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5mdENvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogbmZ0Q29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiTkZUIgogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIikKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24gLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25DYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvbGxlY3Rpb25DYXAsIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgY29sbGVjdGlvbiBmcm9tIHN0b3JhZ2UgcGF0aCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBicmlkZ2UgZmVlIC0gYnJpZGdpbmcgZnJvbSBFVk0gY29uc3VtZXMgbm8gc3RvcmFnZSwgc28gZmxhdCBmZWUKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkgKiBVRml4NjQoaWRzLmxlbmd0aCkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAgICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdORlQoCiAgICAgICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIE5GVCBpbnRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "batchBridgeNFTFromEvmV2": "",
                "batchBridgeNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaEJyaWRnZU5GVFRvRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKG5mdENvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgbmZ0Q29udHJhY3ROYW1lOiBTdHJpbmcsIGlkczogW1VJbnQ2NF0pIHsKICAgIAogICAgbGV0IG5mdHM6IEB7VUludDY0IDoge05vbkZ1bmdpYmxlVG9rZW4uTkZUfX0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICBzZWxmLm5mdHMgPC0ge30KICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgTkZUICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIE5GVCBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgZm9yIGlkIGluIGlkcyB7CiAgICAgICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvbi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICAgICAgc2VsZi5uZnRzW2lkXSA8LSEgbmZ0CiAgICAgICAgfQogICAgICAgIC8vIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwICogVUZpeDY0KGlkcy5sZW5ndGgpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICB3aGlsZSBpZHggPCBpZHMubGVuZ3RoIHsKICAgICAgICAgICAgbGV0IG5mdElkID0gaWRzW2lkeF0hCiAgICAgICAgICAgIGxldCBuZnQgPC0gc2VsZi5uZnRzLnJlbW92ZShrZXk6IG5mdElkKSEgYXMgQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgICAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCggCiAgICAgICAgICAgICAgICBuZnQ6IDwtIG5mdCEsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYubmZ0cwogICAgfQp9Cg==",
                "batchBridgeNFTToEvmAddress": "",
                "batchBridgeNFTToEvmV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaEJyaWRnZU5GVFRvRXZtVjIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgoKCi8vLyBCcmlkZ2VzIGFuIE5GVCBmcm9tIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uIGluIENhZGVuY2UgdG8gdGhlIHNpZ25lcidzIENPQSBpbiBGbG93RVZNCi8vLwovLy8gTk9URTogVGhpcyB0cmFuc2FjdGlvbiBhbHNvIG9uYm9hcmRzIHRoZSBORlQgdG8gdGhlIGJyaWRnZSBpZiBuZWNlc3Nhcnkgd2hpY2ggbWF5IGluY3VyIGFkZGl0aW9uYWwgZmVlcwovLy8gICAgIHRoYW4gYnJpZGdpbmcgYW4gYXNzZXQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG9uYm9hcmRlZC4KLy8vCi8vLyBAcGFyYW0gbmZ0SWRlbnRpZmllcjogVGhlIENhZGVuY2UgdHlwZSBpZGVudGlmaWVyIG9mIHRoZSBORlQgdG8gYnJpZGdlIC0gZS5nLiBuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIKLy8vIEBwYXJhbSBpZDogVGhlIENhZGVuY2UgTkZULmlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgICAKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgcmVxdWlyZXNPbmJvYXJkaW5nOiBCb29sCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgICAgIAogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIE5GVCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgTkZUICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIE5GVCBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkc1swXSkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHZhciBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKSArIChGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUgKiBVRml4NjQoaWRzLmxlbmd0aCkpCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBORlQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcobmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkJyaWRnZSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgYXNzZXQgdHlwZSIpCiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICBhcHByb3hGZWUgPSBhcHByb3hGZWUgKyBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUKICAgICAgICB9CgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgbGV0IHNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC0gbmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICB3aGlsZSBpZHggPCBpZHMubGVuZ3RoIHsKICAgICAgICAgICAgIGlmIGlkeCA9PSAwIHsKICAgICAgICAgICAgICAgIGlkeCA9IGlkeCArIDEKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IG5mdElkID0gaWRzW2lkeF0hCiAgICAgICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvbi53aXRoZHJhdyh3aXRoZHJhd0lEOiBuZnRJZCkhIGFzIEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9CiAgICAgICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgICAgICBuZnQ6IDwtIG5mdCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchEvmAddressRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaEV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgRVZNIGNvbnRyYWN0IG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBldm1BZGRyZXNzZXM6IEFycmF5IG9mIGhleC1lbmNvZGVkIGFkZHJlc3Mgb2YgdGhlIEVWTSBjb250cmFjdCBhcyBhIFN0cmluZyB3aXRob3V0IDB4IHByZWZpeCB0byBjaGVjayBmb3IKLy8vICAgICBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29udHJhY3QgcmVxdWlyZXMgb25ib2FyZGluZyB0byB0aGUgRmxvd0VWTUJyaWRnZSBpZiB0aGUgdHlwZSBpcyBicmlkZ2VhYmxlLCBvdGhlcndpc2UgbmlsCi8vLyAgICAgaW5kZXhlZCBvbiB0aGUgaGV4LWVuY29kZWQgYWRkcmVzcyBvZiB0aGUgRVZNIGNvbnRyYWN0IHdpdGhvdXQgMHggcHJlZml4Ci8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihldm1BZGRyZXNzZXM6IFtTdHJpbmddKToge1N0cmluZzogQm9vbD99IHsKICAgIGxldCByZXN1bHRzOiB7U3RyaW5nOiBCb29sP30gPSB7fQogICAgZm9yIGFkZHJlc3NIZXggaW4gZXZtQWRkcmVzc2VzIHsKICAgICAgICBpZiByZXN1bHRzW2FkZHJlc3NIZXhdICE9IG5pbCB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIGlmIGxldCBhZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzc0hleCkgewogICAgICAgICAgICBsZXQgcmVxdWlyZXNPbmJvYXJkaW5nID0gRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3MpCiAgICAgICAgICAgIHJlc3VsdHMuaW5zZXJ0KGtleTogYWRkcmVzc0hleCwgcmVxdWlyZXNPbmJvYXJkaW5nKQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHRzCn0K",
                "batchIdentifierRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaElkZW50aWZpZXJSZXF1aXJlc09uYm9hcmRpbmcgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihpZGVudGlmaWVyczogW1N0cmluZ10pOiB7U3RyaW5nOiBCb29sP30gewogICAgbGV0IHJlc3VsdHM6IHtTdHJpbmc6IEJvb2w/fSA9IHt9CgogICAgZm9yIGlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnMgewogICAgICAgIGlmIHJlc3VsdHNbaWRlbnRpZmllcl0gIT0gbmlsIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICB9CiAgICAgICAgbGV0IHR5cGU6IFR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCiAgICAgICAgcmVzdWx0cy5pbnNlcnQoa2V5OiBpZGVudGlmaWVyLCBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcodHlwZSkpCiAgICB9CiAgICByZXR1cm4gcmVzdWx0cwp9Cg==",
                "batchOnboardByEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaE9uYm9hcmRCeUV2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgTkZUIHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIE5GVHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIE5GVCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gYWRkcmVzc2VzQXNIZXg6IEFycmF5IG9mIEVWTSBjb250cmFjdCBhZGRyZXNzZXMgKGFzIGhleCBzdHJpbmcgd2l0aG91dCAweCBwcmVmaXgpIGRlZmluaW5nIHRoZSAKLy8vICAgICBicmlkZ2VhYmxlIGFzc2V0IHRvIGJlIG9uYm9hcmRlZAovLy8KdHJhbnNhY3Rpb24oYWRkcmVzc2VzQXNIZXg6IFtTdHJpbmddKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQoYWRkcmVzc2VzQXNIZXgubGVuZ3RoKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihwcm92aWRlckxpbWl0KQogICAgICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBJdGVyYXRlIG92ZXIgcHJvdmlkZWQgYXJyYXkKICAgICAgICBmb3IgYWRkcmVzc0hleCBpbiBhZGRyZXNzZXNBc0hleCB7CiAgICAgICAgICAgIC8vIENvbnZlcnQgaGV4IHN0cmluZyB0byBFVk1BZGRyZXNzCiAgICAgICAgICAgIGxldCBhZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzc0hleCkKICAgICAgICAgICAgLy8gQ29udGludWUgaWYgdGhlIGhleCBpcyBub3QgYSB2YWxpZCBFVk0gYWRkcmVzcyBvciBpZiB0aGUgYWRkcmVzcyBpcyBhbHJlYWR5IG9uYm9hcmRlZAogICAgICAgICAgICBpZiBhZGRyZXNzID09IG5pbCB8fCBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzcyEpICE9IHRydWUgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlFVk1BZGRyZXNzKAogICAgICAgICAgICAgICAgYWRkcmVzcyEsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchOnboardByIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaE9uYm9hcmRCeUlkZW50aWZpZXIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBhc3NldCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBhc3NldHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIGFzc2V0IHRvIEVWTQovLy8KLy8vIEBwYXJhbSB0eXBlczogVGhlIENhZGVuY2UgdHlwZXMgb2YgdGhlIGJyaWRnZWFibGUgYXNzZXQgdG8gb25ib2FyZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbihpZGVudGlmaWVyczogW1N0cmluZ10pIHsKCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICAvLyBTZXQgYSB3aXRoZHJhd2FsIGxpbWl0IGZvciB0aGUgcHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJMaW1pdCA9IEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSAqIFVGaXg2NCh0eXBlcy5sZW5ndGgpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKHByb3ZpZGVyTGltaXQpCiAgICAgICAgLy8gQ3JlYXRlIFNjb3BlZEZUUHJvdmlkZXIgdG8gZXhwaXJlIGp1c3QgYWZ0ZXIgdGhpcyB0cmFuc2FjdGlvbgogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGZvciBpZGVudGlmaWVycyBpbiBpZGVudGlmaWVycyB7IAogICAgICAgICAgICBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgPz8gcGFuaWMoIkludmFsaWQgdHlwZSBpZGVudGlmaWVyIikKICAgICAgICAgICAgLy8gQ29udGludWUgb24gaWYgdGhlIHR5cGUgZG9lcyBub3QgcmVxdWlyZSBvbmJvYXJkaW5nCiAgICAgICAgICAgIGlmIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSAhPSB0cnVlIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gT25ib2FyZCB0aGUgYXNzZXQgVHlwZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICB0eXBlLAogICAgICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICAgICApCiAgICAgICAgfQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "batchOnboardByType": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaE9uYm9hcmRCeVR5cGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBhc3NldCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBhc3NldHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIGFzc2V0IHRvIEVWTQovLy8KLy8vIEBwYXJhbSB0eXBlczogVGhlIENhZGVuY2UgdHlwZXMgb2YgdGhlIGJyaWRnZWFibGUgYXNzZXQgdG8gb25ib2FyZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbih0eXBlczogW1R5cGVdKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQodHlwZXMubGVuZ3RoKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihwcm92aWRlckxpbWl0KQogICAgICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBmb3IgdHlwZSBpbiB0eXBlcyB7IAogICAgICAgICAgICAvLyBDb250aW51ZSBvbiBpZiB0aGUgdHlwZSBkb2VzIG5vdCByZXF1aXJlIG9uYm9hcmRpbmcKICAgICAgICAgICAgaWYgRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHR5cGUpICE9IHRydWUgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBhc3NldCBUeXBlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHR5cGUsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchTypeRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaFR5cGVSZXF1aXJlc09uYm9hcmRpbmcgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbih0eXBlczogW1R5cGVdKToge1R5cGU6IEJvb2w/fSB7CiAgICBsZXQgcmVzdWx0czoge1R5cGU6IEJvb2w/fSA9IHt9CiAgICBmb3IgdHlwZSBpbiB0eXBlcyB7CiAgICAgICAgaWYgcmVzdWx0c1t0eXBlXSAhPSBuaWwgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICByZXN1bHRzLmluc2VydChrZXk6IHR5cGUsIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSkKICAgIH0KICAgIHJldHVybiByZXN1bHRzCn0K",
                "bridgeNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRGcm9tRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRDb250cmFjdEFkZHJlc3M6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyBob3N0aW5nIHRoZSBORlQtZGVmaW5pbmcgQ2FkZW5jZSBjb250cmFjdAovLy8gQHBhcmFtIG5mdENvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWQ6IFVJbnQyNTYpIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkM3MjEgY29udHJhY3QgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIE5GVCB0eXBlCiAgICAgICAgc2VsZi5uZnRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5mdENvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogbmZ0Q29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiTkZUIgogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIikKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24gLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25DYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvbGxlY3Rpb25DYXAsIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgY29sbGVjdGlvbiBmcm9tIHN0b3JhZ2UgcGF0aCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBicmlkZ2UgZmVlIC0gYnJpZGdpbmcgZnJvbSBFVk0gY29uc3VtZXMgbm8gc3RvcmFnZSwgc28gZmxhdCBmZWUKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYuY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTFromEvmToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRGcm9tRXZtVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRDb250cmFjdEFkZHJlc3M6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyBob3N0aW5nIHRoZSBORlQtZGVmaW5pbmcgQ2FkZW5jZSBjb250cmFjdAovLy8gQHBhcmFtIG5mdENvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWQ6IFVJbnQyNTYsIHJlY2VpdmVyOiBBZGRyZXNzKSB7CgogICAgbGV0IG5mdFR5cGU6IFR5cGUKICAgIGxldCBjb2xsZWN0aW9uOiAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBDb3B5VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8vIEdldCB0aGUgRVJDNzIxIGNvbnRyYWN0IGFkZHJlc3MgZm9yIHRoZSBnaXZlbiBORlQgdHlwZQogICAgICAgIHNlbGYubmZ0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgICAgICBhZGRyZXNzOiBuZnRDb250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICBjb250cmFjdE5hbWU6IG5mdENvbnRyYWN0TmFtZSwKICAgICAgICAgICAgICAgIHJlc291cmNlTmFtZTogIk5GVCIKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSIpCgogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LWNvbGxlY3Rpb25EYXRhLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICB9CgogICAgICAgIGxldCByZWNlaXZlckFjY3QgPSBnZXRBY2NvdW50KHJlY2VpdmVyKQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHJlY2VpdmVyQWNjdC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgY29sbGVjdGlvbiBjYXBhYmlsaXRpZXMgZnJvbSBwdWJsaWMgcGF0aCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBicmlkZ2UgZmVlIC0gYnJpZGdpbmcgZnJvbSBFVk0gY29uc3VtZXMgbm8gc3RvcmFnZSwgc28gZmxhdCBmZWUKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYuY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTFromEvmToFlowV2": "",
                "bridgeNFTFromEvmV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRGcm9tRXZtVjIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgRVJDNzIxIGlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIENhZGVuY2UgZnJvbSBFVk0KLy8vCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQyNTYpIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLyogLS0tIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBzZWxmLm5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIE5GVCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogc2VsZi5uZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHNlbGYubmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBORlQgQ29sbGVjdGlvbiAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBFbnN1cmUgdGhlIGJyaWRnZWQgbmZ0IGlzIHRoZSBjb3JyZWN0IHR5cGUKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KHNlbGYubmZ0VHlwZS5pZGVudGlmaWVyKQogICAgICAgICAgICAgICAgLmNvbmNhdCgiLCByZWNlaXZlZDogIikuY29uY2F0KG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYuY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0=",
                "bridgeNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDY0KSB7CiAgICAKICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgICAgIAogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBORlQgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gTkZUIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC1zZWxmLm5mdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgoKdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWQ6IFVJbnQ2NCwgY29udHJhY3RFVk1BZGRyZXNzOiBTdHJpbmcsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKICAgIAogICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIE5GVCAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBORlQgc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LXNlbGYubmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIHZhciBhZGRyZXNzQnl0ZXM6IFtVSW50OF0gPSBjb250cmFjdEVWTUFkZHJlc3MuZGVjb2RlSGV4KCkKICAgICAgICBsZXQgZXZtVG9rZW5BZGRyID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IFsKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzBdLCBhZGRyZXNzQnl0ZXNbMV0sIGFkZHJlc3NCeXRlc1syXSwgYWRkcmVzc0J5dGVzWzNdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbNF0sIGFkZHJlc3NCeXRlc1s1XSwgYWRkcmVzc0J5dGVzWzZdLCBhZGRyZXNzQnl0ZXNbN10sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1s4XSwgYWRkcmVzc0J5dGVzWzldLCBhZGRyZXNzQnl0ZXNbMTBdLCBhZGRyZXNzQnl0ZXNbMTFdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTJdLCBhZGRyZXNzQnl0ZXNbMTNdLCBhZGRyZXNzQnl0ZXNbMTRdLCBhZGRyZXNzQnl0ZXNbMTVdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTZdLCBhZGRyZXNzQnl0ZXNbMTddLCBhZGRyZXNzQnl0ZXNbMThdLCBhZGRyZXNzQnl0ZXNbMTldCiAgICAgICAgXSkKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgLy8gbGV0IGRhdGEgPSBkYXRhU3RyLmRlY29kZUhleCgpCgogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBldm1Ub2tlbkFkZHIsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTToEvmAddressV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bUFkZHJlc3NWMiAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIEJyaWRnZXMgYW4gTkZUIGZyb20gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24gaW4gQ2FkZW5jZSB0byB0aGUgbmFtZWQgcmVjaXBpZW50IGluIEVWTS4KLy8vCi8vLyBOT1RFOiBUaGlzIHRyYW5zYWN0aW9uIGFsc28gb25ib2FyZHMgdGhlIE5GVCB0byB0aGUgYnJpZGdlIGlmIG5lY2Vzc2FyeSB3aGljaCBtYXkgaW5jdXIgYWRkaXRpb25hbCBmZWVzCi8vLyAgICAgdGhhbiBicmlkZ2luZyBhbiBhc3NldCB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkLgovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgQ2FkZW5jZSBORlQuaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gRVZNCi8vLyBAcGFyYW0gcmVjaXBpZW50OiBUaGUgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgTkZUCi8vLwp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGlkOiBVSW50NjQsIHJlY2lwaWVudDogU3RyaW5nKSB7CiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IHJlcXVpcmVzT25ib2FyZGluZzogQm9vbAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsgICAgICAgIAogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIE5GVCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBORlQgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gTkZUIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApICsgRmxvd0VWTUJyaWRnZUNvbmZpZy5iYXNlRmVlCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBORlQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5uZnQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYubmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IG5mdElkZW50aWZpZXI6CiAgICAgICAgICAgICJBdHRlbXB0aW5nIHRvIHNlbmQgaW52YWxpZCBuZnQgdHlwZSAtIHJlcXVlc3RlZDogIi5jb25jYXQobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5uZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBORlQgdG8gdGhlIGJyaWRnZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICBzZWxmLm5mdC5nZXRUeXBlKCksCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHRyYW5zYWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50KQogICAgICAgIEZsb3dFVk1CcmlkZ2UuYnJpZGdlTkZUVG9FVk0oCiAgICAgICAgICAgIHRva2VuOiA8LXNlbGYubmZ0LAogICAgICAgICAgICB0bzogRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHJlY2lwaWVudCksCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9",
                "bridgeNFTToEvmV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bVYyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gQnJpZGdlcyBhbiBORlQgZnJvbSB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbiBpbiBDYWRlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EgaW4gRmxvd0VWTQovLy8KLy8vIE5PVEU6IFRoaXMgdHJhbnNhY3Rpb24gYWxzbyBvbmJvYXJkcyB0aGUgTkZUIHRvIHRoZSBicmlkZ2UgaWYgbmVjZXNzYXJ5IHdoaWNoIG1heSBpbmN1ciBhZGRpdGlvbmFsIGZlZXMKLy8vICAgICB0aGFuIGJyaWRnaW5nIGFuIGFzc2V0IHRoYXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQuCi8vLwovLy8gQHBhcmFtIG5mdElkZW50aWZpZXI6IFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBvZiB0aGUgTkZUIHRvIGJyaWRnZSAtIGUuZy4gbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyCi8vLyBAcGFyYW0gaWQ6IFRoZSBDYWRlbmNlIE5GVC5pZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBFVk0KLy8vCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogICAgCiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBORlQgdHlwZSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBORlQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIE5GVCAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBORlQgc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICB2YXIgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogNDAwXzAwMCkgKyBGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUKICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIE5GVCByZXF1aXJlcyBvbmJvYXJkaW5nIC0gdGhpcyBpbXBhY3RzIHRoZSBmZWUgcmVxdWlyZWQKICAgICAgICBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyA9IEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyhzZWxmLm5mdC5nZXRUeXBlKCkpCiAgICAgICAgICAgID8/IHBhbmljKCJCcmlkZ2UgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIGFzc2V0IHR5cGUiKQogICAgICAgIGlmIHNlbGYucmVxdWlyZXNPbmJvYXJkaW5nIHsKICAgICAgICAgICAgYXBwcm94RmVlID0gYXBwcm94RmVlICsgRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlCiAgICAgICAgfQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIHByZSB7CiAgICAgICAgc2VsZi5uZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIgPT0gbmZ0SWRlbnRpZmllcjoKICAgICAgICAgICAgIkF0dGVtcHRpbmcgdG8gc2VuZCBpbnZhbGlkIG5mdCB0eXBlIC0gcmVxdWVzdGVkOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKQogICAgICAgICAgICAuY29uY2F0KCIsIHNlbmRpbmc6ICIpLmNvbmNhdChzZWxmLm5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIC8vIE9uYm9hcmQgdGhlIE5GVCB0byB0aGUgYnJpZGdlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHNlbGYubmZ0LmdldFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0TkZUKAogICAgICAgICAgICBuZnQ6IDwtc2VsZi5uZnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9",
                "bridgeTokensFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNGcm9tRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NikgewoKICAgIGxldCB2YXVsdFR5cGU6IFR5cGUKICAgIGxldCByZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzIwIGNvbnRyYWN0IGFkZHJlc3MgZm9yIHRoZSBnaXZlbiBGdW5naWJsZVRva2VuIFZhdWx0IHR5cGUKICAgICAgICBzZWxmLnZhdWx0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0b2tlbkNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogdG9rZW5Db250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJWYXVsdCIKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIG9mOiAiIC5jb25jYXQodG9rZW5Db250cmFjdEFkZHJlc3MudG9TdHJpbmcoKSkuY29uY2F0KCIuIikuY29uY2F0KHRva2VuQ29udHJhY3ROYW1lKS5jb25jYXQoIi5WYXVsdCIpKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBWYXVsdCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdCwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgLy8gSWYgdGhlIHZhdWx0IGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgaXQgYW5kIHB1Ymxpc2ggYWNjb3JkaW5nIHRvIHRoZSBjb250cmFjdCdzIGRlZmluZWQgY29uZmlndXJhdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC12YXVsdERhdGEuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKCiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIGxldCBtZXRhZGF0YUNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCgogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gocmVjZWl2ZXJDYXAsIGF0OiB2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gobWV0YWRhdGFDYXAsIGF0OiB2YXVsdERhdGEubWV0YWRhdGFQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLnJlY2VpdmVyID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmF1bHQgZnJvbSBzdG9yYWdlIHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHJlcXVlc3QKICAgICAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdUb2tlbnMoCiAgICAgICAgICAgIHR5cGU6IHNlbGYudmF1bHRUeXBlLAogICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIHRva2VuIGludG8gdGhlIHNpZ25lcidzIHZhdWx0CiAgICAgICAgc2VsZi5yZWNlaXZlci5kZXBvc2l0KGZyb206IDwtdmF1bHQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeTokensFromEvmToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNGcm9tRXZtVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NiwgcmVjZWl2ZXI6IEFkZHJlc3MpIHsKCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlCiAgICBsZXQgcmVjZWl2ZXI6ICZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkMyMCBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gRnVuZ2libGVUb2tlbiBWYXVsdCB0eXBlCiAgICAgICAgc2VsZi52YXVsdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW5Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICBjb250cmFjdE5hbWU6IHRva2VuQ29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiVmF1bHQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBvZjogIiAuY29uY2F0KHRva2VuQ29udHJhY3RBZGRyZXNzLnRvU3RyaW5nKCkpLmNvbmNhdCgiLiIpLmNvbmNhdCh0b2tlbkNvbnRyYWN0TmFtZSkuY29uY2F0KCIuVmF1bHQiKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgVmF1bHQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQsIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi52YXVsdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIC8vIElmIHRoZSB2YXVsdCBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0IGFuZCBwdWJsaXNoIGFjY29yZGluZyB0byB0aGUgY29udHJhY3QncyBkZWZpbmVkIGNvbmZpZ3VyYXRpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5tZXRhZGF0YVBhdGgpCgogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBsZXQgbWV0YWRhdGFDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwLCBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKG1ldGFkYXRhQ2FwLCBhdDogdmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKICAgICAgICB9CiAgICAgICAgbGV0IHJlY2VpdmVyQWNjdCA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICAgICAgc2VsZi5yZWNlaXZlciA9IHJlY2VpdmVyQWNjdC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZhdWx0IHJlY2VpdmVyIGNhcGFiaWxpdGllcyBmcm9tIHB1YmxpYyBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZSByZXF1ZXN0CiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIHNlbGYuY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCB0b2tlbiBpbnRvIHRoZSBzaWduZXIncyB2YXVsdAogICAgICAgIHNlbGYucmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXZhdWx0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
                "bridgeTokensFromEvmToFlowV2": "",
                "bridgeTokensFromEvmV2": "",
                "bridgeTokensToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNUb0V2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgoKdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUZpeDY0KSB7CgogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIGxldCB2YXVsdCA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KAogICAgICAgICAgICAgICAgZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgYmFsYW5jZSAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHQud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICAvLyBBcHByb3hpbWF0ZSB0aGUgYnJpZGdlIGZlZSBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZSBpbiBzdG9yYWdlIHVzYWdlIHdpdGggc29tZSBidWZmZXIKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdFRva2VucygKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeTokensToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNUb0V2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKHRva2VuQ29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCB0b2tlbkNvbnRyYWN0TmFtZTogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgY29udHJhY3RFVk1BZGRyZXNzOiBTdHJpbmcsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UsIEVWTS5DYWxsLCBFVk0uT3duZXIpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuQ29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICBjb250cmFjdE5hbWU6IHRva2VuQ29udHJhY3ROYW1lLAogICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJWYXVsdCIKICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgb2Y6ICIgLmNvbmNhdCh0b2tlbkNvbnRyYWN0QWRkcmVzcy50b1N0cmluZygpKS5jb25jYXQoIi4iKS5jb25jYXQodG9rZW5Db250cmFjdE5hbWUpLmNvbmNhdCgiLlZhdWx0IikpCgogICAgICAgIHNlbGYuY29hLmRlcG9zaXRUb2tlbnMoCiAgICAgICAgICAgIHZhdWx0OiA8LXNlbGYuc2VudFZhdWx0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQoKICAgICAgICB2YXIgYWRkcmVzc0J5dGVzOiBbVUludDhdID0gY29udHJhY3RFVk1BZGRyZXNzLmRlY29kZUhleCgpCiAgICAgICAgbGV0IGV2bVRva2VuQWRkciA9IEVWTS5FVk1BZGRyZXNzKGJ5dGVzOiBbCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1swXSwgYWRkcmVzc0J5dGVzWzFdLCBhZGRyZXNzQnl0ZXNbMl0sIGFkZHJlc3NCeXRlc1szXSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzRdLCBhZGRyZXNzQnl0ZXNbNV0sIGFkZHJlc3NCeXRlc1s2XSwgYWRkcmVzc0J5dGVzWzddLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbOF0sIGFkZHJlc3NCeXRlc1s5XSwgYWRkcmVzc0J5dGVzWzEwXSwgYWRkcmVzc0J5dGVzWzExXSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzEyXSwgYWRkcmVzc0J5dGVzWzEzXSwgYWRkcmVzc0J5dGVzWzE0XSwgYWRkcmVzc0J5dGVzWzE1XSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzE2XSwgYWRkcmVzc0J5dGVzWzE3XSwgYWRkcmVzc0J5dGVzWzE4XSwgYWRkcmVzc0J5dGVzWzE5XQogICAgICAgIF0pCiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIC8vIGxldCBkYXRhID0gZGF0YVN0ci5kZWNvZGVIZXgoKQogICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogZXZtVG9rZW5BZGRyLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCgogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeTokensToEvmAddressV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNUb0V2bUFkZHJlc3NWMiAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBTdHJpbmcpIHsKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgICAgICBsZXQgdmF1bHQgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAogICAgICAgIC8vIERldGVybWluZSBpZiB0aGUgVmF1bHQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IHZhdWx0SWRlbnRpZmllcjoKICAgICAgICAgICAgIkF0dGVtcHRpbmcgdG8gc2VuZCBpbnZhbGlkIHZhdWx0IHR5cGUgLSByZXF1ZXN0ZWQ6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQuYmFsYW5jZSA9PSBhbW91bnQ6ICJBbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVlc3RlZCBhbW91bnQiCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBWYXVsdCB0byB0aGUgYnJpZGdlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UgdHJhbnNhY3Rpb24KICAgICAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnQpCiAgICAgICAgRmxvd0VWTUJyaWRnZS5icmlkZ2VUb2tlbnNUb0VWTSgKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIHRvOiByZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQ==",
                "bridgeTokensToEvmV2": "",
                "calculateBridgeFee": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjYWxjdWxhdGVCcmlkZ2VGZWUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFJldHVybnMgdGhlIGNhbGN1bGF0ZWQgZmVlIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYnl0ZXMgdXNlZCB0byBlc2Nyb3cgYW4gYXNzZXQgcGx1cyB0aGUgYmFzZSBmZWUuCi8vLwovLy8gQHBhcmFtIGJ5dGVzOiBUaGUgbnVtYmVyIG9mIGJ5dGVzIHVzZWQgdG8gZXNjcm93IGFuIGFzc2V0LgovLy8KLy8vIEByZXR1cm4gVGhlIGNhbGN1bGF0ZWQgZmVlIHRvIGJlIHBhaWQgaW4gRmxvd1Rva2VuCi8vLwphY2Nlc3MoYWxsKQpmdW4gbWFpbihieXRlcyB1c2VkOiBVSW50NjQpOiBVRml4NjQgewogICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IHVzZWQpCn0K",
                "evmAddressRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk1VdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFJldHVybnMgd2hldGhlciBhIEVWTSBjb250cmFjdCBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gZXZtQWRkcmVzc0hleDogVGhlIGhleC1lbmNvZGVkIGFkZHJlc3Mgb2YgdGhlIEVWTSBjb250cmFjdCBhcyBhIFN0cmluZyB3aXRob3V0IDB4IHByZWZpeAovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29udHJhY3QgcmVxdWlyZXMgb25ib2FyZGluZyB0byB0aGUgRmxvd0VWTUJyaWRnZSBpZiB0aGUgdHlwZSBpcyBicmlkZ2VhYmxlLCBvdGhlcndpc2UgbmlsCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihldm1BZGRyZXNzSGV4OiBTdHJpbmcpOiBCb29sPyB7CiAgICBpZiBsZXQgYWRkcmVzcyA9IEVWTVV0aWxzLmdldEVWTUFkZHJlc3NGcm9tSGV4U3RyaW5nKGFkZHJlc3M6IGV2bUFkZHJlc3NIZXgpIHsKICAgICAgICByZXR1cm4gRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3MpCiAgICB9CiAgICByZXR1cm4gbmlsCn0K",
                "getAssociatedEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBc3NvY2lhdGVkRXZtQWRkcmVzcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBFVk1VdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFJldHVybnMgdGhlIEVWTSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gQ2FkZW5jZSB0eXBlIChhcyBpdHMgaWRlbnRpZmllciBTdHJpbmcpCi8vLwovLy8gQHBhcmFtIHR5cGVJZGVudGlmaWVyIFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBTdHJpbmcKLy8vCi8vLyBAcmV0dXJuIFRoZSBFVk0gYWRkcmVzcyBhcyBhIGhleCBzdHJpbmcgaWYgdGhlIHR5cGUgaGFzIGFuIGFzc29jaWF0ZWQgRVZNQWRkcmVzcywgb3RoZXJ3aXNlIG5pbAovLy8KYWNjZXNzKGFsbCkKZnVuIG1haW4oaWRlbnRpZmllcjogU3RyaW5nKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgewogICAgICAgIGlmIGxldCBhZGRyZXNzID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRFVk1BZGRyZXNzQXNzb2NpYXRlZCh3aXRoOiB0eXBlKSB7CiAgICAgICAgICAgIHJldHVybiBFVk1VdGlscy5nZXRFVk1BZGRyZXNzQXNIZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzcykKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
                "getAssociatedFlowIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBc3NvY2lhdGVkRmxvd0lkZW50aWZpZXIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTSBmcm9tIDB4RVZNCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlQ29uZmlnCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihhZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmc/IHsKICAgIGlmIGxldCB0eXBlSW5mbyA9IEZsb3dFVk1CcmlkZ2VDb25maWcuZ2V0VHlwZUFzc29jaWF0ZWQod2l0aDogRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3MpKSB7CiAgICAgICAgcmV0dXJuIHR5cGVJbmZvLmlkZW50aWZpZXIKICAgIH0KICAgIHJldHVybiBuaWwKfQ==",
                "getBridgeCoaAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRCcmlkZ2VDb2FBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB0aGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlCi8vLwovLy8gQHJldHVybiBUaGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlJ3MgY29vcmRpbmF0aW5nIENhZGVuY2VPd25lZEFjY291bnQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6IFN0cmluZyB7CiAgICBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBGbG93RVZNQnJpZGdlLmdldEJyaWRnZUNPQUVWTUFkZHJlc3MoKQogICAgcmV0dXJuIEVWTVV0aWxzLmdldEVWTUFkZHJlc3NBc0hleFN0cmluZyhhZGRyZXNzOiBhZGRyZXNzKQp9",
                "onboardByEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBvbmJvYXJkQnlFdm1BZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBFVk1VdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgdGhlIE5GVCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBORlRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBORlQgdG8gRVZNCi8vLwovLy8gQHBhcmFtIGNvbnRyYWN0QWRkcmVzc0hleDogVGhlIEVWTSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCAoYXMgaGV4IHN0cmluZyB3aXRob3V0IDB4IHByZWZpeCkgZGVmaW5pbmcgdGhlIAovLy8gICAgIGJyaWRnZWFibGUgYXNzZXQgdG8gYmUgb25ib2FyZGVkCi8vLwp0cmFuc2FjdGlvbihjb250cmFjdEFkZHJlc3NIZXg6IFN0cmluZykgewoKICAgIGxldCBjb250cmFjdEFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgRVZNQWRkcmVzcyBmcm9tIGhleCBzdHJpbmcgKG5vIGxlYWRpbmcgYCIweCJgKSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIHNlbGYuY29udHJhY3RBZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogY29udHJhY3RBZGRyZXNzSGV4KQogICAgICAgICAgICA/PyBwYW5pYygiSW52YWxpZCBFVk0gYWRkcmVzcyBzdHJpbmcgcHJvdmlkZWQiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIE9uYm9hcmQgdGhlIEVWTSBjb250cmFjdAogICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5RVZNQWRkcmVzcygKICAgICAgICAgICAgc2VsZi5jb250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "onboardByType": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBvbmJvYXJkQnlUeXBlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgYXNzZXQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBhc3NldCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gdHlwZTogVGhlIENhZGVuY2UgdHlwZSBvZiB0aGUgYnJpZGdlYWJsZSBhc3NldCB0byBvbmJvYXJkIHRvIHRoZSBicmlkZ2UKLy8vCnRyYW5zYWN0aW9uKHR5cGU6IFR5cGUpIHsKCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIE9uYm9hcmQgdGhlIGFzc2V0IFR5cGUKICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgIHR5cGUsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "onboardByTypeIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBvbmJvYXJkQnlUeXBlSWRlbnRpZmllciAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgdGhlIGFzc2V0IHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIGFzc2V0cyBiZXR3ZWVuIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgYXNzZXQgdG8gRVZNCi8vLwovLy8gQHBhcmFtIGlkZW50aWZlcjogVGhlIENhZGVuY2UgdHlwZSBpZGVudGlmaWVyIG9mIHRoZSBicmlkZ2VhYmxlIGFzc2V0IHRvIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbihpZGVudGlmaWVyOiBTdHJpbmcpIHsKCiAgICBsZXQgdHlwZTogVHlwZQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSB0eXBlIGZyb20gaWRlbnRpZmllciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIHNlbGYudHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgPz8gcGFuaWMoIkludmFsaWQgdHlwZSBpZGVudGlmaWVyIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBPbmJvYXJkIHRoZSBhc3NldCBUeXBlCiAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlUeXBlKAogICAgICAgICAgICBzZWxmLnR5cGUsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "typeRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0eXBlUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gdHlwZTogVGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKHR5cGU6IFR5cGUpOiBCb29sPyB7CiAgICByZXR1cm4gRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHR5cGUpCn0K",
                "typeRequiresOnboardingByIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0eXBlUmVxdWlyZXNPbmJvYXJkaW5nQnlJZGVudGlmaWVyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gaWRlbnRpZmllcjogVGhlIGlkZW50aWZpZXIgb2YgdGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGlkZW50aWZpZXI6IFN0cmluZyk6IEJvb2w/IHsKICAgIGlmIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKSB7CiAgICAgICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKQogICAgfQogICAgcmV0dXJuIG5pbAp9Cg=="
            },
            "collection": {
                "checkNFTCollection": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja05GVENvbGxlY3Rpb24gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCiAgICBpbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCiAgICAvLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCiAgICAvLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuZXhpc3QoPFRva2VuQ29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQoKICAgIGFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgcmV0dXJuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICB9",
                "enableNFTStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBlbmFibGVORlRTdG9yYWdlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENhcGFiaWxpdGllcywgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuYm9ycm93PCY8TkZUPi5Db2xsZWN0aW9uPig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KSA9PSBuaWwgewogICAgICAgICAgICBsZXQgY29sbGVjdGlvbiA8LSA8TkZUPi5jcmVhdGVFbXB0eUNvbGxlY3Rpb24obmZ0VHlwZTogVHlwZTxAPE5GVD4uTkZUPigpKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbiwgdG86IDxDb2xsZWN0aW9uU3RvcmFnZVBhdGg+KQogICAgICAgIH0KICAgICAgICBpZiAoc2lnbmVyLmNhcGFiaWxpdGllcy5ib3Jyb3c8JjxORlQ+LkNvbGxlY3Rpb24+KDxDb2xsZWN0aW9uUHVibGljUGF0aD4pID09IG5pbCkgewogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaCg8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgICAgICBsZXQgY2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8TkZUPi5Db2xsZWN0aW9uPig8Q29sbGVjdGlvblN0b3JhZ2VQYXRoPikgICAgICAgICAgICAKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNhcCwgYXQ6IDxDb2xsZWN0aW9uUHVibGljUGF0aD4pCgogICAgICAgIH0KICAgIH0KfQ==",
                "getCatalogTypeData": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDYXRhbG9nVHlwZURhdGEgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE5GVENhdGFsb2cgZnJvbSAweE5GVENhdGFsb2cKCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6IHtTdHJpbmcgOiB7U3RyaW5nIDogQm9vbH19IHsKICBsZXQgY2F0YWxvZyA9IE5GVENhdGFsb2cuZ2V0Q2F0YWxvZ1R5cGVEYXRhKCkKICByZXR1cm4gY2F0YWxvZwp9",
                "getNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRORlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIHN0cnVjdCBWaWV3SW5mbyB7CiAgYWNjZXNzKGFsbCkgbGV0IG5hbWU6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBkZXNjcmlwdGlvbjogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0KICBhY2Nlc3MoYWxsKSBsZXQgcmFyaXR5OiBTdHJpbmc/CgogIGluaXQobmFtZTogU3RyaW5nLCBkZXNjcmlwdGlvbjogU3RyaW5nLCB0aHVtYm5haWw6IHtNZXRhZGF0YVZpZXdzLkZpbGV9LCByYXJpdHk6IFN0cmluZz8pIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbgogICAgc2VsZi50aHVtYm5haWwgPSB0aHVtYm5haWwKICAgIHNlbGYucmFyaXR5ID0gcmFyaXR5CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSWQ6IFN0cmluZywgdG9rZW5JRHM6IFtVSW50NjRdKToge1VJbnQ2NDogVmlld0luZm99IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzOiB7VUludDY0OiBWaWV3SW5mb30gPSB7fQogIHZhciBjb2xsZWN0aW9uRGlzcGxheUZldGNoZWQgPSBmYWxzZQoKICBpZiB0b2tlbklEcy5sZW5ndGggPT0gMCB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoSWQpIQogIGxldCBwdWJsaWNQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBwYXRoSWQpIQogIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKQogIGlmIHR5cGUgPT0gbmlsIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCgogIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZSEuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQogIGlmICFjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgbmFtZTogcGF0aElkLAogICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiAiIiksCiAgICAgICAgcmFyaXR5OiBuaWwKICAgICAgKQogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PihwdWJsaWNQYXRoKQogIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYhLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRCkKICAgIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0RGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICB2YXIgcmFyaXR5RGVzYzogU3RyaW5nPyA9IG5pbAogICAgICAgIGlmIGxldCByYXJpdHlWaWV3ID0gTWV0YWRhdGFWaWV3cy5nZXRSYXJpdHkocmVzb2x2ZXIhKSB7CiAgICAgICAgICByYXJpdHlEZXNjID0gcmFyaXR5Vmlldy5kZXNjcmlwdGlvbgogICAgICAgIH0KCiAgICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgICBuYW1lOiBkaXNwbGF5Lm5hbWUsCiAgICAgICAgICBkZXNjcmlwdGlvbjogZGlzcGxheS5kZXNjcmlwdGlvbiwKICAgICAgICAgIHRodW1ibmFpbDogZGlzcGxheS50aHVtYm5haWwsCiAgICAgICAgICByYXJpdHk6IHJhcml0eURlc2MKICAgICAgICApCiAgICAgIH0gCiAgICB9CiAgIGVsc2UgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSWQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbAogICAgICApCiAgICB9CiAgfQogIHJldHVybiByZXMKfQ==",
                "getNFTCollection": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRORlRDb2xsZWN0aW9uIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCQppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCgoKYWNjZXNzKGFsbCkgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICBhY2Nlc3MoYWxsKSBsZXQgbmFtZTogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IHNxdWFyZUltYWdlOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgbWVkaWFUeXBlOiBTdHJpbmcKCiAgaW5pdChuYW1lOiBTdHJpbmcsIHNxdWFyZUltYWdlOiBTdHJpbmcsIG1lZGlhVHlwZTogU3RyaW5nKSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLnNxdWFyZUltYWdlID0gc3F1YXJlSW1hZ2UKICAgIHNlbGYubWVkaWFUeXBlID0gbWVkaWFUeXBlCiAgfQp9CgphY2Nlc3MoYWxsKSBzdHJ1Y3QgTkZUQ29sbGVjdGlvbiB7CiAgYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgcGF0aDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogIGFjY2VzcyhhbGwpIGxldCBpZExpc3Q6IFtVSW50NjRdCgogIGluaXQoaWQ6U3RyaW5nLCBwYXRoOiBTdHJpbmcsIGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PywgaWRMaXN0OiBbVUludDY0XSkgewogICAgc2VsZi5pZCA9IGlkCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICBzZWxmLmlkTGlzdCA9IGlkTGlzdAogIH0KfQoKYWNjZXNzKGFsbCkgZnVuIGdldERpc3BsYXkoYWRkcmVzczogQWRkcmVzcywgc3RvcmFnZVBhdGg6IFN0b3JhZ2VQYXRoLCBwdWJsaWNQYXRoOiBQdWJsaWNQYXRoKTogQ29sbGVjdGlvbkRpc3BsYXk/IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzb3VyY2VUeXBlID0gVHlwZTxAQW55UmVzb3VyY2U+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPEB7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oKQogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgdmFyIGl0ZW06IENvbGxlY3Rpb25EaXNwbGF5PyA9ICBuaWwKCiAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkgewogICAgICBsZXQgaXNSZXNvdXJjZSA9IHR5cGUuaXNTdWJ0eXBlKG9mOiByZXNvdXJjZVR5cGUpCiAgICAgIGxldCBpc05GVENvbGxlY3Rpb24gPSB0eXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpCiAgICAgIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCgogICAgICB2YXIgdG9rZW5JRHM6IFtVSW50NjRdID0gW10KICAgICAgaWYgaXNORlRDb2xsZWN0aW9uICYmIGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgICAgIGlmIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbiwgTm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHB1YmxpY1BhdGgpIHsKICAgICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvblJlZi5nZXRJRHMoKQoKICAgICAgICAgIC8vIFRPRE86IG1vdmUgdG8gYSBsaXN0CiAgICAgICAgICBpZiB0b2tlbklEcy5sZW5ndGggPiAwIHsKICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZi5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSURzWzBdKQogICAgICAgICAgICBpZiByZXNvbHZlciAhPSBuaWwgewogICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICAgICAgaXRlbSA9IENvbGxlY3Rpb25EaXNwbGF5KAogICAgICAgICAgICAgICAgICBuYW1lOiBkaXNwbGF5Lm5hbWUsCiAgICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlLmZpbGUudXJpKCksCiAgICAgICAgICAgICAgICAgIG1lZGlhVHlwZTogZGlzcGxheS5zcXVhcmVJbWFnZS5tZWRpYVR5cGUKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogIHJldHVybiBpdGVtCn0KCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSUQ6IFN0cmluZyk6IE5GVENvbGxlY3Rpb24gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IGNvbGxlY3Rpb24gPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9ufT4ocHVibGljUGF0aCkhCiAgcmV0dXJuIE5GVENvbGxlY3Rpb24oCiAgICBpZDogYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSEuaWRlbnRpZmllciwKICAgIHBhdGg6IHN0b3JhZ2VQYXRoLnRvU3RyaW5nKCksCiAgICBkaXNwbGF5OiBnZXREaXNwbGF5KGFkZHJlc3M6IGFkZHJlc3MsIHN0b3JhZ2VQYXRoOiBzdG9yYWdlUGF0aCwgcHVibGljUGF0aDogcHVibGljUGF0aCksCiAgICBpZExpc3Q6IGNvbGxlY3Rpb24uZ2V0SURzKCkKICApCn0=",
                "getNFTDisplays": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRORlREaXNwbGF5cyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgVmlld0luZm8gewphY2Nlc3MoYWxsKSBsZXQgbmFtZTogU3RyaW5nCmFjY2VzcyhhbGwpIGxldCBkZXNjcmlwdGlvbjogU3RyaW5nCmFjY2VzcyhhbGwpIGxldCB0aHVtYm5haWw6IHtNZXRhZGF0YVZpZXdzLkZpbGV9CmFjY2VzcyhhbGwpIGxldCByYXJpdHk6IFN0cmluZz8KYWNjZXNzKGFsbCkgbGV0IGNvbGxlY3Rpb25EaXNwbGF5OiBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EaXNwbGF5PwoKaW5pdChuYW1lOiBTdHJpbmcsIGRlc2NyaXB0aW9uOiBTdHJpbmcsIHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0sIHJhcml0eTogU3RyaW5nPywgY29sbGVjdGlvbkRpc3BsYXk6IE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRpc3BsYXk/KSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24KICAgIHNlbGYudGh1bWJuYWlsID0gdGh1bWJuYWlsCiAgICBzZWxmLnJhcml0eSA9IHJhcml0eQogICAgc2VsZi5jb2xsZWN0aW9uRGlzcGxheSA9IGNvbGxlY3Rpb25EaXNwbGF5CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSUQ6IFN0cmluZywgdG9rZW5JRHM6IFtVSW50NjRdKToge1VJbnQ2NDogVmlld0luZm99IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzOiB7VUludDY0OiBWaWV3SW5mb30gPSB7fQogIHZhciBjb2xsZWN0aW9uRGlzcGxheUZldGNoZWQgPSBmYWxzZQoKICBpZiB0b2tlbklEcy5sZW5ndGggPT0gMCB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoSUQpIQogIGxldCBwdWJsaWNQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBwYXRoSUQpIQogIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKQogIGlmIHR5cGUgPT0gbmlsIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCgogIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZSEuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQogIGlmICFjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgbmFtZTogcGF0aElELAogICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiAiIiksCiAgICAgICAgcmFyaXR5OiBuaWwsCiAgICAgICAgY29sbGVjdGlvbkRpc3BsYXk6IG5pbAogICAgICApCiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb24sIE5vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PihwdWJsaWNQYXRoKQogIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYhLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRCkKICAgIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXREaXNwbGF5KHJlc29sdmVyISkgewogICAgICB2YXIgcmFyaXR5RGVzYzogU3RyaW5nPyA9IG5pbAogICAgICBpZiBsZXQgcmFyaXR5VmlldyA9IE1ldGFkYXRhVmlld3MuZ2V0UmFyaXR5KHJlc29sdmVyISkgewogICAgICAgICAgcmFyaXR5RGVzYyA9IHJhcml0eVZpZXcuZGVzY3JpcHRpb24KICAgICAgICB9CgogICAgICAgIHZhciBjb2xsZWN0aW9uRGlzcGxheTogTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGlzcGxheT8gPSBuaWwKICAgICAgICBpZiAoIWNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCkgewogICAgICAgICAgaWYgbGV0IGNEaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICAgICAgY29sbGVjdGlvbkRpc3BsYXkgPSBjRGlzcGxheQogICAgICAgICAgICBjb2xsZWN0aW9uRGlzcGxheUZldGNoZWQgPSB0cnVlCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgIGRlc2NyaXB0aW9uOiBkaXNwbGF5LmRlc2NyaXB0aW9uLAogICAgICAgICAgdGh1bWJuYWlsOiBkaXNwbGF5LnRodW1ibmFpbCwKICAgICAgICAgIHJhcml0eTogcmFyaXR5RGVzYywKICAgICAgICAgIGNvbGxlY3Rpb25EaXNwbGF5OiBjb2xsZWN0aW9uRGlzcGxheQogICAgICAgICkKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgbmFtZTogcGF0aElELAogICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiAiIiksCiAgICAgICAgcmFyaXR5OiBuaWwsCiAgICAgICAgY29sbGVjdGlvbkRpc3BsYXk6IG5pbAogICAgICApCiAgICB9CiAgfQogIHJldHVybiByZXMKfQ==",
                "getNFTMetadataViews": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRORlRNZXRhZGF0YVZpZXdzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRhdGEgewogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgKICBhY2Nlc3MoYWxsKSBsZXQgcHVibGljUGF0aDogUHVibGljUGF0aAogIGFjY2VzcyhhbGwpIGxldCBwcm92aWRlclBhdGg6IFByaXZhdGVQYXRoCiAgYWNjZXNzKGFsbCkgbGV0IHB1YmxpY0NvbGxlY3Rpb246IFR5cGUKICBhY2Nlc3MoYWxsKSBsZXQgcHVibGljTGlua2VkVHlwZTogVHlwZQogIGFjY2VzcyhhbGwpIGxldCBwcm92aWRlckxpbmtlZFR5cGU6IFR5cGUKCiAgaW5pdCgKICAgIHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aCwKICAgIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgsCiAgICBwcm92aWRlclBhdGg6IFByaXZhdGVQYXRoLAogICAgcHVibGljQ29sbGVjdGlvbjogVHlwZSwKICAgIHB1YmxpY0xpbmtlZFR5cGU6IFR5cGUsCiAgICBwcm92aWRlckxpbmtlZFR5cGU6IFR5cGUKICApIHsKICAgIHNlbGYuc3RvcmFnZVBhdGggPSBzdG9yYWdlUGF0aAogICAgc2VsZi5wdWJsaWNQYXRoID0gcHVibGljUGF0aAogICAgc2VsZi5wcm92aWRlclBhdGggPSBwcm92aWRlclBhdGgKICAgIHNlbGYucHVibGljQ29sbGVjdGlvbiA9IHB1YmxpY0NvbGxlY3Rpb24KICAgIHNlbGYucHVibGljTGlua2VkVHlwZSA9IHB1YmxpY0xpbmtlZFR5cGUKICAgIHNlbGYucHJvdmlkZXJMaW5rZWRUeXBlID0gcHJvdmlkZXJMaW5rZWRUeXBlCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSWQ6IFN0cmluZywgdG9rZW5JRDogVUludDY0KToge1N0cmluZzogQW55U3RydWN0fSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHJlczoge1N0cmluZzogQW55U3RydWN0fSA9IHt9CgogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb24sIFZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PihwdWJsaWNQYXRoKQogIGlmIGNvbGxlY3Rpb25SZWYgPT0gbmlsIHsKICAgIHBhbmljKCJHZXQgQ29sbGVjdGlvbiBGYWlsZWQiKQogIH0KCiAgbGV0IHR5cGUgPSBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpCiAgaWYgdHlwZSA9PSBuaWwgewogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICBsZXQgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyA9IHR5cGUhLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgaWYgKCFjb25mb3JtZWRNZXRhZGF0YVZpZXdzKSB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBjb2xsZWN0aW9uUmVmIS5ib3Jyb3dORlQodG9rZW5JRCkKCiAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZiEuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEKSEKICBpZiByZXNvbHZlciAhPSBuaWwgewogICAgaWYgbGV0IHJhcml0eSA9IE1ldGFkYXRhVmlld3MuZ2V0UmFyaXR5KHJlc29sdmVyKSB7CiAgICAgIHJlc1sicmFyaXR5Il0gPSByYXJpdHkKICAgIH0KCiAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0RGlzcGxheShyZXNvbHZlcikgewogICAgICByZXNbImRpc3BsYXkiXSA9IGRpc3BsYXkKICAgIH0KCiAgICBpZiBsZXQgZWRpdGlvbnMgPSBNZXRhZGF0YVZpZXdzLmdldEVkaXRpb25zKHJlc29sdmVyKSB7CiAgICAgIHJlc1siZWRpdGlvbnMiXSA9IGVkaXRpb25zCiAgICB9CgogICAgaWYgbGV0IHNlcmlhbCA9IE1ldGFkYXRhVmlld3MuZ2V0U2VyaWFsKHJlc29sdmVyKSB7CiAgICAgIHJlc1sic2VyaWFsIl0gPSBzZXJpYWwKICAgIH0KCiAgICBpZiBsZXQgcm95YWx0aWVzID0gTWV0YWRhdGFWaWV3cy5nZXRSb3lhbHRpZXMocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJyb3lhbHRpZXMiXSA9IHJveWFsdGllcwogICAgfQoKICAgIGlmIGxldCBsaWNlbnNlID0gTWV0YWRhdGFWaWV3cy5nZXRMaWNlbnNlKHJlc29sdmVyKSB7CiAgICAgIHJlc1sibGljZW5zZSJdID0gbGljZW5zZQogICAgfQoKICAgIGlmIGxldCBtZWRpYXMgPSBNZXRhZGF0YVZpZXdzLmdldE1lZGlhcyhyZXNvbHZlcikgewogICAgICByZXNbIm1lZGlhcyJdID0gbWVkaWFzCiAgICB9CgogICAgaWYgbGV0IGV4dGVybmFsVVJMID0gTWV0YWRhdGFWaWV3cy5nZXRFeHRlcm5hbFVSTChyZXNvbHZlcikgewogICAgICByZXNbImV4dGVybmFsVVJMIl0gPSBleHRlcm5hbFVSTAogICAgfQoKICAgIGlmIGxldCB0cmFpdHMgPSBNZXRhZGF0YVZpZXdzLmdldFRyYWl0cyhyZXNvbHZlcikgewogICAgICByZXNbInRyYWl0cyJdID0gdHJhaXRzCiAgICB9CgogICAgaWYgbGV0IGNvbGxlY3Rpb25EaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlcikgewogICAgICByZXNbImNvbGxlY3Rpb25EaXNwbGF5Il0gPSBjb2xsZWN0aW9uRGlzcGxheQogICAgfQoKICAgIGlmIGxldCBjb2xsZWN0aW9uRGF0YSA9IE1ldGFkYXRhVmlld3MuZ2V0TkZUQ29sbGVjdGlvbkRhdGEocmVzb2x2ZXIpIHsKICAgICAgbGV0IGRhdGEgPSBDb2xsZWN0aW9uRGF0YSgKICAgICAgICBzdG9yYWdlUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgsCiAgICAgICAgcHVibGljUGF0aDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCwKICAgICAgICBwcm92aWRlclBhdGg6IGNvbGxlY3Rpb25EYXRhLnByb3ZpZGVyUGF0aCwKICAgICAgICBwdWJsaWNDb2xsZWN0aW9uOiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNDb2xsZWN0aW9uLAogICAgICAgIHB1YmxpY0xpbmtlZFR5cGU6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY0xpbmtlZFR5cGUsCiAgICAgICAgcHJvdmlkZXJMaW5rZWRUeXBlOiBjb2xsZWN0aW9uRGF0YS5wcm92aWRlckxpbmtlZFR5cGUKICAgICAgKQogICAgICByZXNbImNvbGxlY3Rpb25EYXRhIl0gPSBkYXRhCiAgICB9CiAgfQogIHJlc1sidG9rZW5JZCJdID0gdG9rZW5JRAoKICByZXR1cm4gcmVzCn0=",
                "getUserCollections": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRVc2VyQ29sbGVjdGlvbnMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4Vmlld1Jlc29sdmVyCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBtZWRpYVR5cGU6IFN0cmluZwoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IFN0cmluZywgbWVkaWFUeXBlOiBTdHJpbmcpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgc2VsZi5tZWRpYVR5cGUgPSBtZWRpYVR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KCiAgaW5pdChpZDpTdHJpbmcsIHBhdGg6IFN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgsIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgpOiBDb2xsZWN0aW9uRGlzcGxheT8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgCiAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9SYXJpYmxlTkZUQ29sbGVjdGlvbiAKICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvQXJsZWVTY2VuZSB7CiAgICAgICAgICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEc1swXSkKICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICAgICAgICAgIGl0ZW0gPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICBzcXVhcmVJbWFnZTogZGlzcGxheS5zcXVhcmVJbWFnZS5maWxlLnVyaSgpLAogICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6IGRpc3BsYXkuc3F1YXJlSW1hZ2UubWVkaWFUeXBlCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICByZXR1cm4gaXRlbQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbTkZUQ29sbGVjdGlvbl0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IGNvbGxlY3Rpb25QYXRoczogW1N0b3JhZ2VQYXRoXSA9IFtdCiAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQoKICBmdW4gZWFjaFBhdGgocGF0aDogU3RvcmFnZVBhdGgsIFR5cGU6IFR5cGUpOiBCb29sIHsKICAgCiAgICBpZiBUeXBlICE9IG5pbCB7CiAgICAgIGlmIFR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkgewogICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgfQogICAgICAKICAgIH0KICAgCiAgICByZXR1cm4gdHJ1ZQogIH0KCiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZWFjaFBhdGgpCgogIGZvciBwYXRoIGluIGNvbGxlY3Rpb25QYXRocyB7CiAgICBsZXQgcGF0aFN0ciA9IHBhdGgudG9TdHJpbmcoKQogICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgIGxldCBpZGVudGlmaWVyID0gc3BsaXRBcnJbMl0KICAgIGxldCBwdWJQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBpZGVudGlmaWVyKSEKICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQoKICAgIGNvbGxlY3Rpb25zLmFwcGVuZCgKICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgaWQ6IGlkZW50aWZpZXIsCiAgICAgIHBhdGg6IHB1YlBhdGgudG9TdHJpbmcoKSwKICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgIGlkTGlzdDogY29sbGVjdGlvbi5nZXRJRHMoKQogICAgICApCiAgICApCiAgfQoKCiAgcmV0dXJuIGNvbGxlY3Rpb25zCn0=",
                "getUserCollectionsPage": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRVc2VyQ29sbGVjdGlvbnNQYWdlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwogIGltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweFZpZXdSZXNvbHZlcgogIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCiAgCiAgYWNjZXNzKGFsbCkgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICAgIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBzcXVhcmVJbWFnZTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgbWVkaWFUeXBlOiBTdHJpbmcKICAKICAgIGluaXQobmFtZTogU3RyaW5nLCBzcXVhcmVJbWFnZTogU3RyaW5nLCBtZWRpYVR5cGU6IFN0cmluZykgewogICAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgICBzZWxmLm1lZGlhVHlwZSA9IG1lZGlhVHlwZQogICAgfQogIH0KICAKICBhY2Nlc3MoYWxsKSBzdHJ1Y3QgTkZUQ29sbGVjdGlvbiB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogICAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KICAKICAgIGluaXQoaWQ6U3RyaW5nLCBwYXRoOiBTdHJpbmcsIGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PywgaWRMaXN0OiBbVUludDY0XSkgewogICAgICBzZWxmLmlkID0gaWQKICAgICAgc2VsZi5wYXRoID0gcGF0aAogICAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgICB9CiAgfQogIAogIGFjY2VzcyhhbGwpIGZ1biBnZXREaXNwbGF5KGFkZHJlc3M6IEFkZHJlc3MsIHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aCwgcHVibGljUGF0aDogUHVibGljUGF0aCk6IENvbGxlY3Rpb25EaXNwbGF5PyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAogIAogICAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkgewogICAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICAgIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgCiAgICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgICAgaWYgaXNORlRDb2xsZWN0aW9uICYmIGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKICAKICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pCiAgICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICAgICAgICBpdGVtID0gQ29sbGVjdGlvbkRpc3BsYXkoCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlLmZpbGUudXJpKCksCiAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBkaXNwbGF5LnNxdWFyZUltYWdlLm1lZGlhVHlwZQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgCiAgICByZXR1cm4gaXRlbQogIH0KICAKICBhY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHN0YXJ0OiBJbnQsIGVuZDogSW50KTogW05GVENvbGxlY3Rpb25dIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBjb2xsZWN0aW9uUGF0aHM6IFtTdG9yYWdlUGF0aF0gPSBbXQogICAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQogIAogICAgZnVuIGVhY2hQYXRoKHBhdGg6IFN0b3JhZ2VQYXRoLCBUeXBlOiBUeXBlKTogQm9vbCB7CiAgICAgCiAgICAgIGlmIFR5cGUgIT0gbmlsIHsKICAgICAgICBpZiBUeXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgICB9CiAgICAgICAgCiAgICAgIH0KICAgICAKICAgICAgcmV0dXJuIHRydWUKICAgIH0KICAKICAgIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGVhY2hQYXRoKQogIAogICAgZm9yIHBhdGggaW4gY29sbGVjdGlvblBhdGhzIHsKICAgICAgbGV0IHBhdGhTdHIgPSBwYXRoLnRvU3RyaW5nKCkKICAgICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgICAgbGV0IGlkZW50aWZpZXIgPSBzcGxpdEFyclsyXQogICAgICBsZXQgcHViUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhCiAgICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQogIAogICAgICBjb2xsZWN0aW9ucy5hcHBlbmQoCiAgICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgICBpZDogaWRlbnRpZmllciwKICAgICAgICBwYXRoOiBwdWJQYXRoLnRvU3RyaW5nKCksCiAgICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgICAgaWRMaXN0OiBjb2xsZWN0aW9uLmdldElEcygpCiAgICAgICAgKQogICAgICApCiAgICAgIAogICAgfQoKICAgIGxldCBsZW4gPSBjb2xsZWN0aW9ucy5sZW5ndGgKICAgIHZhciBlbmROdW4gPSBlbmQKICAgIGlmIGxlbiA8IHN0YXJ0IHsKICAgICAgcmV0dXJuIFtdCiAgICB9IGVsc2UgewogICAgICBpZiBsZW4gPCBlbmQgewogICAgICAgIGVuZE51biA9IGxlbgogICAgICB9CiAgICB9CiAgICAKICAgIHJldHVybiBjb2xsZWN0aW9ucy5zbGljZShmcm9tOiBzdGFydCwgdXBUbzogZW5kTnVuICkKICB9",
                "sendNbaNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kTmJhTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgovLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCi8vIG9uZSBhY2NvdW50IHRvIGFub3RoZXIKdHJhbnNhY3Rpb24ocmVjaXBpZW50OiBBZGRyZXNzLCB3aXRoZHJhd0lEOiBVSW50NjQpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXInJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlCiAgICAgICAgLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogL3N0b3JhZ2UvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXInJ3MgY29sbGVjdGlvbiIpCiAgICAgICAgbGV0IHNlbmRlclJlZiA9IHNpZ25lcgogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKQogICAgICAgIC8vIGJvcnJvdyBhIHB1YmxpYyByZWZlcmVuY2UgdG8gdGhlIHJlY2VpdmVycyBjb2xsZWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudFJlZiA9IHJlY2lwaWVudAogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7VG9wU2hvdC5Nb21lbnRDb2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKSA/PyBwYW5pYygiVW5hYmxlIHRvIGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UiKQogICAgICAgIAogICAgICAgIC8vIHdpdGhkcmF3IHRoZSBORlQgZnJvbSB0aGUgb3duZXInJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQogICAgICAgIC8vIERlcG9zaXQgdGhlIE5GVCBpbiB0aGUgcmVjaXBpZW50JydzIGNvbGxlY3Rpb24KICAgICAgICByZWNpcGllbnRSZWYhLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgfQp9",
                "sendNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKLy8gVGhpcyB0cmFuc2FjdGlvbiBpcyBmb3IgdHJhbnNmZXJyaW5nIGFuZCBORlQgZnJvbQovLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgp0cmFuc2FjdGlvbihyZWNpcGllbnQ6IEFkZHJlc3MsIHdpdGhkcmF3SUQ6IFVJbnQ2NCkgewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KGZyb206IDxDb2xsZWN0aW9uU3RvcmFnZVBhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gYm9ycm93IGEgcHVibGljIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXJzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgZGVwb3NpdFJlZiA9IHJlY2lwaWVudAogICAgICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgICAgIC5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gd2l0aGRyYXcgdGhlIE5GVCBmcm9tIHRoZSBvd25lcidzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgTkZUIGluIHRoZSByZWNpcGllbnQncyBjb2xsZWN0aW9uCiAgICAgICAgZGVwb3NpdFJlZi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgIH0KfQ=="
            },
            "contract": {
                "getContractByName": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDb250cmFjdEJ5TmFtZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBjb250cmFjdE5hbWU6IFN0cmluZyk6IFN0cmluZz8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBkZXBsb3llZENvbnRyYWN0ID0gYWNjb3VudC5jb250cmFjdHMuZ2V0KG5hbWU6IGNvbnRyYWN0TmFtZSkKCiAgcmV0dXJuIFN0cmluZy5mcm9tVVRGOChkZXBsb3llZENvbnRyYWN0Py5jb2RlISkKfQ==",
                "getContractNames": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDb250cmFjdE5hbWVzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiAmW1N0cmluZ10gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHJldHVybiBhY2NvdW50LmNvbnRyYWN0cy5uYW1lcwp9"
            },
            "evm": {
                "call": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjYWxsIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oaGV4RW5jb2RlZERhdGE6IFN0cmluZywgaGV4RW5jb2RlZEFkZHJlc3M6IFN0cmluZyk6IFN0cmluZyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KEFkZHJlc3MoMHhDT0EpKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICBsZXQgYWRkcmVzc0J5dGVzID0gaGV4RW5jb2RlZEFkZHJlc3MuZGVjb2RlSGV4KCkudG9Db25zdGFudFNpemVkPFtVSW50ODsgMjBdPigpIQoKICAgIGxldCB0eFJlc3VsdCA9IGNvYS5jYWxsKAogICAgICAgIHRvOiBFVk0uRVZNQWRkcmVzcyhieXRlczogYWRkcmVzc0J5dGVzKSwKICAgICAgICBkYXRhOiBoZXhFbmNvZGVkRGF0YS5kZWNvZGVIZXgoKSwKICAgICAgICBnYXNMaW1pdDogMTUwMDAwMDAsIC8vIHRvZG8gbWFrZSBpdCBjb25maWd1cmFibGUsIG1heCBmb3Igbm93CiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIGFzc2VydCgKICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICApCgogICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoY2FsbFJlc3VsdC5kYXRhKQp9Cg==",
                "callContract": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjYWxsQ29udHJhY3QgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbih0b0VWTUFkZHJlc3NIZXg6IFN0cmluZywgYW1vdW50OiBVRml4NjQsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgY29hOiBhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiAvc3RvcmFnZS9ldm0pID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1FVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpLCB0bzogL3N0b3JhZ2UvZXZtKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIGJyaWRnZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyh0b0VWTUFkZHJlc3NIZXgpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLmJ5dGVzID09IHNlbGYuY29hLmFkZHJlc3MoKS5ieXRlcyB7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgdmFsdWVCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9",
                "checkCoaLink": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja0NvYUxpbmsgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgQ09BIGlzIHN0b3JlZCBhbmQgaXRzIHB1YmxpYyBjYXBhYmlsaXR5IGlzIHB1Ymxpc2hlZAovLy8KLy8vIEBwYXJhbSBmbG93QWRkcmVzczogVGhlIEZsb3cgYWRkcmVzcyB0byBjaGVjayBmb3IgYSBDT0EKLy8vCi8vLyBAcmV0dXJuIEJvb2w6IFdoZXRoZXIgYSBDT0EgaXMgc3RvcmVkIGFuZCBpdHMgcHVibGljIGNhcGFiaWxpdHkgaXMgcHVibGlzaGVkLCBuaWwgaWYgbm8gQ09BIGlzIHN0b3JlZAovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oZmxvd0FkZHJlc3M6IEFkZHJlc3MpOiBCb29sPyB7CiAgICAvLyBCb3Jyb3cgdGhlIENPQSB0byBjaGVjayBpZiBvbmUgaXMgc3RvcmVkCiAgICBpZiBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oZmxvd0FkZHJlc3MpCiAgICAgICAgLnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKT8uYWRkcmVzcygpIHsKICAgICAgICAvLyBDT0EgZm91bmQgLSBjaGVjayBpZiB0aGUgcHVibGljIGNhcGFiaWxpdHkgaXMgcHVibGlzaGVkCiAgICAgICAgcmV0dXJuIGdldEFjY291bnQoZmxvd0FkZHJlc3MpLmNhcGFiaWxpdGllcy5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigvcHVibGljL2V2bSkgIT0gbmlsCiAgICB9CiAgICAvLyBObyBDT0EgZm91bmQgLSByZXR1cm4gbmlsCiAgICByZXR1cm4gbmlsCn0=",
                "coaLink": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjb2FMaW5rIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gcHVibGlzaGVzIGEgcHVibGljICoqdW5lbnRpdGxlZCoqIGNhcGFiaWxpdHkgZm9yIHRoZSBDT0Egc3RvcmVkIGluIHRoZSBzaWduaW5nIGFjY291bnQncyBzdG9yYWdlCi8vLyB3aGVyZSBhIENPQSBoYXMgYWxyZWFkeSBiZWVuIHN0b3JlZC4KLy8vCnRyYW5zYWN0aW9uIHsKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgU3RvcmFnZUNhcGFiaWxpdGllcywgUHVibGlzaENhcGFiaWxpdHksIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLy8gRW5zdXJlIGEgQ09BIGlzIHN0b3JlZAogICAgICAgIGxldCBjb2FQYXRoID0gL3N0b3JhZ2UvZXZtCiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoCiAgICAgICAgICAgICAgICAiQ291bGQgbm90IGZpbmQgQ09BIGluIHN0b3JhZ2UgYXQgcGF0aCAiLmNvbmNhdChjb2FQYXRoLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAuY29uY2F0KCIuIE1ha2Ugc3VyZSB0aGUgc2lnbmluZyBhY2NvdW50IGhhcyBpbml0aWFsaXplZCBhIENPQSBhdCB0aGUgZXhwZWN0ZWQgcGF0aC4iKQogICAgICAgICAgICApCgogICAgICAgIC8vIFB1Ymxpc2ggYSBwdWJsaWMgKip1bmVudGl0bGVkKiogY2FwYWJpbGl0eQogICAgICAgIGxldCBjb2FQdWJsaWNQYXRoID0gL3B1YmxpYy9ldm0KICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2FQdWJsaWNQYXRoKQogICAgICAgIGxldCBjb2FDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oY29hUGF0aCkKICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29hQ2FwYWJpbGl0eSwgYXQ6IGNvYVB1YmxpY1BhdGgpCiAgICB9Cn0=",
                "createCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVDb2EgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKCi8vLyBDcmVhdGVzIGEgQ09BIGFuZCBzYXZlcyBpdCBpbiB0aGUgc2lnbmVyJ3MgRmxvdyBhY2NvdW50ICYgcGFzc2luZyB0aGUgZ2l2ZW4gdmFsdWUgb2YgRmxvdyBpbnRvIEZsb3dFVk0KdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhdXRoOiBhdXRoKElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBjb2EuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQoKICAgICAgICBsb2coY29hLmJhbGFuY2UoKS5pbkZMT1coKSkKICAgICAgICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1jb2EsIHRvOiBzdG9yYWdlUGF0aCkKICAgICAgICBsZXQgYWRkcmVzc2FibGVDYXAgPSBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PihzdG9yYWdlUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnVucHVibGlzaChwdWJsaWNQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMucHVibGlzaChhZGRyZXNzYWJsZUNhcCwgYXQ6IHB1YmxpY1BhdGgpCiAgICB9Cn0=",
                "createCoaEmpty": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVDb2FFbXB0eSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgoKLy8vIENyZWF0ZXMgYSBDT0EgYW5kIHNhdmVzIGl0IGluIHRoZSBzaWduZXIncyBGbG93IGFjY291bnQgJiBwYXNzaW5nIHRoZSBnaXZlbiB2YWx1ZSBvZiBGbG93IGludG8gRmxvd0VWTQp0cmFuc2FjdGlvbigpIHsKICAgIGxldCBhdXRoOiBhdXRoKElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQogICAgICAgIHNlbGYuYXV0aCA9IHNpZ25lcgogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBjb2EgPC0gRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKQogICAgICAgIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBsZXQgcHVibGljUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogImV2bSIpIQogICAgICAgIHNlbGYuYXV0aC5zdG9yYWdlLnNhdmU8QEVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pig8LWNvYSwgdG86IHN0b3JhZ2VQYXRoKQogICAgICAgIGxldCBhZGRyZXNzYWJsZUNhcCA9IHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KHN0b3JhZ2VQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHB1YmxpY1BhdGgpCiAgICAgICAgc2VsZi5hdXRoLmNhcGFiaWxpdGllcy5wdWJsaXNoKGFkZHJlc3NhYmxlQ2FwLCBhdDogcHVibGljUGF0aCkKICAgIH0KfQ==",
                "deployContract": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBkZXBsb3lDb250cmFjdCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKdHJhbnNhY3Rpb24oY29kZTogU3RyaW5nKSB7CiAgICBsZXQgY29hOiBhdXRoKEVWTS5EZXBsb3kpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uRGVwbG95KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bSkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBDT0EhIikKCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgIHNlbGYuY29hLmRlcGxveShjb2RlOiBjb2RlLmRlY29kZUhleCgpLCAgZ2FzTGltaXQ6IDE1MDAwMDAwLCB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApKQogICAgfQp9Cg==",
                "estimateGas": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBlc3RpbWF0ZUdhcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRUeDogU3RyaW5nLCBhZGRyZXNzOiBBZGRyZXNzKTogW1VJbnQ2NDsgMl0gewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyZXNzKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICBsZXQgdHhSZXN1bHQgPSBFVk0ucnVuKHR4OiBoZXhFbmNvZGVkVHguZGVjb2RlSGV4KCksIGNvaW5iYXNlOiBjb2EuYWRkcmVzcygpKQoKICAgIGFzc2VydCgKICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICApCgogICAgcmV0dXJuIFt0eFJlc3VsdC5lcnJvckNvZGUsIHR4UmVzdWx0Lmdhc1VzZWRdCn0K",
                "fundCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBmdW5kQ29hIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CiAgICBsZXQgc2VudFZhdWx0OiBARmxvd1Rva2VuLlZhdWx0CiAgICBsZXQgYXV0aDogYXV0aChTdG9yYWdlKSAmQWNjb3VudAogICAgbGV0IGNvYTogJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKCiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCgogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgICAgIHNlbGYuYXV0aCA9IHNpZ25lcgogICAgICAgIHNlbGYuY29hID0gY29hCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg==",
                "fundEvmAddr": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBmdW5kRXZtQWRkciAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihldm1BZGRyOiBTdHJpbmcsIGFtb3VudDogVUZpeDY0KSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oPFRva2VuUmVjZWl2ZXJQYXRoPikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9",
                "getAddr": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBZGRyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGZsb3dBZGRyZXNzOiBBZGRyZXNzKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oZmxvd0FkZHJlc3MpCiAgICAgICAgLnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKT8uYWRkcmVzcygpIHsKICAgICAgICBsZXQgYnl0ZXM6IFtVSW50OF0gPSBbXQogICAgICAgIGZvciBieXRlIGluIGFkZHJlc3MuYnl0ZXMgewogICAgICAgICAgICBieXRlcy5hcHBlbmQoYnl0ZSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoYnl0ZXMpCiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
                "getBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oaGV4RW5jb2RlZEFkZHJlc3M6IFN0cmluZyk6IFVJbnQgewogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKICAgIGxldCBhZGRyZXNzID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcykKCiAgICByZXR1cm4gYWRkcmVzcy5iYWxhbmNlKCkuaW5BdHRvRkxPVygpCn0K",
                "getCoaAddr": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDb2FBZGRyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFN0cmluZyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHJlc3MpCgogICAgbGV0IGNvYSA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICkKCiAgICBpZiBjb2EgPT0gbmlsIHsgCiAgICAgICAgcmV0dXJuICIiCiAgICB9IGVsc2UgewogICAgICAgIGxldCBjb2FBZGRyID0gY29hPy5hZGRyZXNzKCkgCgogICAgICAgIGxldCBhZGRyQnl0ZTogW1VJbnQ4XSA9IFtdCgogICAgICAgIGZvciBieXRlIGluIGNvYUFkZHI/LmJ5dGVzISB7CiAgICAgICAgICAgIGFkZHJCeXRlLmFwcGVuZChieXRlKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoYWRkckJ5dGUpCiAgICB9Cn0K",
                "getCoaBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDb2FCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyZXNzKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICAKICAgIHJldHVybiBjb2EuYmFsYW5jZSgpLmluRkxPVygpCn0K",
                "getCode": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDb2RlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oaGV4RW5jb2RlZEFkZHJlc3M6IFN0cmluZyk6IFN0cmluZyB7CiAgICBsZXQgYWRkcmVzc0J5dGVzID0gaGV4RW5jb2RlZEFkZHJlc3MuZGVjb2RlSGV4KCkudG9Db25zdGFudFNpemVkPFtVSW50ODsgMjBdPigpIQogICAgbGV0IGFkZHJlc3MgPSBFVk0uRVZNQWRkcmVzcyhieXRlczogYWRkcmVzc0J5dGVzKQoKICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGFkZHJlc3MuY29kZSgpKQp9Cg==",
                "getNonce": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXROb25jZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBVSW50NjQgewogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKICAgIGxldCBhZGRyZXNzID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcykKCiAgICByZXR1cm4gYWRkcmVzcy5ub25jZSgpCn0K",
                "newAccountAndCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBuZXdBY2NvdW50QW5kQ29hIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcsIHNpZ25hdHVyZUFsZ29yaXRobTogVUludDgsIGhhc2hBbGdvcml0aG06IFVJbnQ4LCB3ZWlnaHQ6IFVGaXg2NCkgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAogICAgbGV0IGF1dGg6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewoKICAgICAgICBsZXQgYWNjb3VudCA9IEFjY291bnQocGF5ZXI6IHNpZ25lcikKCiAgICAgICAgbGV0IGtleSA9IFB1YmxpY0tleSgKICAgICAgICAgICAgcHVibGljS2V5OiBwdWJsaWNLZXkuZGVjb2RlSGV4KCksCiAgICAgICAgICAgIHNpZ25hdHVyZUFsZ29yaXRobTogU2lnbmF0dXJlQWxnb3JpdGhtKHJhd1ZhbHVlOiBzaWduYXR1cmVBbGdvcml0aG0pIQogICAgICAgICkKCiAgICAgICAgYWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleSwgaGFzaEFsZ29yaXRobTogSGFzaEFsZ29yaXRobShyYXdWYWx1ZTogaGFzaEFsZ29yaXRobSkhLCB3ZWlnaHQ6IHdlaWdodCkKCQkKICAgICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiAwLjApIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICAgICAgc2VsZi5hdXRoID0gYWNjb3VudAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBhY2NvdW50IDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBsb2coYWNjb3VudC5hZGRyZXNzKCkpCiAgICAgICAgYWNjb3VudC5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCgogICAgICAgIGxvZyhhY2NvdW50LmJhbGFuY2UoKSkKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1hY2NvdW50LCB0bzogU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogImV2bSIpISkKICAgIH0KfQo=",
                "run": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBydW4gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihoZXhFbmNvZGVkVHg6IFN0cmluZykgewogICAgbGV0IGNvYTogJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IHR4UmVzdWx0ID0gRVZNLnJ1bih0eDogaGV4RW5jb2RlZFR4LmRlY29kZUhleCgpLCBjb2luYmFzZTogc2VsZi5jb2EuYWRkcmVzcygpKQogICAgICAgIC8vIHRvZG8gb25seSB0ZW1wb3JhcnkgdW50aWwgd2UgY29ycmVjdGx5IGhhbmRsZSBmYWlsdXJlIGV2ZW50cwogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCiAgICB9Cn0K",
                "transferCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlckNvYSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgYWRkcmVzczogQWRkcmVzcykgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEVWTS5XaXRoZHJhdykgJkFjY291bnQpIHsKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCgogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIGNvYS53aXRoZHJhdyhiYWxhbmNlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogVUludChhbW91bnQpICogMTAwMDAwMDAwMDAwMDAwMDAwKSkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgICBsZXQgcmVjZWl2ZXIgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgcmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg==",
                "transferFlowFromCoaToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlckZsb3dGcm9tQ29hVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0LCBhZGRyZXNzOiBBZGRyZXNzKSB7CiAgICBsZXQgc2VudFZhdWx0OiBARmxvd1Rva2VuLlZhdWx0CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgRVZNLldpdGhkcmF3KSAmQWNjb3VudCkgewogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBDT0EhIikKICAgICAgICBsZXQgd2l0aGRyYXdCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgd2l0aGRyYXdCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIGNvYS53aXRoZHJhdyhiYWxhbmNlOiB3aXRoZHJhd0JhbGFuY2UpIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHJlY2VpdmVyID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgIHJlY2VpdmVyLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQo=",
                "transferFlowToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlckZsb3dUb0V2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbihyZWNpcGllbnRFVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwogICAgdmFyIHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigKICAgICAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpIGFzISBARmxvd1Rva2VuLlZhdWx0CgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnRFVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgICAgICAKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgdmFsdWVCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IFtdLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKCiAgICB9Cn0=",
                "withdrawCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB3aXRoZHJhd0NvYSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgYWRkcmVzczogQWRkcmVzcykgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEVWTS5XaXRoZHJhdykgJkFjY291bnQpIHsKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICAgICAgbGV0IHdpdGhkcmF3QmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHdpdGhkcmF3QmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSBjb2Eud2l0aGRyYXcoYmFsYW5jZTogd2l0aGRyYXdCYWxhbmNlKSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICByZWNlaXZlci5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICB9Cn0K"
            },
            "hybridCustody": {
                "addNFTCollectionToDelegator": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhZGRORlRDb2xsZWN0aW9uVG9EZWxlZ2F0b3IgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCnRyYW5zYWN0aW9uKHBhcmVudDogQWRkcmVzcywgaXNQdWJsaWM6IEJvb2wpIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IG8gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIGxldCBjaGlsZDogJkh5YnJpZEN1c3RvZHkuQ2hpbGRBY2NvdW50ID0gby5ib3Jyb3dDaGlsZEFjY291bnQocGFyZW50OiBwYXJlbnQpCiAgICAgICAgICAgID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgICAgIGxldCBjYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFeGFtcGxlTkZULkNvbGxlY3Rpb24+KEV4YW1wbGVORlQuQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgIG8uYWRkQ2FwYWJpbGl0eVRvRGVsZWdhdG9yKHBhcmVudDogcGFyZW50LCBjYXA6IGNhcCwgaXNQdWJsaWM6IGlzUHVibGljKQogICAgfQp9",
                "batchBridgeChildNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaEJyaWRnZUNoaWxkTkZURnJvbUV2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZHM6IFtVSW50MjU2XSkgewogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gbGV0IHJlY2VpdmVyID0gZ2V0QWNjb3VudChjaGlsZCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKCgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwdWJsaWNDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgogICAgICAgIGFzc2VydChwdWJsaWNDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHVibGljIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHB1YmxpY0NhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQoKICAgICAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAgICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0gPC0gY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICAgICAgdHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGFzc2VydCgKICAgICAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gbmZ0VHlwZSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJCcmlkZ2VkIG5mdCB0eXBlIG1pc21hdGNoIC0gcmVxdWVzd3RlZDogIi5jb25jYXQobmZ0VHlwZS5pZGVudGlmaWVyKQogICAgICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGNvbGxlY3Rpb25SZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgICAgIH0KICAgICAgCgogICAgICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchBridgeChildNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaEJyaWRnZUNoaWxkTkZUVG9Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZHM6IFtVSW50NjRdKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIAogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIGxldCBpZCA9IGlkc1swXQogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQogICAgICAgIGxldCBjaGlsZE5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGNvbGxlY3Rpb24uZGVwb3NpdCh0b2tlbjogPC1jaGlsZE5mdCkKICAgICAgICAvLyAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMCAqIFVGaXg2NChpZHMubGVuZ3RoKQogICAgICAgCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQoKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBjb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LSBuZnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIHZhciBpZHggPSAwCiAgICAgICAgZm9yIG5mdElkIGluIGlkcyB7CiAgICAgICAgICAgIGlmIGlkeCA9PSAwIHsKICAgICAgICAgICAgICAgIGlkeCA9IGlkeCArIDEKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBuZnRJZCkKICAgICAgICAgICAgY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgICAgICBuZnQ6IDwtIG5mdCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQoKfQo=",
                "batchBridgeChildNFTToEvmAddress": "",
                "batchSendChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaFNlbmRDaGlsZE5GVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0=",
                "batchSendChildNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaFNlbmRDaGlsZE5GVFRvQ2hpbGQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
                "batchTransferChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaFRyYW5zZmVyQ2hpbGRORlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCAgaWRzOiBbVUludDY0XSApIHsKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7Tm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgZm9yIGlkIGluIGlkcyB7ICAgICAKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0=",
                "batchTransferNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBiYXRjaFRyYW5zZmVyTkZUVG9DaGlsZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBjaGlsZENhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBhc3NlcnQoY2hpbGRDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIGxldCBwYXJlbnRSZWYgPSAgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbSA6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSEKICAgIGxldCBjaGlsZFJlZiA9IGNoaWxkQ2FwLmJvcnJvdygpIQoKICAgIGZvciBpZCBpbiBpZHMgeyAgICAgCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBuZnQgPC0gcGFyZW50UmVmIS53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkhCiAgICAgICAgY2hpbGRSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
                "bridgeChildFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VDaGlsZEZURnJvbUV2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5Cgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGFtb3VudDogVUludDI1NikgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgIAogICAgICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIGxldCBzY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICkKCiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIGNvYS53aXRoZHJhd1Rva2VucygKICAgICAgICAgICAgdHlwZTogdmF1bHRUeXBlLAogICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCgogICAgICAgIHZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC0gdmF1bHQpCiAgICAgICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQoKfQog",
                "bridgeChildFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VDaGlsZEZUVG9Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCkgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICAgIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIFZhdWx0IGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIGxldCB2YXVsdCA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KAogICAgICAgICAgICAgICAgZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgCiAgICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKCiAgICAgICAgdmF1bHQuZGVwb3NpdChmcm9tOiA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkpCiAgICAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnBheW1lbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQoKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgIHNlbGYuY29hLmRlcG9zaXRUb2tlbnMoCiAgICAgICAgICAgIHZhdWx0OiA8LXNlbGYucGF5bWVudFZhdWx0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQog",
                "bridgeChildFTToEvmAddress": "",
                "bridgeChildNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VDaGlsZE5GVEZyb21Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5Cgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZDogVUludDI1NikgewogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gbGV0IHJlY2VpdmVyID0gZ2V0QWNjb3VudChjaGlsZCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKCgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwdWJsaWNDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgogICAgICAgIGFzc2VydChwdWJsaWNDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHVibGljIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHB1YmxpY0NhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQoKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBjb2Eud2l0aGRyYXdORlQoCiAgICAgICAgICAgIHR5cGU6IG5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCgogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgbmZ0LmdldFR5cGUoKSA9PSBuZnRUeXBlLAogICAgICAgICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KG5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgKQoKICAgICAgICBjb2xsZWN0aW9uUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeChildNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VDaGlsZE5GVFRvRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Q2FwYWJpbGl0eUZpbHRlcgoKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGlkOiBVSW50NjQsIGNoaWxkOiBBZGRyZXNzKSB7CiAgICAKICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgICAgIAogICAgICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgICAKICAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgoKICAgICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKICAgICAgICBsZXQgY2hpbGROZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICBjb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtY2hpbGROZnQpCiAgICAgICAgLy8gLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCiAgICAgICAKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC1zZWxmLm5mdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeChildNFTToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBicmlkZ2VDaGlsZE5GVFRvRXZtQWRkcmVzcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKCgoKdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZDogQWRkcmVzcywgaWQ6IFVJbnQ2NCwgcmVjaXBpZW50OlN0cmluZykgewogICAgCiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgLy8gbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgLy8gc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAvLyAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKCiAgICAgICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAgIAogICAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgICAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAgICAgCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCiAgICAgICAgbGV0IGNoaWxkTmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LWNoaWxkTmZ0KQogICAgICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAogICAgICAgCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICAvLyBzZWxmLmNvYS5kZXBvc2l0TkZUKAogICAgICAgIC8vICAgICBuZnQ6IDwtc2VsZi5uZnQsCiAgICAgICAgLy8gICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAvLyApCiAgICAgICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50KQogICAgICAgIEZsb3dFVk1CcmlkZ2UuYnJpZGdlTkZUVG9FVk0oCiAgICAgICAgICAgIHRva2VuOiA8LXNlbGYubmZ0LAogICAgICAgICAgICB0bzogcmVjaXBpZW50RVZNQWRkcmVzcywKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "checkChildLinkedCollections": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja0NoaWxkTGlua2VkQ29sbGVjdGlvbnMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZyk6IEJvb2wgewogICAgbGV0IG1nciA9IGdldEF1dGhBY2NvdW50KHBhcmVudCkuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IG1hbmFnZXIgZnJvbSBwYXJlbnQiKQogICAgbGV0IGNoaWxkID0gbWdyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJDaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgbGV0IGNhcCA9IGNoaWxkLmdldENhcGFiaWxpdHkoCiAgICAgICAgICAgIHBhdGg6IFByaXZhdGVQYXRoKGlkZW50aWZpZXI6IGlkZW50aWZpZXIpISBhcyBDYXBhYmlsaXR5UGF0aCwKICAgICAgICAgICAgdHlwZTogVHlwZTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXIsIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICApIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4/CgogICAgCiAgICByZXR1cm4gY2FwICE9IG5pbAp9ICAgCiAgICA=",
                "checkChildLinkedVaults": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja0NoaWxkTGlua2VkVmF1bHRzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcpOiBCb29sIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCgogIGxldCBhZGRyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihjaGlsZCkKICAKICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICBsZXQgY29udHJvbGxlcnMgPSBhZGRyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGgpISkKICB2YXIgZmxhZyA9IGZhbHNlCgogIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgY29udGludWUKICAgIH0KCiAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgIGNvbnRpbnVlCiAgICAgIH0KCiAgICAgIGZsYWcgPSB0cnVlCiAgICAgIGJyZWFrCiAgICB9CiAgfQoKICByZXR1cm4gZmxhZwp9IAogICAg",
                "checkChildRecieveVaults": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja0NoaWxkUmVjaWV2ZVZhdWx0cyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcywgcGF0aDogU3RyaW5nKTogQm9vbCB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpCiAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogIAogIGxldCByZWNlaXZlclR5cGUgPSBUeXBlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KCkKCiAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGNoaWxkKQogIAogIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aCkhKQogIHZhciBmbGFnID0gZmFsc2UKCiAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHJlY2VpdmVyVHlwZSkgewogICAgICBjb250aW51ZQogICAgfQoKICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiByZWNlaXZlclR5cGUpIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+IAoKICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgZmxhZyA9IHRydWUKICAgICAgYnJlYWsKICAgIH0KICB9CgogIHJldHVybiBmbGFnCn0gCiAgICA=",
                "editChildAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBlZGl0Q2hpbGRBY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCgp0cmFuc2FjdGlvbihjaGlsZEFkZHJlc3M6IEFkZHJlc3MsIG5hbWU6IFN0cmluZywgZGVzY3JpcHRpb246IFN0cmluZywgdGh1bWJuYWlsOiBTdHJpbmcpIHsKICAgIHByZXBhcmUoYWNjdDogQXV0aEFjY291bnQpIHsKICAgICAgICBsZXQgbSA9IGFjY3QuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIGxldCBkID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KAogICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sCiAgICAgICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbCkKICAgICAgICApCgogICAgICAgIG0uc2V0Q2hpbGRBY2NvdW50RGlzcGxheShhZGRyZXNzOiBjaGlsZEFkZHJlc3MsIGQpCiAgICB9Cn0=",
                "getAccessibleChildAccountNFTs": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2Nlc3NpYmxlQ2hpbGRBY2NvdW50TkZUcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCgovLyBUaGlzIHNjcmlwdCBpdGVyYXRlcyB0aHJvdWdoIGEgcGFyZW50J3MgY2hpbGQgYWNjb3VudHMsIAovLyBpZGVudGlmaWVzIHByaXZhdGUgcGF0aHMgd2l0aCBhbiBhY2Nlc3NpYmxlIE5vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXIsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHR5cGVJZHMKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcyk6IEFueVN0cnVjdCB7CiAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgdmFyIHR5cGVJZHNXaXRoUHJvdmlkZXIgPSB7fSBhcyB7QWRkcmVzczogW1N0cmluZ119CgogIC8vIEFkZHJlc3MgLT4gbmZ0IFVVSUQgLT4gRGlzcGxheQogIHZhciBuZnRWaWV3cyA9IHt9IGFzIHtBZGRyZXNzOiB7VUludDY0OiBNZXRhZGF0YVZpZXdzLkRpc3BsYXl9fSAKCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oKQogIGxldCBjb2xsZWN0aW9uVHlwZTogVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigpCgogIC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBhY2NvdW50cwogIGZvciBhZGRyZXNzIGluIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKSB7CiAgICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIGxldCBmb3VuZFR5cGVzOiBbU3RyaW5nXSA9IFtdCiAgICBsZXQgdmlld3M6IHtVSW50NjQ6IE1ldGFkYXRhVmlld3MuRGlzcGxheX0gPSB7fQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgIAogICAgLy8gdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9IGZvdW5kVHlwZXMKCiAgICBhY2N0LnN0b3JhZ2UuZm9yRWFjaFN0b3JlZChmdW4gKHBhdGg6IFN0b3JhZ2VQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CgogICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGghKQogICAgICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICAgICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWUKICAgIH0pCgogICAgdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9IGZvdW5kVHlwZXMKICAgIAoKICAgIC8vIGl0ZXJhdGUgc3RvcmFnZSwgY2hlY2sgaWYgdHlwZUlkc1dpdGhQcm92aWRlciBjb250YWlucyB0aGUgdHlwZUlkLCBpZiBzbywgYWRkIHRvIHZpZXdzCiAgICBhY2N0LnN0b3JhZ2UuZm9yRWFjaFN0b3JlZChmdW4gKHBhdGg6IFN0b3JhZ2VQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICAgIAogICAgICBpZiB0eXBlSWRzV2l0aFByb3ZpZGVyW2FkZHJlc3NdID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQoKICAgICAgZm9yIGtleSBpbiB0eXBlSWRzV2l0aFByb3ZpZGVyLmtleXMgewogICAgICAgIGZvciBpZHgsIHZhbHVlIGluIHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEgewogICAgICAgICAgbGV0IHZhbHVlID0gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldIQoKICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZS5pZGVudGlmaWVyIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIHR5cGUuaXNJbnN0YW5jZShjb2xsZWN0aW9uVHlwZSkgewogICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb24gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9ufT4oZnJvbTogcGF0aCkgeyAKICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgSURzICYgcmVzb2x2ZSB0aGUgdmlldwogICAgICAgICAgICAgIGZvciBpZCBpbiBjb2xsZWN0aW9uLmdldElEcygpIHsKICAgICAgICAgICAgICAgIGxldCBuZnQgPSBjb2xsZWN0aW9uLmJvcnJvd05GVChpZCkhCiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogaWQpIQogICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSByZXNvbHZlci5yZXNvbHZlVmlldyhUeXBlPE1ldGFkYXRhVmlld3MuRGlzcGxheT4oKSkhIGFzPyBNZXRhZGF0YVZpZXdzLkRpc3BsYXkgewogICAgICAgICAgICAgICAgICB2aWV3cy5pbnNlcnQoa2V5OiBuZnQudXVpZCwgZGlzcGxheSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWUKICAgIH0pCiAgICBuZnRWaWV3c1thZGRyZXNzXSA9IHZpZXdzCiAgfQogIHJldHVybiBuZnRWaWV3cwp9",
                "getAccessibleCoinInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2Nlc3NpYmxlQ29pbkluZm8gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgVG9rZW5JbmZvIHsKYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAoKaW5pdChpZDogU3RyaW5nLCBiYWxhbmNlOiBVRml4NjQpIHsKICAgIHNlbGYuaWQgPSBpZAogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQp9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGRBZGRyZXNzOiBBZGRyZXNzKTogW1Rva2VuSW5mb10gewogICAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKICAgIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyOiB7QWRkcmVzczogW1N0cmluZ119ID0ge30KCiAgICB2YXIgY29pbkluZm9MaXN0OiBbVG9rZW5JbmZvXSA9IFtdCiAgICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigpCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlID0gVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpCgogICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCgogICAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+IChjaGlsZEFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IHZhdWx0QmFsYW5jZXM6IHtTdHJpbmc6IFVGaXg2NH0gPSB7fQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgICAgICBpZiAhdHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQoKICAgICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGgpCgogICAgICAgIC8vIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbY2hpbGRBZGRyZXNzXSA9IGZvdW5kVHlwZXMKCiAgICAKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIAogICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlcltjaGlsZEFkZHJlc3NdID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmb3Iga2V5IGluIHR5cGVJZHNXaXRoUHJvdmlkZXIua2V5cyB7CiAgICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldISB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZS5pZGVudGlmaWVyIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgbGV0IHZhdWx0ID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgSURzICYgcmVzb2x2ZSB0aGUgdmlldwogICAgICAgICAgICAgICAgICAgIGNvaW5JbmZvTGlzdC5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgVG9rZW5JbmZvKGlkOiB0eXBlLmlkZW50aWZpZXIsIGJhbGFuY2U6IHZhdWx0LmJhbGFuY2UpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIAogICAgcmV0dXJuIGNvaW5JbmZvTGlzdAp9",
                "getAccessibleCollectionAndIdsDisplay": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBY2Nlc3NpYmxlQ29sbGVjdGlvbkFuZElkc0Rpc3BsYXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKCmFjY2VzcyhhbGwpIHN0cnVjdCBDb2xsZWN0aW9uRGlzcGxheSB7CiAgYWNjZXNzKGFsbCkgbGV0IG5hbWU6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBzcXVhcmVJbWFnZTogTWV0YWRhdGFWaWV3cy5NZWRpYQoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IE1ldGFkYXRhVmlld3MuTWVkaWEpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogIH0KfQoKYWNjZXNzKGFsbCkgc3RydWN0IE5GVENvbGxlY3Rpb24gewogIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogIGFjY2VzcyhhbGwpIGxldCBpZExpc3Q6IFtVSW50NjRdCgogIGluaXQoaWQ6U3RyaW5nLCBkaXNwbGF5OiBDb2xsZWN0aW9uRGlzcGxheT8sIGlkTGlzdDogW1VJbnQ2NF0pIHsKICAgIHNlbGYuaWQgPSBpZAogICAgc2VsZi5kaXNwbGF5ID0gZGlzcGxheQogICAgc2VsZi5pZExpc3QgPSBpZExpc3QKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBnZXREaXNwbGF5KGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0b3JhZ2VQYXRoKTogQ29sbGVjdGlvbkRpc3BsYXk/IHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oYWRkcmVzcykKCiAgbGV0IHJlc291cmNlVHlwZSA9IFR5cGU8QEFueVJlc291cmNlPigpCiAgLy8gbGV0IHZhdWx0VHlwZSA9IFR5cGU8QHtGdW5naWJsZVRva2VuLlZhdWx0fT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHBhdGgpIHsKICAgICAgbGV0IGlzUmVzb3VyY2UgPSB0eXBlLmlzU3VidHlwZShvZjogcmVzb3VyY2VUeXBlKQogICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICBsZXQgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQoKICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgIGlmIGlzTkZUQ29sbGVjdGlvbiAmJiBjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgICAgICBpZiBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihmcm9tOiBwYXRoKSB7CiAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKCiAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIGEgbGlzdAogICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZi5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSURzWzBdKSEKICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgICAgICAgICAgaXRlbSA9IENvbGxlY3Rpb25EaXNwbGF5KAogICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgc3F1YXJlSW1hZ2U6IGRpc3BsYXkuc3F1YXJlSW1hZ2UKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgcmV0dXJuIGl0ZW0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzLCBjaGlsZEFjY291bnQ6IEFkZHJlc3MpOiBbTkZUQ29sbGVjdGlvbl0gewogICAgbGV0IG1hbmFnZXIgPSAgZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgICAvLyBBZGRyZXNzIC0+IENvbGxlY3Rpb24gVHlwZSAtPiBvd25lZE5GVHMKCiAgICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigpCiAgICBsZXQgY29sbGVjdGlvblR5cGU6IFR5cGUgPSBUeXBlPEB7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQoKICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBhY2NvdW50cwoKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihjaGlsZEFjY291bnQpCiAgICBsZXQgZm91bmRUeXBlczogW1R5cGVdID0gW10KICAgIGxldCBuZnRzOiB7U3RyaW5nOiBbVUludDY0XX0gPSB7fQogICAgbGV0IGNvbGxlY3Rpb25MaXN0OiBbTkZUQ29sbGVjdGlvbl0gPSBbXQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFjY291bnQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIC8vIGdldCBhbGwgcHJpdmF0ZSBwYXRocwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAgIC8vIENoZWNrIHdoaWNoIHByaXZhdGUgcGF0aHMgaGF2ZSBORlQgUHJvdmlkZXIgQU5EIGNhbiBiZSBib3Jyb3dlZAogICAgICAgIC8vIGlmICF0eXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKXsKICAgICAgICAvLyAgICAgcmV0dXJuIHRydWUKICAgICAgICAvLyB9CiAgICAgICAgLy8gaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KHBhdGg6IHBhdGgsIHR5cGU6IFR5cGU8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKSkgewogICAgICAgIC8vICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgIC8vICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAvLyAgICAgICAgIC8vIGlmIHRoaXMgaXNuJ3QgYSBwcm92aWRlciBjYXBhYmlsaXR5LCBleGl0IHRoZSBhY2NvdW50IGl0ZXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBwYXRoCiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIC8vICAgICB9CiAgICAgICAgLy8gICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkpCiAgICAgICAgLy8gfQoKICAgICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGghKQogICAgICAgIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQoY2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKSkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0pCgogICAgLy8gaXRlcmF0ZSBzdG9yYWdlLCBjaGVjayBpZiB0eXBlSWRzV2l0aFByb3ZpZGVyIGNvbnRhaW5zIHRoZSB0eXBlSWQsIGlmIHNvLCBhZGQgdG8gbmZ0cwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewoKICAgICAgICBpZiBmb3VuZFR5cGVzID09IG5pbCB7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQoKICAgICAgICBmb3IgaWR4LCB2YWx1ZSBpbiBmb3VuZFR5cGVzIHsKICAgICAgICAgICAgbGV0IHZhbHVlID0gZm91bmRUeXBlcyEKCiAgICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgdHlwZS5pc0luc3RhbmNlKGNvbGxlY3Rpb25UeXBlKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIGxldCBjb2xsZWN0aW9uID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgICAgICAgbmZ0cy5pbnNlcnQoa2V5OiB0eXBlLmlkZW50aWZpZXIsIGNvbGxlY3Rpb24uZ2V0SURzKCkpCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbkxpc3QuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHR5cGUuaWRlbnRpZmllciwKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBjaGlsZEFjY291bnQsIHBhdGg6IHBhdGgpLAogICAgICAgICAgICAgICAgICAgICAgICBpZExpc3Q6IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIHJldHVybiBjb2xsZWN0aW9uTGlzdAp9",
                "getChildAccountAllowTypes": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDaGlsZEFjY291bnRBbGxvd1R5cGVzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCgovLyBUaGlzIHNjcmlwdCBpdGVyYXRlcyB0aHJvdWdoIGEgcGFyZW50J3MgY2hpbGQgYWNjb3VudHMsIAovLyBpZGVudGlmaWVzIHByaXZhdGUgcGF0aHMgd2l0aCBhbiBhY2Nlc3NpYmxlIE5vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXIsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHR5cGVJZHMKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MpOiBbU3RyaW5nXT8gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHIpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKCiAgCiAgbGV0IG5mdFByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgbGV0IGZ0UHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKCiAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCiAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGNoaWxkKQogIGxldCBmb3VuZFR5cGVzOiBbU3RyaW5nXSA9IFtdCiAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKCiAgZm9yIHMgaW4gYWRkci5zdG9yYWdlLnN0b3JhZ2VQYXRocyB7CiAgICBsZXQgY29udHJvbGxlcnMgPSBhZGRyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHMpCiAgICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICAgIC8vIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgLy8gICBjb250aW51ZQogICAgICAvLyB9CgogICAgICBpZiBsZXQgbmZ0Q2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogbmZ0UHJvdmlkZXJUeXBlKSB7CiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gbmZ0Q2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKG5mdENhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICBicmVhawogICAgICB9CiAgICAgIGlmIGxldCBmdENhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IGZ0UHJvdmlkZXJUeXBlKSB7CiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gZnRDYXAgYXMhIENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGZ0Q2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgIGJyZWFrCiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBmb3VuZFR5cGVzCn0=",
                "getChildAccountFTCapabilities": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDaGlsZEFjY291bnRGVENhcGFiaWxpdGllcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgoKLy8gVGhpcyBzY3JpcHQgaXRlcmF0ZXMgdGhyb3VnaCBhIHBhcmVudCdzIGNoaWxkIGFjY291bnRzLCAKLy8gaWRlbnRpZmllcyBwcml2YXRlIHBhdGhzIHdpdGggYW4gYWNjZXNzaWJsZSBGdW5naWJsZVRva2VuLlByb3ZpZGVyLCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyB0eXBlSWRzCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOkFueVN0cnVjdCB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKICB2YXIgdHlwZUlkc1dpdGhQcm92aWRlcjoge0FkZHJlc3M6IFtTdHJpbmddfSA9IHt9CiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCgogIC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBhY2NvdW50cwogIGZvciBhZGRyZXNzIGluIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKSB7CiAgICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIGxldCBmb3VuZFR5cGVzOiBbU3RyaW5nXSA9IFtdCiAgICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKCiAgICBmb3IgcyBpbiBhZGRyLnN0b3JhZ2Uuc3RvcmFnZVBhdGhzIHsKICAgICAgZm9yIGMgaW4gYWRkci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBzKSB7CiAgICAgICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHByb3ZpZGVyVHlwZSkgewogICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+IAoKICAgICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgfQoKICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCiAgICAgICAgICBicmVhawogICAgICAgIH0KICAgICAgfQogICAgfSAgICAgIAogIH0KCiAgcmV0dXJuIHR5cGVJZHNXaXRoUHJvdmlkZXIKfQog",
                "getChildAccountMeta": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDaGlsZEFjY291bnRNZXRhIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MpOiB7QWRkcmVzczogQW55U3RydWN0fSB7CiAgICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICAgIGxldCBtID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKCiAgICBpZiBtID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHt9CiAgICB9IGVsc2UgewogICAgICAgIHZhciBkYXRhOiB7QWRkcmVzczogQW55U3RydWN0fSA9IHt9CiAgICAgICAgZm9yIGFkZHJlc3MgaW4gbT8uZ2V0Q2hpbGRBZGRyZXNzZXMoKSEgewogICAgICAgICAgICBsZXQgYyA9IG0/LmdldENoaWxkQWNjb3VudERpc3BsYXkoYWRkcmVzczogYWRkcmVzcykgCiAgICAgICAgICAgIGRhdGEuaW5zZXJ0KGtleTogYWRkcmVzcywgYykKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRhdGEKICAgIH0KfQ==",
                "getChildAddresses": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRDaGlsZEFkZHJlc3NlcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzKTogW0FkZHJlc3NdIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICByZXR1cm4gIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKQp9",
                "getExamplenftCollectionFromDelegator": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRFeGFtcGxlbmZ0Q29sbGVjdGlvbkZyb21EZWxlZ2F0b3IgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI4YjgxZjU4ODBkNTU1NGUKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIGlzUHVibGljOiBCb29sKSB7CiAgICBsZXQgbSA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgbm90IGZvdW5kIikKICAgIGxldCBhY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKQogICAgICAgID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCBpbiBtYW5hZ2VyIikKCiAgICBsZXQgdCA9IFR5cGU8Q2FwYWJpbGl0eTwmRXhhbXBsZU5GVC5Db2xsZWN0aW9uPj4oKQoKICAgIGxldCBjYXAgPSAoaXNQdWJsaWMgPyBhY2N0LmdldFB1YmxpY0NhcEZyb21EZWxlZ2F0b3IodHlwZTogdCkgOiBhY2N0LmdldFByaXZhdGVDYXBGcm9tRGVsZWdhdG9yKHR5cGU6IHQpKQogICAgICAgID8/IHBhbmljKCJjYXBhYmlsaXR5IG5vdCBmb3VuZCIpCiAgICAKICAgIGFzc2VydChjYXAuZ2V0VHlwZSgpID09IHQsIG1lc3NhZ2U6ICJtaXNtYXRjaGVkIGNhcGFiaWxpdHkgdHlwZXMiKQp9",
                "publishToParent": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBwdWJsaXNoVG9QYXJlbnQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgI2FsbG93QWNjb3VudExpbmtpbmcKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmFjdG9yeSBmcm9tIDB4Q2FwYWJpbGl0eUZhY3RvcnkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKaW1wb3J0IENhcGFiaWxpdHlEZWxlZ2F0b3IgZnJvbSAweENhcGFiaWxpdHlEZWxlZ2F0b3IKCnRyYW5zYWN0aW9uKHBhcmVudDogQWRkcmVzcywgZmFjdG9yeUFkZHJlc3M6IEFkZHJlc3MsIGZpbHRlckFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAgIGxldCBvd25lZCA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk93bmVyKSAmSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnQ+KGZyb206IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJvd25lZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgICAgIGxldCBmYWN0b3J5ID0gZ2V0QWNjb3VudChmYWN0b3J5QWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwmQ2FwYWJpbGl0eUZhY3RvcnkuTWFuYWdlcj4oQ2FwYWJpbGl0eUZhY3RvcnkuUHVibGljUGF0aCkKICAgICAgICBhc3NlcnQoZmFjdG9yeS5jaGVjaygpLCBtZXNzYWdlOiAiZmFjdG9yeSBhZGRyZXNzIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgbGV0IGZpbHRlciA9IGdldEFjY291bnQoZmlsdGVyQWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwme0NhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyfT4oQ2FwYWJpbGl0eUZpbHRlci5QdWJsaWNQYXRoKQogICAgICAgIGFzc2VydChmaWx0ZXIuY2hlY2soKSwgbWVzc2FnZTogImNhcGFiaWxpdHkgZmlsdGVyIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgb3duZWQucHVibGlzaFRvUGFyZW50KHBhcmVudEFkZHJlc3M6IHBhcmVudCwgZmFjdG9yeTogZmFjdG9yeSwgZmlsdGVyOiBmaWx0ZXIpCiAgICB9Cn0=",
                "redeemAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICByZWRlZW1BY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweFZpZXdSZXNvbHZlcgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKCnRyYW5zYWN0aW9uKGNoaWxkQWRkcmVzczogQWRkcmVzcywgZmlsdGVyQWRkcmVzczogQWRkcmVzcz8sIGZpbHRlclBhdGg6IFB1YmxpY1BhdGg/KSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzLCBJbmJveCkgJkFjY291bnQpIHsKICAgICAgICB2YXIgZmlsdGVyOiBDYXBhYmlsaXR5PCZ7Q2FwYWJpbGl0eUZpbHRlci5GaWx0ZXJ9Pj8gPSBuaWwKICAgICAgICBpZiBmaWx0ZXJBZGRyZXNzICE9IG5pbCAmJiBmaWx0ZXJQYXRoICE9IG5pbCB7CiAgICAgICAgICAgIGZpbHRlciA9IGdldEFjY291bnQoZmlsdGVyQWRkcmVzcyEpLmNhcGFiaWxpdGllcy5nZXQ8JntDYXBhYmlsaXR5RmlsdGVyLkZpbHRlcn0+KGZpbHRlclBhdGghKQogICAgICAgIH0KCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IG0gPC0gSHlicmlkQ3VzdG9keS5jcmVhdGVNYW5hZ2VyKGZpbHRlcjogZmlsdGVyKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LSBtLCB0bzogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCgogICAgICAgICAgICBmb3IgYyBpbiBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSB7CiAgICAgICAgICAgICAgICBjLmRlbGV0ZSgpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaChIeWJyaWRDdXN0b2R5Lk1hbmFnZXJQdWJsaWNQYXRoKQoKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntIeWJyaWRDdXN0b2R5Lk1hbmFnZXJQdWJsaWN9PihIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCksCiAgICAgICAgICAgICAgICBhdDogSHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljUGF0aAogICAgICAgICAgICApCgogICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZ7SHlicmlkQ3VzdG9keS5NYW5hZ2VyUHJpdmF0ZSwgSHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljfT4oSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBsZXQgaW5ib3hOYW1lID0gSHlicmlkQ3VzdG9keS5nZXRDaGlsZEFjY291bnRJZGVudGlmaWVyKGFjY3QuYWRkcmVzcykKICAgICAgICBsZXQgY2FwID0gYWNjdC5pbmJveC5jbGFpbTxhdXRoKEh5YnJpZEN1c3RvZHkuQ2hpbGQpICZ7SHlicmlkQ3VzdG9keS5BY2NvdW50UHJpdmF0ZSwgSHlicmlkQ3VzdG9keS5BY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihpbmJveE5hbWUsIHByb3ZpZGVyOiBjaGlsZEFkZHJlc3MpCiAgICAgICAgICAgID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IGNhcCBub3QgZm91bmQiKQoKICAgICAgICBsZXQgbWFuYWdlciA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vIGZvdW5kIikKCiAgICAgICAgbWFuYWdlci5hZGRBY2NvdW50KGNhcDogY2FwKQogICAgfQp9",
                "sendChildFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kQ2hpbGRGVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQoKLy8gSEMtb3duZWQgaW1wb3J0cwppbXBvcnQgQ2FwYWJpbGl0eUZhY3RvcnkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCgp0cmFuc2FjdGlvbihhZGRyZXNzOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCApIHsKCiAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICBsZXQgdmF1bHREYXRhOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YQoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAKICAgICAgc2VsZi52YXVsdERhdGEgPSA8VG9rZW4+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHNlbGYudmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAKICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgc2VsZi5wYXltZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgfQoKICBleGVjdXRlIHsKCiAgICAgIC8vIEdldCB0aGUgcmVjaXBpZW50J3MgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2VpdmVyKQoKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnQuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PihzZWxmLnZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5wYXltZW50VmF1bHQpCiAgfQp9CiA=",
                "sendChildFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kQ2hpbGRGVFRvQ2hpbGQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICBsZXQgcGF5bWVudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgbGV0IHZhdWx0RGF0YTogRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGEKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgCiAgICAgIHNlbGYudmF1bHREYXRhID0gPFRva2VuPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKSkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPwogICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPFRva2VuPiAiKQoKICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBzZWxmLnZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgCiAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CgogICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNlaXZlcikKCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogIH0KfQog",
                "sendChildFTWithParent": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kQ2hpbGRGVFdpdGhQYXJlbnQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIHRvOiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcykgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICAgIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCB2YXVsdERhdGE6IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIHNlbGYudmF1bHREYXRhID0gRXhhbXBsZVRva2VuLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIEV4YW1wbGVUb2tlbiIpCgogICAgICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHNlbGYudmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnBheW1lbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudCh0bykKCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICAgIGxldCByZWNlaXZlclJlZiA9IHJlY2lwaWVudC5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHNlbGYudmF1bHREYXRhLnJlY2VpdmVyUGF0aCkhLmJvcnJvdygpCgkJCT8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnBheW1lbnRWYXVsdCkKICAgIH0KfQog",
                "sendChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kQ2hpbGRORlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
                "sendChildNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kQ2hpbGRORlRUb0NoaWxkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDY0KSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
                "setupOwnedAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZXR1cE93bmVkQWNjb3VudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAjYWxsb3dBY2NvdW50TGlua2luZwoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4Vmlld1Jlc29sdmVyCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5Ci8vLyBUaGlzIHRyYW5zYWN0aW9uIGNvbmZpZ3VyZXMgYW4gT3duZWRBY2NvdW50IGluIHRoZSBzaWduZXIgaWYgbmVlZGVkIGFuZCBjb25maWd1cmVzIGl0cyBDYXBhYmlsaXRpZXMgcGVyCi8vLyBIeWJyaWRDdXN0b2R5J3MgaW50ZW5kZWQgZGVzaWduLiBJZiBEaXNwbGF5IHZhbHVlcyBhcmUgc3BlY2lmaWVkIChhcyByZWNvbW1lbmRlZCksIHRoZXkgd2lsbCBiZSBzZXQgb24gdGhlCi8vLyBzaWduZXIncyBPd25lZEFjY291bnQuCi8vLwp0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmc/LCBkZXNjOiBTdHJpbmc/LCB0aHVtYm5haWxVUkw6IFN0cmluZz8pIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY3RDYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5hY2NvdW50Lmlzc3VlPGF1dGgoU3RvcmFnZSwgQ29udHJhY3RzLCBLZXlzLCBJbmJveCwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oKQoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IG93bmVkQWNjb3VudCA8LSBIeWJyaWRDdXN0b2R5LmNyZWF0ZU93bmVkQWNjb3VudChhY2N0OiBhY2N0Q2FwKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LW93bmVkQWNjb3VudCwgdG86IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBsZXQgb3duZWQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBtZXRhZGF0YSBmb3IgdGhlIE93bmVkQWNjb3VudAogICAgICAgIGlmIG5hbWUgIT0gbmlsICYmIGRlc2MgIT0gbmlsICYmIHRodW1ibmFpbFVSTCAhPSBuaWwgewogICAgICAgICAgICBsZXQgdGh1bWJuYWlsID0gTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbFVSTCEpCiAgICAgICAgICAgIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KG5hbWU6IG5hbWUhLCBkZXNjcmlwdGlvbjogZGVzYyEsIHRodW1ibmFpbDogdGh1bWJuYWlsKQogICAgICAgICAgICBvd25lZC5zZXREaXNwbGF5KGRpc3BsYXkpCiAgICAgICAgfQoKICAgICAgICAvLyBjaGVjayB0aGF0IHBhdGhzIGFyZSBhbGwgY29uZmlndXJlZCBwcm9wZXJseQogICAgICAgIGZvciBjIGluIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgewogICAgICAgICAgICBjLmRlbGV0ZSgpCiAgICAgICAgfQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Cb3Jyb3dhYmxlQWNjb3VudCwgSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0h5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljUGF0aAogICAgICAgICkKICAgIH0KfQog",
                "setupOwnedAccountAndPublishToParent": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZXR1cE93bmVkQWNjb3VudEFuZFB1Ymxpc2hUb1BhcmVudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAjYWxsb3dBY2NvdW50TGlua2luZwoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4Vmlld1Jlc29sdmVyCgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhDYXBhYmlsaXR5RmFjdG9yeQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Q2FwYWJpbGl0eUZpbHRlcgppbXBvcnQgQ2FwYWJpbGl0eURlbGVnYXRvciBmcm9tIDB4Q2FwYWJpbGl0eURlbGVnYXRvcgovLy8gVGhpcyB0cmFuc2FjdGlvbiBjb25maWd1cmVzIGFuIE93bmVkQWNjb3VudCBpbiB0aGUgc2lnbmVyIGlmIG5lZWRlZCwgYW5kIHByb2NlZWRzIHRvIGNyZWF0ZSBhIENoaWxkQWNjb3VudCAKLy8vIHVzaW5nIENhcGFiaWxpdHlGYWN0b3J5Lk1hbmFnZXIgYW5kIENhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyIENhcGFiaWxpdGllcyBmcm9tIHRoZSBnaXZlbiBhZGRyZXNzZXMuIEEKLy8vIENhcGFiaWxpdHkgb24gdGhlIENoaWxkQWNjb3VudCBpcyB0aGVuIHB1Ymxpc2hlZCB0byB0aGUgc3BlY2lmaWVkIHBhcmVudCBhY2NvdW50LiAKLy8vCnRyYW5zYWN0aW9uKAogICAgcGFyZW50OiBBZGRyZXNzLAogICAgZmFjdG9yeUFkZHJlc3M6IEFkZHJlc3MsCiAgICBmaWx0ZXJBZGRyZXNzOiBBZGRyZXNzLAogICAgbmFtZTogU3RyaW5nLAogICAgZGVzYzogU3RyaW5nLAogICAgdGh1bWJuYWlsVVJMOiBTdHJpbmcKKSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIC8vIENvbmZpZ3VyZSBPd25lZEFjY291bnQgaWYgaXQgZG9lc24ndCBleGlzdAogICAgICAgIGlmIGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICB2YXIgYWNjdENhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLmFjY291bnQuaXNzdWU8YXV0aChTdG9yYWdlLCBDb250cmFjdHMsIEtleXMsIEluYm94LCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PigpCiAgICAgICAgICAgIGxldCBvd25lZEFjY291bnQgPC0gSHlicmlkQ3VzdG9keS5jcmVhdGVPd25lZEFjY291bnQoYWNjdDogYWNjdENhcCkKICAgICAgICAgICAgYWNjdC5zdG9yYWdlLnNhdmUoPC1vd25lZEFjY291bnQsIHRvOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgIH0KCiAgICAgICAgZm9yIGMgaW4gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSB7CiAgICAgICAgICAgIGMuZGVsZXRlKCkKICAgICAgICB9CgoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Cb3Jyb3dhYmxlQWNjb3VudCwgSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0h5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljUGF0aAogICAgICAgICkKCiAgICAgICAgbGV0IG93bmVkID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuT3duZXIpICZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm93bmVkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgICAKICAgICAgICAvLyBTZXQgdGhlIGRpc3BsYXkgbWV0YWRhdGEgZm9yIHRoZSBPd25lZEFjY291bnQKICAgICAgICBpZiBuYW1lICE9IG5pbCAmJiBkZXNjICE9IG5pbCAmJiB0aHVtYm5haWxVUkwgIT0gbmlsIHsKICAgICAgICAgICAgbGV0IHRodW1ibmFpbCA9IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiB0aHVtYm5haWxVUkwhKQogICAgICAgICAgICBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuRGlzcGxheShuYW1lOiBuYW1lISwgZGVzY3JpcHRpb246IGRlc2MhLCB0aHVtYm5haWw6IHRodW1ibmFpbCkKICAgICAgICAgICAgb3duZWQuc2V0RGlzcGxheShkaXNwbGF5KQogICAgICAgIH0KCiAgICAgICAgLy8gR2V0IENhcGFiaWxpdHlGYWN0b3J5ICYgQ2FwYWJpbGl0eUZpbHRlciBDYXBhYmlsaXRpZXMKICAgICAgICBsZXQgZmFjdG9yeSA9IGdldEFjY291bnQoZmFjdG9yeUFkZHJlc3MpLmNhcGFiaWxpdGllcy5nZXQ8JkNhcGFiaWxpdHlGYWN0b3J5Lk1hbmFnZXI+KENhcGFiaWxpdHlGYWN0b3J5LlB1YmxpY1BhdGgpCiAgICAgICAgYXNzZXJ0KGZhY3RvcnkuY2hlY2soKSwgbWVzc2FnZTogImZhY3RvcnkgYWRkcmVzcyBpcyBub3QgY29uZmlndXJlZCBwcm9wZXJseSIpCgogICAgICAgIGxldCBmaWx0ZXIgPSBnZXRBY2NvdW50KGZpbHRlckFkZHJlc3MpLmNhcGFiaWxpdGllcy5nZXQ8JntDYXBhYmlsaXR5RmlsdGVyLkZpbHRlcn0+KENhcGFiaWxpdHlGaWx0ZXIuUHVibGljUGF0aCkKICAgICAgICBhc3NlcnQoZmlsdGVyLmNoZWNrKCksIG1lc3NhZ2U6ICJjYXBhYmlsaXR5IGZpbHRlciBpcyBub3QgY29uZmlndXJlZCBwcm9wZXJseSIpCgogICAgICAgIC8vIEZpbmFsbHkgcHVibGlzaCBhIENoaWxkQWNjb3VudCBjYXBhYmlsaXR5IG9uIHRoZSBzaWduaW5nIGFjY291bnQgdG8gdGhlIHNwZWNpZmllZCBwYXJlbnQKICAgICAgICBvd25lZC5wdWJsaXNoVG9QYXJlbnQocGFyZW50QWRkcmVzczogcGFyZW50LCBmYWN0b3J5OiBmYWN0b3J5LCBmaWx0ZXI6IGZpbHRlcikKICAgIH0KfQ==",
                "transferChildFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlckNoaWxkRlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKCnRyYW5zYWN0aW9uKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IHZhdWx0RGF0YSA9IDxUb2tlbj4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgcGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtcGF5bWVudFZhdWx0KQogIH0KfQ==",
                "transferChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2ZlckNoaWxkTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgIGlkOiBVSW50NjQgKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gPE5GVD4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgc2lnbmVyLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkhLmJvcnJvdygpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFZhdWx0IikKICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICB9Cn0=",
                "transferNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0cmFuc2Zlck5GVFRvQ2hpbGQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+Cgp0cmFuc2FjdGlvbihjaGlsZEFkZHI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPiAucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IGNoaWxkQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGFzc2VydChjaGlsZENhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgbGV0IHBhcmVudFJlZiA9ICBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pihmcm9tIDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpIQogICAgbGV0IGNoaWxkUmVmID0gY2hpbGRDYXAuYm9ycm93KCkhCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgbmZ0IDwtIHBhcmVudFJlZiEud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpIQogICAgCiAgICBjaGlsZFJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
                "unlinkChildAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB1bmxpbmtDaGlsZEFjY291bnQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCnRyYW5zYWN0aW9uKGNoaWxkOiBBZGRyZXNzKSB7CiAgICBwcmVwYXJlIChhY2N0OiBBdXRoQWNjb3VudCkgewogICAgICAgIGxldCBtYW5hZ2VyID0gYWNjdC5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICAgICAgbWFuYWdlci5yZW1vdmVDaGlsZChhZGRyOiBjaGlsZCkKICAgIH0KfQ=="
            },
            "lostAndFound": {
                "claimFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjbGFpbUZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAoKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcpIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKCiAgICAgICAKCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGFjY3Quc3RvcmFnZS5zYXZlKAogICAgICAgICAgICAgICAgPC0gdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwKICAgICAgICAgICAgICAgIHRvOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0RGF0YS5zdG9yYWdlUGF0aCksCiAgICAgICAgICAgIGF0OiB2YXVsdERhdGEucmVjZWl2ZXJQYXRoCiAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pih2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQoKICAgICAgICBMb3N0QW5kRm91bmQucmVkZWVtQWxsKHR5cGU6IHZhdWx0VHlwZSwgbWF4OiBuaWwsIHJlY2VpdmVyOiBjYXApCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVyKGJ5Q2FwYWJpbGl0eUlEOiBjYXAuaWQpIS5kZWxldGUoKQogICAgfQp9",
                "claimNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjbGFpbU5GVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4TG9zdEFuZEZvdW5kCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZykgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgICAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAKCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSgKICAgICAgICAgICAgICAgIDwtIGNvbGxlY3Rpb25EYXRhLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLAogICAgICAgICAgICAgICAgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCksCiAgICAgICAgICAgIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoCiAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCgogICAgICAgIExvc3RBbmRGb3VuZC5yZWRlZW1BbGwodHlwZTogbmZ0VHlwZSwgbWF4OiBuaWwsIHJlY2VpdmVyOiBjYXApCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVyKGJ5Q2FwYWJpbGl0eUlEOiBjYXAuaWQpIS5kZWxldGUoKQogICAgfQp9",
                "queryUnclaimedFTs": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBxdWVyeVVuY2xhaW1lZEZUcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBbQW55U3RydWN0P10gewogICAgbGV0IHRpY2tldHMgPSBMb3N0QW5kRm91bmQuYm9ycm93QWxsVGlja2V0cyhhZGRyOiBhZGRyKQogICAgCiAgICBsZXQgZGlzcGxheUFycjogW0FueVN0cnVjdD9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpKSB7IAogICAgICAgICAgICBkaXNwbGF5QXJyLmFwcGVuZCh7ImRpc3BsYXkiOiB0aWNrZXQuZGlzcGxheSwgImJhbGFuY2UiOiB0aWNrZXQuZ2V0RnVuZ2libGVUb2tlbkJhbGFuY2UoKX0pCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGRpc3BsYXlBcnIKfQ==",
                "queryUnclaimedNFTs": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBxdWVyeVVuY2xhaW1lZE5GVHMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4TG9zdEFuZEZvdW5kCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogWyZNZXRhZGF0YVZpZXdzLkRpc3BsYXk/XSB7CiAgICBsZXQgdGlja2V0cyA9IExvc3RBbmRGb3VuZC5ib3Jyb3dBbGxUaWNrZXRzKGFkZHI6IGFkZHIpCiAgICAKICAgIGxldCBkaXNwbGF5QXJyOiBbJk1ldGFkYXRhVmlld3MuRGlzcGxheT9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfT4oKSkgeyAKICAgICAgICAgICAgZGlzcGxheUFyci5hcHBlbmQodGlja2V0LmRpc3BsYXkpCiAgICAgICAgfQogICAgfQogICAgCiAgICByZXR1cm4gZGlzcGxheUFycgp9",
                "queryUnclaimedNumber": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBxdWVyeVVuY2xhaW1lZE51bWJlciAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBJbnQgewogICAgbGV0IHNoZWxmTWFuYWdlciA9IExvc3RBbmRGb3VuZC5ib3Jyb3dTaGVsZk1hbmFnZXIoKQogICAgbGV0IHNoZWxmID0gc2hlbGZNYW5hZ2VyLmJvcnJvd1NoZWxmKHJlZGVlbWVyOiBhZGRyKQogICAgaWYgc2hlbGYgPT0gbmlsIHsKICAgICAgICByZXR1cm4gMAogICAgfQogICAgCiAgICByZXR1cm4gc2hlbGYhLmdldFJlZGVlbWFibGVUeXBlcygpLmxlbmd0aAp9",
                "sendFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kRlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCByZWNpcGllbnQ6IEFkZHJlc3MsIGFtb3VudDogVUZpeDY0LCBtZW1vOiBTdHJpbmcpIHsKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCBmbG93UHJvdmlkZXI6IENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PgogICAgbGV0IGZsb3dSZWNlaXZlcjogQ2FwYWJpbGl0eTwmRmxvd1Rva2VuLlZhdWx0PgogICAgbGV0IHJlY2VpdmVyQ2FwOiBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+CiAgICBsZXQgZGlzcGxheTogTWV0YWRhdGFWaWV3cy5EaXNwbGF5PwoKCiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKCgogICAgICAgIGxldCB2YXVsdERpc3BsYXkgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlREaXNwbGF5PigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZURGlzcGxheT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgICAgICBzZWxmLmRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLkRpc3BsYXkoCiAgICAgICAgICAgIG5hbWU6IHZhdWx0RGlzcGxheS5uYW1lLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogdmF1bHREaXNwbGF5LmRlc2NyaXB0aW9uLAogICAgICAgICAgICB0aHVtYm5haWw6IHZhdWx0RGlzcGxheS5sb2dvcy5pdGVtc1swXS5maWxlCiAgICAgICAgKQoKICAgICAgICBsZXQgdmF1bHQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHQud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCgogICAgICAgIHZhciBwcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+PyA9IG5pbAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZm9yRWFjaENvbnRyb2xsZXIoZm9yUGF0aDogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQsIGZ1bihjOiAmU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyKTogQm9vbCB7CiAgICAgICAgICAgIGlmIGMuYm9ycm93VHlwZSA9PSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oKSB7CiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGMuY2FwYWJpbGl0eSBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICB9KQoKICAgICAgICBpZiBwcm92aWRlciA9PSBuaWwgewogICAgICAgICAgICBwcm92aWRlciA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICB9CiAgICAgICAgc2VsZi5mbG93UHJvdmlkZXIgPSBwcm92aWRlciEKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlciA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwmRmxvd1Rva2VuLlZhdWx0PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICBzZWxmLnJlY2VpdmVyQ2FwID0gZ2V0QWNjb3VudChyZWNpcGllbnQpLmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4odmF1bHREYXRhLnJlY2VpdmVyUGF0aCkhCiAgICB9CgogICAgZXhlY3V0ZSB7CgogICAgICAgIAogICAgICAgIGxldCBkZXBvc2l0RXN0aW1hdGUgPC0gTG9zdEFuZEZvdW5kLmVzdGltYXRlRGVwb3NpdChyZWRlZW1lcjogcmVjaXBpZW50LCBpdGVtOiA8LXNlbGYuc2VudFZhdWx0LCBtZW1vOiBtZW1vLCBkaXNwbGF5OiBzZWxmLmRpc3BsYXkpCiAgICAgICAgbGV0IHN0b3JhZ2VGZWUgPC0gc2VsZi5mbG93UHJvdmlkZXIuYm9ycm93KCkhLndpdGhkcmF3KGFtb3VudDogZGVwb3NpdEVzdGltYXRlLnN0b3JhZ2VGZWUpCiAgICAgICAgbGV0IGl0ZW0gPC0gZGVwb3NpdEVzdGltYXRlLndpdGhkcmF3KCkKCiAgICAgICAgTG9zdEFuZEZvdW5kLnRyeVNlbmRSZXNvdXJjZSgKICAgICAgICAgICAgaXRlbTogPC1pdGVtLAogICAgICAgICAgICBjYXA6IHNlbGYucmVjZWl2ZXJDYXAsCiAgICAgICAgICAgIG1lbW86IG1lbW8sCiAgICAgICAgICAgIGRpc3BsYXk6IHNlbGYuZGlzcGxheSwKICAgICAgICAgICAgc3RvcmFnZVBheW1lbnQ6ICZzdG9yYWdlRmVlIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fSwKICAgICAgICAgICAgZmxvd1Rva2VuUmVwYXltZW50OiBzZWxmLmZsb3dSZWNlaXZlcgogICAgICAgICkKCiAgICAgICAgc2VsZi5mbG93UmVjZWl2ZXIuYm9ycm93KCkhLmRlcG9zaXQoZnJvbTogPC1zdG9yYWdlRmVlKQogICAgICAgIGRlc3Ryb3kgZGVwb3NpdEVzdGltYXRlCiAgICB9Cn0=",
                "sendNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZW5kTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4TG9zdEFuZEZvdW5kCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIHJlY2lwaWVudDogQWRkcmVzcywgaWQ6IFVJbnQ2NCwgbWVtbzogU3RyaW5nKSB7CiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGZsb3dQcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgZmxvd1JlY2VpdmVyOiBDYXBhYmlsaXR5PCZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgcmVjZWl2ZXJDYXA6IENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgoKCiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAKICAgICAgICAKCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCgogICAgICAgIHZhciBwcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+PyA9IG5pbAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZm9yRWFjaENvbnRyb2xsZXIoZm9yUGF0aDogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQsIGZ1bihjOiAmU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyKTogQm9vbCB7CiAgICAgICAgICAgIGlmIGMuYm9ycm93VHlwZSA9PSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oKSB7CiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGMuY2FwYWJpbGl0eSBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICB9KQoKICAgICAgICBpZiBwcm92aWRlciA9PSBuaWwgewogICAgICAgICAgICBwcm92aWRlciA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICB9CiAgICAgICAgc2VsZi5mbG93UHJvdmlkZXIgPSBwcm92aWRlciEKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlciA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwmRmxvd1Rva2VuLlZhdWx0PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICBzZWxmLnJlY2VpdmVyQ2FwID0gZ2V0QWNjb3VudChyZWNpcGllbnQpLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAKICAgICAgICBsZXQgZGlzcGxheSA9IHNlbGYubmZ0LnJlc29sdmVWaWV3KFR5cGU8TWV0YWRhdGFWaWV3cy5EaXNwbGF5PigpKSBhcyEgTWV0YWRhdGFWaWV3cy5EaXNwbGF5PwoKICAgICAgICBsZXQgZGVwb3NpdEVzdGltYXRlIDwtIExvc3RBbmRGb3VuZC5lc3RpbWF0ZURlcG9zaXQocmVkZWVtZXI6IHJlY2lwaWVudCwgaXRlbTogPC1zZWxmLm5mdCwgbWVtbzogbWVtbywgZGlzcGxheTogZGlzcGxheSkKICAgICAgICBsZXQgc3RvcmFnZUZlZSA8LSBzZWxmLmZsb3dQcm92aWRlci5ib3Jyb3coKSEud2l0aGRyYXcoYW1vdW50OiBkZXBvc2l0RXN0aW1hdGUuc3RvcmFnZUZlZSkKICAgICAgICBsZXQgaXRlbSA8LSBkZXBvc2l0RXN0aW1hdGUud2l0aGRyYXcoKQoKICAgICAgICBMb3N0QW5kRm91bmQudHJ5U2VuZFJlc291cmNlKAogICAgICAgICAgICBpdGVtOiA8LWl0ZW0sCiAgICAgICAgICAgIGNhcDogc2VsZi5yZWNlaXZlckNhcCwKICAgICAgICAgICAgbWVtbzogbWVtbywKICAgICAgICAgICAgZGlzcGxheTogZGlzcGxheSwKICAgICAgICAgICAgc3RvcmFnZVBheW1lbnQ6ICZzdG9yYWdlRmVlIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fSwKICAgICAgICAgICAgZmxvd1Rva2VuUmVwYXltZW50OiBzZWxmLmZsb3dSZWNlaXZlcgogICAgICAgICkKCiAgICAgICAgc2VsZi5mbG93UmVjZWl2ZXIuYm9ycm93KCkhLmRlcG9zaXQoZnJvbTogPC1zdG9yYWdlRmVlKQogICAgICAgIGRlc3Ryb3kgZGVwb3NpdEVzdGltYXRlCiAgICB9Cn0="
            },
            "staking": {
                "checkSetup": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja1NldHVwIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCi8vLyBEZXRlcm1pbmVzIGlmIGFuIGFjY291bnQgaXMgc2V0IHVwIHdpdGggYSBTdGFraW5nIENvbGxlY3Rpb24KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBCb29sIHsKICAgIHJldHVybiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWRkcmVzcykKfQ==",
                "checkStakingEnabled": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjaGVja1N0YWtpbmdFbmFibGVkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6Qm9vbCB7CiAgICByZXR1cm4gRmxvd0lEVGFibGVTdGFraW5nLnN0YWtpbmdFbmFibGVkKCkKfQ==",
                "closeStake": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjbG9zZVN0YWtlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweEZsb3dTdGFraW5nQ29sbGVjdGlvbgoKLy8gQ2xvc2VzIG91dCBhIHN0YWtpbmcgb2JqZWN0IGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KLy8gVGhpcyBkb2VzIG5vdCByZW1vdmUgdGhlIHJlY29yZCBmcm9tIHRoZSBpZGVudGl0eSB0YWJsZSwKLy8gYnV0IGl0IGRvZXMgbWVhbiB0aGF0IHRoZSBhY2NvdW50IHRoYXQgY2xvc2VzIGl0IGNhbm5vdCBldmVyIGFjY2VzcyBpdCBhZ2FpbgoKdHJhbnNhY3Rpb24obm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzI/KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYuY2xvc2VTdGFrZShub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQogICAgfQp9",
                "createDelegator": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVEZWxlZ2F0b3IgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKLy8vIFJlZ2lzdGVycyBhIGRlbGVnYXRvciBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uIHJlc291cmNlCi8vLyBmb3IgdGhlIHNwZWNpZmllZCBub2RlSUQgYW5kIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGNvbW1pdAoKdHJhbnNhY3Rpb24oaWQ6IFN0cmluZywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZWdpc3RlckRlbGVnYXRvcihub2RlSUQ6IGlkLCBhbW91bnQ6IGFtb3VudCkgICAgICAKICAgIH0KfQ==",
                "createStake": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVTdGFrZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gQ29tbWl0cyBuZXcgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KLy8vIFRoZSB0b2tlbnMgZnJvbSB0aGUgbG9ja2VkIHZhdWx0IGFyZSB1c2VkIGZpcnN0LCBpZiBpdCBleGlzdHMKLy8vIGZvbGxvd2VkIGJ5IHRoZSB0b2tlbnMgZnJvbSB0aGUgdW5sb2NrZWQgdmF1bHQKCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZU5ld1Rva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
                "getApr": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBcHIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgLyA3LjAgKiAzNjUuMCAqICgxLjAgLSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0UmV3YXJkQ3V0UGVyY2VudGFnZSgpKQogICAgcmV0dXJuIGFwcgp9",
                "getApyWeekly": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRBcHlXZWVrbHkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgKiA1NC4wICogKDEuMCAtIEZsb3dJRFRhYmxlU3Rha2luZy5nZXRSZXdhcmRDdXRQZXJjZW50YWdlKCkpCiAgICByZXR1cm4gYXByCn0=",
                "getDelegatesIndo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXREZWxlZ2F0ZXNJbmRvIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKYWNjZXNzKGFsbCkgc3RydWN0IERlbGVnYXRlSW5mbyB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9ySUQ6IFVJbnQzMgogICAgYWNjZXNzKGFsbCkgbGV0IG5vZGVJRDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKCiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHJvbGU6IFVJbnQ4CiAgICBhY2Nlc3MoYWxsKSBsZXQgdW5zdGFrYWJsZVRva2VuczogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdGVkTm9kZUluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbwogICAgYWNjZXNzKGFsbCkgbGV0IHJlc3Rha2FibGVVbnN0YWtlZFRva2VuczogVUZpeDY0CgogICAgaW5pdChkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbykgewogICAgICAgIHNlbGYuZGVsZWdhdG9ySUQgPSBkZWxlZ2F0b3JJbmZvLmlkCiAgICAgICAgc2VsZi5ub2RlSUQgPSBkZWxlZ2F0b3JJbmZvLm5vZGVJRAogICAgICAgIHNlbGYudG9rZW5zQ29tbWl0dGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IGRlbGVnYXRvckluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCgogICAgICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgICAgICBsZXQgbm9kZUluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8obm9kZUlEOiBkZWxlZ2F0b3JJbmZvLm5vZGVJRCkKICAgICAgICBzZWxmLmRlbGVnYXRlZE5vZGVJbmZvID0gbm9kZUluZm8KICAgICAgICBzZWxmLmlkID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICAgICAgc2VsZi51bnN0YWthYmxlVG9rZW5zID0gc2VsZi50b2tlbnNTdGFrZWQgKyBzZWxmLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYucmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zID0gc2VsZi50b2tlbnNVbnN0YWtlZCArIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fT8gewogICAgbGV0IGRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFjY291bnQpCiAgICBpZiAoIWRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIGxldCBkZWxlZ2F0b3JJRHM6IFtGbG93U3Rha2luZ0NvbGxlY3Rpb24uRGVsZWdhdG9ySURzXSA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXREZWxlZ2F0b3JJRHMoYWRkcmVzczogYWNjb3VudCkKCiAgICBsZXQgZm9ybWF0dGVkRGVsZWdhdG9ySW5mbzoge1N0cmluZzoge1VJbnQzMjogRGVsZWdhdGVJbmZvfX0gPSB7fQoKICAgIGZvciBkZWxlZ2F0b3JJRCBpbiBkZWxlZ2F0b3JJRHMgewogICAgICAgIGlmIGxldCBfZm9ybWF0dGVkRGVsZWdhdG9ySW5mbyA9IGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvW2RlbGVnYXRvcklELmRlbGVnYXRvcklEXSA9IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSA9IHsgZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQ6IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKX0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZvcm1hdHRlZERlbGVnYXRvckluZm8KfQo=",
                "getDelegatesInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXREZWxlZ2F0ZXNJbmZvIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKYWNjZXNzKGFsbCkgc3RydWN0IERlbGVnYXRlSW5mbyB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9ySUQ6IFVJbnQzMgogICAgYWNjZXNzKGFsbCkgbGV0IG5vZGVJRDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKCiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHJvbGU6IFVJbnQ4CiAgICBhY2Nlc3MoYWxsKSBsZXQgdW5zdGFrYWJsZVRva2VuczogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdGVkTm9kZUluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbwogICAgYWNjZXNzKGFsbCkgbGV0IHJlc3Rha2FibGVVbnN0YWtlZFRva2VuczogVUZpeDY0CgogICAgaW5pdChkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbykgewogICAgICAgIHNlbGYuZGVsZWdhdG9ySUQgPSBkZWxlZ2F0b3JJbmZvLmlkCiAgICAgICAgc2VsZi5ub2RlSUQgPSBkZWxlZ2F0b3JJbmZvLm5vZGVJRAogICAgICAgIHNlbGYudG9rZW5zQ29tbWl0dGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IGRlbGVnYXRvckluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCgogICAgICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgICAgICBsZXQgbm9kZUluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8obm9kZUlEOiBkZWxlZ2F0b3JJbmZvLm5vZGVJRCkKICAgICAgICBzZWxmLmRlbGVnYXRlZE5vZGVJbmZvID0gbm9kZUluZm8KICAgICAgICBzZWxmLmlkID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICAgICAgc2VsZi51bnN0YWthYmxlVG9rZW5zID0gc2VsZi50b2tlbnNTdGFrZWQgKyBzZWxmLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYucmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zID0gc2VsZi50b2tlbnNVbnN0YWtlZCArIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fT8gewogICAgbGV0IGRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFjY291bnQpCiAgICBpZiAoIWRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIGxldCBkZWxlZ2F0b3JJRHM6IFtGbG93U3Rha2luZ0NvbGxlY3Rpb24uRGVsZWdhdG9ySURzXSA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXREZWxlZ2F0b3JJRHMoYWRkcmVzczogYWNjb3VudCkKCiAgICBsZXQgZm9ybWF0dGVkRGVsZWdhdG9ySW5mbzoge1N0cmluZzoge1VJbnQzMjogRGVsZWdhdGVJbmZvfX0gPSB7fQoKICAgIGZvciBkZWxlZ2F0b3JJRCBpbiBkZWxlZ2F0b3JJRHMgewogICAgICAgIGlmIGxldCBfZm9ybWF0dGVkRGVsZWdhdG9ySW5mbyA9IGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvW2RlbGVnYXRvcklELmRlbGVnYXRvcklEXSA9IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSA9IHsgZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQ6IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKX0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZvcm1hdHRlZERlbGVnYXRvckluZm8KfQ==",
                "getDelegatesInfoArray": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXREZWxlZ2F0ZXNJbmZvQXJyYXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCiAgICAgICAgCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm9dIHsKICAgIHJldHVybiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsRGVsZWdhdG9ySW5mbyhhZGRyZXNzOiBhZGRyZXNzKQp9",
                "getDelegatorInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXREZWxlZ2F0b3JJbmZvIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmFjY2VzcyhhbGwpIGZ1biBtYWluKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyKTogRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8gewogIHJldHVybiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQp9",
                "getEpochMetadata": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRFcG9jaE1ldGFkYXRhIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93RXBvY2ggZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGVwb2NoQ291bnRlcjogVUludDY0KTogRmxvd0Vwb2NoLkVwb2NoTWV0YWRhdGEgewogICAgcmV0dXJuIEZsb3dFcG9jaC5nZXRFcG9jaE1ldGFkYXRhKGVwb2NoQ291bnRlcikhCn0=",
                "getNodeInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXROb2RlSW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihub2RlSUQ6IFN0cmluZyk6IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyB7CiAgcmV0dXJuIEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkKfQ==",
                "getNodesInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXROb2Rlc0luZm8gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgU3VtbWFyeVN0YWtlRGVsZWdhdGVJbmZvIHsKCiAgICBhY2Nlc3MoYWxsKSB2YXIgbm9kZUNvdW50OiBVSW50NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZUNvdW50OiBVSW50NjQKCiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciB0b3RhbFRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNVbnN0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHN0YWtlVG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKCiAgICBpbml0KGFsbE5vZGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvXSwgYWxsRGVsZWdhdGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm9dKSB7CgogICAgICAgIHNlbGYubm9kZUNvdW50ID0gVUludDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZUNvdW50ID0gVUludDY0KDApCgogICAgICAgIHNlbGYudG90YWxUb2tlbnNTdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNVbnN0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNSZXdhcmRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBVRml4NjQoMCkKCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1N0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNDb21taXR0ZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnN0YWtlVG9rZW5zVW5zdGFraW5nID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Jld2FyZGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IFVGaXg2NCgwKQoKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zU3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmcgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zUmV3YXJkZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gVUZpeDY0KDApCgogICAgICAgIGZvciBub2RlSW5mbyBpbiBhbGxOb2RlSW5mbyB7CiAgICAgICAgICAgIHNlbGYubm9kZUNvdW50ID0gc2VsZi5ub2RlQ291bnQgKyAxCgogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zU3Rha2VkID0gc2VsZi50b3RhbFRva2Vuc1N0YWtlZCArIG5vZGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkID0gc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCArIG5vZGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFraW5nID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyArIG5vZGVJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFrZWQgPSBzZWxmLnRvdGFsVG9rZW5zVW5zdGFrZWQgKyBub2RlSW5mby50b2tlbnNVbnN0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgPSBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgKyBub2RlSW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSArIG5vZGVJbmZvLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQoKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1N0YWtlZCA9IHNlbGYuc3Rha2VUb2tlbnNTdGFrZWQgKyBub2RlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc0NvbW1pdHRlZCA9IHNlbGYuc3Rha2VUb2tlbnNDb21taXR0ZWQgKyBub2RlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2luZyA9IHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtpbmcgKyBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2VkID0gc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2VkICsgbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Jld2FyZGVkID0gc2VsZi5zdGFrZVRva2Vuc1Jld2FyZGVkICsgbm9kZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYuc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgICAgICB9CgogICAgICAgIGZvciBkZWxlZ2F0ZUluZm8gaW4gYWxsRGVsZWdhdGVJbmZvIHsKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZUNvdW50ID0gc2VsZi5kZWxlZ2F0ZUNvdW50ICsgMQoKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1N0YWtlZCA9IHNlbGYudG90YWxUb2tlbnNTdGFrZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNDb21taXR0ZWQgPSBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkICsgZGVsZWdhdGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFraW5nID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyArIGRlbGVnYXRlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNSZXdhcmRlZCA9IHNlbGYudG90YWxUb2tlbnNSZXdhcmRlZCArIGRlbGVnYXRlSW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSArIGRlbGVnYXRlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNTdGFrZWQgPSBzZWxmLmRlbGVnYXRlVG9rZW5zU3Rha2VkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zQ29tbWl0dGVkID0gc2VsZi5kZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZCArIGRlbGVnYXRlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Vuc3Rha2luZyA9IHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmcgKyBkZWxlZ2F0ZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtlZCA9IHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtlZCArIGRlbGVnYXRlSW5mby50b2tlbnNVbnN0YWtlZAogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zUmV3YXJkZWQgPSBzZWxmLmRlbGVnYXRlVG9rZW5zUmV3YXJkZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYuZGVsZWdhdGVUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICAgICAgfQoKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IFN1bW1hcnlTdGFrZURlbGVnYXRlSW5mbz8gewogICAgbGV0IGRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFjY291bnQpCiAgICBpZiAoIWRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIGxldCBhbGxOb2RlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mb10gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsTm9kZUluZm8oYWRkcmVzczogYWNjb3VudCkKICAgIGxldCBhbGxEZWxlZ2F0ZUluZm86IFtGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mb10gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsRGVsZWdhdG9ySW5mbyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIHJldHVybiBTdW1tYXJ5U3Rha2VEZWxlZ2F0ZUluZm8oYWxsTm9kZUluZm86IGFsbE5vZGVJbmZvLCBhbGxEZWxlZ2F0ZUluZm86IGFsbERlbGVnYXRlSW5mbykKfQo=",
                "getStakeInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdGFrZUluZm8gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgU3Rha2VJbmZvIHsKICAgIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgcm9sZTogVUludDgKICAgIGFjY2VzcyhhbGwpIGxldCBuZXR3b3JraW5nQWRkcmVzczogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgbmV0d29ya2luZ0tleTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgc3Rha2luZ0tleTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b3RhbFRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CgogICAgYWNjZXNzKGFsbCkgbGV0IGRlbGVnYXRvcnNDbnQ6IEludAogICAgYWNjZXNzKGFsbCkgbGV0IGRlbGVnYXRvcklEQ291bnRlcjogVUludDMyCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCBpbml0aWFsV2VpZ2h0OiBVSW50NjQKCiAgICAvLyBQcm9qZWN0ZWQgVmFsdWVzCiAgICBhY2Nlc3MoYWxsKSBsZXQgbm9kZUlEOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB1bnN0YWthYmxlVG9rZW5zOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNEZWxlZ2F0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHJlc3Rha2FibGVVbnN0YWtlZFRva2VuczogVUZpeDY0CgogICAgYWNjZXNzKGFsbCkgbGV0IG1hY2hpbmVBY2NvdW50QWRkcmVzczogQWRkcmVzcz8KICAgIGFjY2VzcyhhbGwpIGxldCBtYWNoaW5lQWNjb3VudEJhbGFuY2U6IFVGaXg2ND8KCiAgICBpbml0KG5vZGVJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8sIG1hY2hpbmVBY2NvdW50SW5mbzogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLk1hY2hpbmVBY2NvdW50SW5mbz8pIHsKICAgICAgICBzZWxmLmlkID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICAgICAgc2VsZi5uZXR3b3JraW5nQWRkcmVzcyA9IG5vZGVJbmZvLm5ldHdvcmtpbmdBZGRyZXNzCiAgICAgICAgc2VsZi5uZXR3b3JraW5nS2V5ID0gbm9kZUluZm8ubmV0d29ya2luZ0tleQogICAgICAgIHNlbGYuc3Rha2luZ0tleSA9IG5vZGVJbmZvLnN0YWtpbmdLZXkKICAgICAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IG5vZGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgIHNlbGYudG90YWxUb2tlbnNTdGFrZWQgPSBub2RlSW5mby50b3RhbFN0YWtlZFdpdGhEZWxlZ2F0b3JzKCkKICAgICAgICBzZWxmLnRva2Vuc0NvbW1pdHRlZCA9IG5vZGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYudG9rZW5zVW5zdGFraW5nID0gbm9kZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IG5vZGVJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IG5vZGVJbmZvLnRva2Vuc1Jld2FyZGVkCgogICAgICAgIHNlbGYuZGVsZWdhdG9yc0NudCA9IG5vZGVJbmZvLmRlbGVnYXRvcnMubGVuZ3RoIAogICAgICAgIHNlbGYuZGVsZWdhdG9ySURDb3VudGVyID0gbm9kZUluZm8uZGVsZWdhdG9ySURDb3VudGVyCiAgICAgICAgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgICAgICBzZWxmLmluaXRpYWxXZWlnaHQgPSBub2RlSW5mby5pbml0aWFsV2VpZ2h0CgogICAgICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgICAgICBzZWxmLm5vZGVJRCA9IG5vZGVJbmZvLmlkCiAgICAgICAgc2VsZi51bnN0YWthYmxlVG9rZW5zID0gc2VsZi50b2tlbnNTdGFrZWQgKyBzZWxmLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIGxldCBub2RlU3Rha2VkQmFsYW5jZVdpdGhEZWxlZ2F0b3JzID0gbm9kZUluZm8udG90YWxTdGFrZWRXaXRoRGVsZWdhdG9ycygpCiAgICAgICAgc2VsZi50b2tlbnNEZWxlZ2F0ZWQgPSBub2RlU3Rha2VkQmFsYW5jZVdpdGhEZWxlZ2F0b3JzIC0gbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi5yZXN0YWthYmxlVW5zdGFrZWRUb2tlbnMgPSBzZWxmLnRva2Vuc1Vuc3Rha2VkICsgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgaWYgbGV0IF9tYWNoaW5lQWNjb3VudEluZm8gPSBtYWNoaW5lQWNjb3VudEluZm8gewogICAgICAgICAgICBsZXQgX21hY2hpbmVBY2NvdW50QWRkcmVzcyA9IF9tYWNoaW5lQWNjb3VudEluZm8uZ2V0QWRkcmVzcygpCgogICAgICAgICAgICBsZXQgbWFjaGluZUFjY291bnQgPSBnZXRBY2NvdW50KF9tYWNoaW5lQWNjb3VudEFkZHJlc3MpCgogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QWRkcmVzcyA9IF9tYWNoaW5lQWNjb3VudEFkZHJlc3MKICAgICAgICAgICAgc2VsZi5tYWNoaW5lQWNjb3VudEJhbGFuY2UgPSBtYWNoaW5lQWNjb3VudC5iYWxhbmNlCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2VsZi5tYWNoaW5lQWNjb3VudEFkZHJlc3MgPSBuaWwKICAgICAgICAgICAgc2VsZi5tYWNoaW5lQWNjb3VudEJhbGFuY2UgPSBuaWwKICAgICAgICB9CiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiB7U3RyaW5nOiBTdGFrZUluZm99PyB7CiAgICBsZXQgZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWNjb3VudCkKICAgIGlmICghZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgbGV0IGZvcm1hdHRlZE5vZGVJbmZvOiB7U3RyaW5nOiBTdGFrZUluZm99ID0ge30KICAgIGxldCBhbGxOb2RlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mb10gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsTm9kZUluZm8oYWRkcmVzczogYWNjb3VudCkKICAgIGxldCBtYWNoaW5lQWNjb3VudHM6IHtTdHJpbmc6IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5NYWNoaW5lQWNjb3VudEluZm99ID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldE1hY2hpbmVBY2NvdW50cyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIGZvciBub2RlSW5mbyBpbiBhbGxOb2RlSW5mbyB7CiAgICAgICAgZm9ybWF0dGVkTm9kZUluZm9bbm9kZUluZm8uaWRdID0gU3Rha2VJbmZvKG5vZGVJbmZvOiBub2RlSW5mbywgbWFjaGluZUFjY291bnRJbmZvOiBtYWNoaW5lQWNjb3VudHNbbm9kZUluZm8uaWRdKQogICAgfQoKICAgIHJldHVybiBmb3JtYXR0ZWROb2RlSW5mbwp9Cg==",
                "getStakingInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdGFraW5nSW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKaW1wb3J0IEZsb3dFcG9jaCBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKYWNjZXNzKGFsbClzdHJ1Y3QgRXBvY2hJbmZvIHsKICBhY2Nlc3MoYWxsKWxldCBjdXJyZW50RXBvY2hDb3VudGVyOiBVSW50NjQKICBhY2Nlc3MoYWxsKWxldCBjdXJyZW50RXBvY2hQaGFzZTogVUludDgKCiAgaW5pdCgKICAgICAgY3VycmVudEVwb2NoQ291bnRlcjogVUludDY0LAogICAgICBjdXJyZW50RXBvY2hQaGFzZTogVUludDgKICApIHsKICAgICAgc2VsZi5jdXJyZW50RXBvY2hDb3VudGVyID0gY3VycmVudEVwb2NoQ291bnRlcgogICAgICBzZWxmLmN1cnJlbnRFcG9jaFBoYXNlID0gY3VycmVudEVwb2NoUGhhc2UKICB9Cn0KCmFjY2VzcyhhbGwpc3RydWN0IFJlc3VsdCB7CiAgYWNjZXNzKGFsbClsZXQgc3Rha2luZ0luZm86IFN0YWtpbmdJbmZvPwoKICBpbml0KHN0YWtpbmdJbmZvOiBTdGFraW5nSW5mbz8pIHsKICAgIHNlbGYuc3Rha2luZ0luZm8gPSBzdGFraW5nSW5mbwogIH0KfQoKYWNjZXNzKGFsbClzdHJ1Y3QgU3Rha2luZ0luZm8gewogIGFjY2VzcyhhbGwpbGV0IGVwb2NoSW5mbzogRXBvY2hJbmZvCiAgYWNjZXNzKGFsbClsZXQgbG9ja2VkQWRkcmVzczogQWRkcmVzcyAgIAogIGFjY2VzcyhhbGwpbGV0IGxvY2tlZEJhbGFuY2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHVubG9ja0xpbWl0OiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCBub2RlSW5mbzogTm9kZUluZm8/CiAgYWNjZXNzKGFsbClsZXQgZGVsZWdhdG9yTm9kZUluZm86IE5vZGVJbmZvPwogIGFjY2VzcyhhbGwpbGV0IGRlbGVnYXRvckluZm86IERlbGVnYXRvckluZm8/CgogIGluaXQoCiAgICBlcG9jaEluZm86IEVwb2NoSW5mbywKICAgIGxvY2tlZEFkZHJlc3M6IEFkZHJlc3MsCiAgICBsb2NrZWRCYWxhbmNlOiBVRml4NjQsCiAgICB1bmxvY2tMaW1pdDogVUZpeDY0LAogICAgbm9kZUluZm86IE5vZGVJbmZvPywKICAgIGRlbGVnYXRvck5vZGVJbmZvOiBOb2RlSW5mbz8sCiAgICBkZWxlZ2F0b3JJbmZvOiBEZWxlZ2F0b3JJbmZvPywKICApIHsKICAgIHNlbGYuZXBvY2hJbmZvID0gZXBvY2hJbmZvCiAgICBzZWxmLmxvY2tlZEFkZHJlc3MgPSBsb2NrZWRBZGRyZXNzCiAgICBzZWxmLmxvY2tlZEJhbGFuY2UgPSBsb2NrZWRCYWxhbmNlCiAgICBzZWxmLnVubG9ja0xpbWl0ID0gdW5sb2NrTGltaXQKICAgIHNlbGYubm9kZUluZm8gPSBub2RlSW5mbwogICAgc2VsZi5kZWxlZ2F0b3JOb2RlSW5mbyA9IGRlbGVnYXRvck5vZGVJbmZvCiAgICBzZWxmLmRlbGVnYXRvckluZm8gPSBkZWxlZ2F0b3JJbmZvCiAgfQp9CgphY2Nlc3MoYWxsKXN0cnVjdCBOb2RlSW5mbyB7CiAgYWNjZXNzKGFsbClsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IG5ldHdvcmtpbmdBZGRyZXNzOiBTdHJpbmcKICBhY2Nlc3MoYWxsKWxldCByb2xlOiBVSW50OAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgCiAgYWNjZXNzKGFsbClsZXQgZGVsZWdhdG9ySURDb3VudGVyOiBVSW50MzIKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IGluaXRpYWxXZWlnaHQ6IFVJbnQ2NAoKICBpbml0KG5vZGVJRDogU3RyaW5nKSB7CiAgICBsZXQgbm9kZUluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8obm9kZUlEOiBub2RlSUQpIAoKICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgc2VsZi5uZXR3b3JraW5nQWRkcmVzcyA9IG5vZGVJbmZvLm5ldHdvcmtpbmdBZGRyZXNzCiAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IG5vZGVJbmZvLnRva2Vuc1N0YWtlZAogICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBub2RlSW5mby50b2tlbnNDb21taXR0ZWQKICAgIHNlbGYudG9rZW5zVW5zdGFraW5nID0gbm9kZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICBzZWxmLnRva2Vuc1Vuc3Rha2VkID0gbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgIHNlbGYudG9rZW5zUmV3YXJkZWQgPSBub2RlSW5mby50b2tlbnNSZXdhcmRlZAogICAgc2VsZi5kZWxlZ2F0b3JJRENvdW50ZXIgPSBub2RlSW5mby5kZWxlZ2F0b3JJRENvdW50ZXIKICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gbm9kZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICBzZWxmLmluaXRpYWxXZWlnaHQgPSBub2RlSW5mby5pbml0aWFsV2VpZ2h0CiAgfQp9CgphY2Nlc3MoYWxsKXN0cnVjdCBEZWxlZ2F0b3JJbmZvIHsKICBhY2Nlc3MoYWxsKWxldCBpZDogVUludDMyCiAgYWNjZXNzKGFsbClsZXQgbm9kZUlEOiBTdHJpbmcKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogIGluaXQobm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzIpIHsKICAgIGxldCBkZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCkKCiAgICBzZWxmLmlkID0gZGVsZWdhdG9ySW5mby5pZAogICAgc2VsZi5ub2RlSUQgPSBkZWxlZ2F0b3JJbmZvLm5vZGVJRAogICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgc2VsZi50b2tlbnNTdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1N0YWtlZAogICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zUmV3YXJkZWQKICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IGRlbGVnYXRvckluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgfQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBSZXN1bHQgewogIGxldCB0b2tlbkhvbGRlclJlZiA9IAogICAgICBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogICAgICAgICAgLmJvcnJvdzwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKCiAgdmFyIHN0YWtpbmdJbmZvOiBTdGFraW5nSW5mbz8gPSBuaWwKICBpZiBsZXQgdG9rZW5Ib2xkZXIgPSB0b2tlbkhvbGRlclJlZiB7CiAgICBsZXQgbG9ja2VkQWRkcmVzcyA9IHRva2VuSG9sZGVyLmdldExvY2tlZEFjY291bnRBZGRyZXNzKCkgICAgICAgCiAgICBsZXQgbG9ja2VkQmFsYW5jZSA9IHRva2VuSG9sZGVyLmdldExvY2tlZEFjY291bnRCYWxhbmNlKCkKICAgIGxldCB1bmxvY2tMaW1pdCA9IHRva2VuSG9sZGVyLmdldFVubG9ja0xpbWl0KCkKICAgIAogICAgdmFyIG5vZGVJbmZvOiBOb2RlSW5mbz8gPSBuaWwKICAgIGlmIGxldCBub2RlSUQgPSB0b2tlbkhvbGRlci5nZXROb2RlSUQoKSB7CiAgICAgIG5vZGVJbmZvID0gTm9kZUluZm8obm9kZUlEOiBub2RlSUQpCiAgICB9CgogICAgdmFyIGRlbGVnYXRvck5vZGVJbmZvOiBOb2RlSW5mbz8gPSBuaWwKICAgIHZhciBkZWxlZ2F0b3JJbmZvOiBEZWxlZ2F0b3JJbmZvPyA9IG5pbAogICAgaWYgbGV0IGRlbGVnYXRvck5vZGVJRCA9IHRva2VuSG9sZGVyLmdldERlbGVnYXRvck5vZGVJRCgpIHsKICAgICAgaWYgbGV0IGRlbGVnYXRvcklEID0gdG9rZW5Ib2xkZXIuZ2V0RGVsZWdhdG9ySUQoKSB7CiAgICAgICAgZGVsZWdhdG9yTm9kZUluZm8gPSBOb2RlSW5mbyhub2RlSUQ6IGRlbGVnYXRvck5vZGVJRCkKICAgICAgICBkZWxlZ2F0b3JJbmZvID0gRGVsZWdhdG9ySW5mbyhub2RlSUQ6IGRlbGVnYXRvck5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQogICAgICB9IAogICAgfSAKCiAgICBsZXQgZXBvY2hJbmZvOiBFcG9jaEluZm8gPSBFcG9jaEluZm8oCiAgICAgIGN1cnJlbnRFcG9jaENvdW50ZXI6IEZsb3dFcG9jaC5jdXJyZW50RXBvY2hDb3VudGVyLAogICAgICBjdXJyZW50RXBvY2hQaGFzZTogRmxvd0Vwb2NoLmN1cnJlbnRFcG9jaFBoYXNlLnJhd1ZhbHVlCiAgICApCgogICAgc3Rha2luZ0luZm8gPSBTdGFraW5nSW5mbygKICAgICAgZXBvY2hJbmZvOiBlcG9jaEluZm8sCiAgICAgIGxvY2tlZEFkZHJlc3M6IGxvY2tlZEFkZHJlc3MsCiAgICAgIGxvY2tlZEJhbGFuY2U6IGxvY2tlZEJhbGFuY2UsCiAgICAgIHVubG9ja0xpbWl0OiB1bmxvY2tMaW1pdCwKICAgICAgbm9kZUluZm86IG5vZGVJbmZvLAogICAgICBkZWxlZ2F0b3JOb2RlSW5mbzogZGVsZWdhdG9yTm9kZUluZm8sCiAgICAgIGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8gCiAgICApCiAgfQoKICByZXR1cm4gUmVzdWx0KHN0YWtpbmdJbmZvOiBzdGFraW5nSW5mbykKfQ==",
                "restakeReward": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICByZXN0YWtlUmV3YXJkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gQ29tbWl0cyByZXdhcmRlZCB0b2tlbnMgdG8gc3Rha2UgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgoKdHJhbnNhY3Rpb24obm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzI/LCBhbW91bnQ6IFVGaXg2NCkgewogICAgCiAgICBsZXQgc3Rha2luZ0NvbGxlY3Rpb25SZWY6IGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbgoKICAgIHByZXBhcmUoYWNjb3VudDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBhIFN0YWtpbmdDb2xsZWN0aW9uIGluIHRoZSBwcmltYXJ5IHVzZXIncyBhY2NvdW50IikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmLnN0YWtlUmV3YXJkZWRUb2tlbnMobm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCwgYW1vdW50OiBhbW91bnQpCiAgICB9Cn0=",
                "restakeUnstaked": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICByZXN0YWtlVW5zdGFrZWQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKLy8vIENvbW1pdHMgdW5zdGFrZWQgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZVVuc3Rha2VkVG9rZW5zKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
                "setup": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZXR1cCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBzZXRzIHVwIGFuIGFjY291bnQgdG8gdXNlIGEgc3Rha2luZyBjb2xsZWN0aW9uCi8vLyBJdCB3aWxsIHdvcmsgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZXkgaGF2ZSBhIHJlZ3VsYXIgYWNjb3VudCwgYSB0d28tYWNjb3VudCBsb2NrZWQgdG9rZW5zIHNldHVwLAovLy8gb3Igc3Rha2luZyBvYmplY3RzIHN0b3JlZCBpbiB0aGUgdW5sb2NrZWQgYWNjb3VudAoKdHJhbnNhY3Rpb24gewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgLy8gSWYgdGhlcmUgaXNuJ3QgYWxyZWFkeSBhIHN0YWtpbmcgY29sbGVjdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkgPT0gbmlsIHsKCiAgICAgICAgICAgIC8vIENyZWF0ZSBwcml2YXRlIGNhcGFiaWxpdGllcyBmb3IgdGhlIHRva2VuIGhvbGRlciBhbmQgdW5sb2NrZWQgdmF1bHQKICAgICAgICAgICAgbGV0IGxvY2tlZEhvbGRlciA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcsIExvY2tlZFRva2Vucy5Ub2tlbk9wZXJhdGlvbnMpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKSEKICAgICAgICAgICAgbGV0IGZsb3dUb2tlbiA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KSEKCiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBTdGFraW5nIENvbGxlY3Rpb24gYW5kIHB1dCBpdCBpbiBzdG9yYWdlCiAgICAgICAgICAgIGlmIGxvY2tlZEhvbGRlci5jaGVjaygpIHsKICAgICAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoCiAgICAgICAgICAgICAgICAgICAgPC0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmNyZWF0ZVN0YWtpbmdDb2xsZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB1bmxvY2tlZFZhdWx0OiBmbG93VG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuSG9sZGVyOiBsb2NrZWRIb2xkZXIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIHRvOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSgKICAgICAgICAgICAgICAgICAgICA8LSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uY3JlYXRlU3Rha2luZ0NvbGxlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIHVubG9ja2VkVmF1bHQ6IGZsb3dUb2tlbiwKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5Ib2xkZXI6IG5pbAogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgdG86IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFB1Ymxpc2ggYSBjYXBhYmlsaXR5IHRvIHRoZSBjcmVhdGVkIHN0YWtpbmcgY29sbGVjdGlvbi4KICAgICAgICAgICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KAogICAgICAgICAgICAgICAgRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICAgICAgc3Rha2luZ0NvbGxlY3Rpb25DYXAsCiAgICAgICAgICAgICAgICBhdDogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uUHVibGljUGF0aAogICAgICAgICAgICApCiAgICAgICAgfQoKICAgICAgICAvLyBib3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBzdGFraW5nIGNvbGxlY3Rpb24gcmVmZXJlbmNlIikKCiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBub2RlIHN0YWtlciBvYmplY3QgaW4gdGhlIGFjY291bnQsIHB1dCBpdCBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93SURUYWJsZVN0YWtpbmcuTm9kZVN0YWtlcj4oZnJvbTogRmxvd0lEVGFibGVTdGFraW5nLk5vZGVTdGFrZXJTdG9yYWdlUGF0aCkgIT0gbmlsIHsKICAgICAgICAgICAgbGV0IG5vZGUgPC0gc2lnbmVyLnN0b3JhZ2UubG9hZDxARmxvd0lEVGFibGVTdGFraW5nLk5vZGVTdGFrZXI+KGZyb206IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlU3Rha2VyU3RvcmFnZVBhdGgpIQogICAgICAgICAgICBjb2xsZWN0aW9uUmVmLmFkZE5vZGVPYmplY3QoPC1ub2RlLCBtYWNoaW5lQWNjb3VudEluZm86IG5pbCkKICAgICAgICB9CgogICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZGVsZWdhdG9yIG9iamVjdCBpbiB0aGUgYWNjb3VudCwgcHV0IGl0IGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlRGVsZWdhdG9yPihmcm9tOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9yU3RvcmFnZVBhdGgpICE9IG5pbCB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3IgPC0gc2lnbmVyLnN0b3JhZ2UubG9hZDxARmxvd0lEVGFibGVTdGFraW5nLk5vZGVEZWxlZ2F0b3I+KGZyb206IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JTdG9yYWdlUGF0aCkhCiAgICAgICAgICAgIGNvbGxlY3Rpb25SZWYuYWRkRGVsZWdhdG9yT2JqZWN0KDwtZGVsZWdhdG9yKQogICAgICAgIH0KICAgIH0KfQ==",
                "unstake": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB1bnN0YWtlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gUmVxdWVzdHMgdW5zdGFraW5nIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZXF1ZXN0VW5zdGFraW5nKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
                "withdrawLocked": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB3aXRoZHJhd0xvY2tlZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RlVOR0lCTEVUT0tFTkFERFJFU1MKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4RkxPV1RPS0VOQUREUkVTUwppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHhMT0NLRURUT0tFTkFERFJFU1MKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CgogICAgbGV0IGhvbGRlclJlZjogYXV0aChMb2NrZWRUb2tlbnMuVG9rZW5PcGVyYXRpb25zLCBGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyCiAgICBsZXQgdmF1bHRSZWY6IGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoYWNjdDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLmhvbGRlclJlZiA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChMb2NrZWRUb2tlbnMuVG9rZW5PcGVyYXRpb25zLCBGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIlRoZSBwcmltYXJ5IHVzZXIgYWNjb3VudCBkb2VzIG5vdCBoYXZlIGFuIGFzc29jaWF0ZWQgbG9ja2VkIGFjY291bnQiKQoKICAgICAgICBzZWxmLnZhdWx0UmVmID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBmbG93IHRva2VuIHZhdWx0IHJlZiIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi52YXVsdFJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5ob2xkZXJSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpKQogICAgfQp9",
                "withdrawReward": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB3aXRoZHJhd1Jld2FyZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyByZXdhcmRlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0Cgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdSZXdhcmRlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
                "withdrawUnstaked": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB3aXRoZHJhd1Vuc3Rha2VkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyB1bnN0YWtlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0IGlmIGl0IGlzIHRoZXJlCgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdVbnN0YWtlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ=="
            },
            "storage": {
                "enableTokenStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBlbmFibGVUb2tlblN0b3JhZ2UgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
                "getBasicPublicItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRCYXNpY1B1YmxpY0l0ZW1zIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGFjY2VzcyhhbGwpc3RydWN0IEl0ZW0gewogIGFjY2VzcyhhbGwpbGV0IGFkZHJlc3M6IEFkZHJlc3MKICBhY2Nlc3MoYWxsKWxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKWxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGluaXQoYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCB0YXJnZXRQYXRoOiBTdHJpbmc/KSB7CiAgICBzZWxmLmFkZHJlc3MgPSBhZGRyZXNzCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoCiAgfQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbSXRlbV0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBpdGVtczogW0l0ZW1dID0gW10KCgogIGZ1biBlYWNoUGF0aChwYXRoOiBQdWJsaWNQYXRoLCBjYXBUeXBlOiBUeXBlKTogQm9vbCB7CiAgICAvLyB0b2RvCiAgICBsZXQgY2FwID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuZ2V0PCZBbnlTdHJ1Y3Q+KHBhdGgpCiAgICB2YXIgdGFyZ2V0UGF0aCA9ICIiCgogICAgaWYgY2FwICE9IG5pbCB7CiAgICAgIHRhcmdldFBhdGggPSAiMTIiIAogICAgfQogICAgbGV0IGl0ZW0gPSBJdGVtKGFkZHJlc3M6IGFkZHJlc3MsIHBhdGg6IHBhdGgudG9TdHJpbmcoKSwgdGFyZ2V0UGF0aDogdGFyZ2V0UGF0aCkKICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgcmV0dXJuIHRydWUKICB9CiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hQdWJsaWMoZWFjaFBhdGgpCgogIHJldHVybiBpdGVtcwp9",
                "getPrivateItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRQcml2YXRlSXRlbXMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgYWNjZXNzKGFsbClzdHJ1Y3QgSXRlbSB7CiAgYWNjZXNzKGFsbClsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHR5cGU6IFR5cGUKICBhY2Nlc3MoYWxsKWxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLCAKICAgIHBhdGg6IFN0cmluZywgCiAgICB0eXBlOiBUeXBlLCAKICAgIHRhcmdldFBhdGg6IFN0cmluZz8KICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudHlwZSA9IHR5cGUKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICB9Cn0KCmFjY2VzcyhhbGwpZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aE1hcDoge1N0cmluZzogQm9vbH0pOiBbSXRlbV0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCgogIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoUHJpdmF0ZShmdW4gKHBhdGg6IFByaXZhdGVQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICBpZiAhcGF0aE1hcC5jb250YWluc0tleShwYXRoLnRvU3RyaW5nKCkpIHsKICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICB2YXIgdGFyZ2V0UGF0aDogU3RyaW5nPyA9IG5pbAogICAgaWYgbGV0IHRhcmdldCA9IGFjY291bnQuZ2V0TGlua1RhcmdldChwYXRoKSB7CiAgICAgIHRhcmdldFBhdGggPSB0YXJnZXQudG9TdHJpbmcoKQogICAgfQoKICAgIGxldCBpdGVtID0gSXRlbSgKICAgICAgYWRkcmVzczogYWRkcmVzcywKICAgICAgcGF0aDogcGF0aC50b1N0cmluZygpLAogICAgICB0eXBlOiB0eXBlLAogICAgICB0YXJnZXRQYXRoOiB0YXJnZXRQYXRoCiAgICApCgogICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICByZXR1cm4gdHJ1ZQogIH0pCgogIHJldHVybiBpdGVtcwp9",
                "getPrivatePaths": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRQcml2YXRlUGF0aHMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgYWNjZXNzKGFsbClmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW1ByaXZhdGVQYXRoXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCBjbGVhbmRQYXRoczogW1ByaXZhdGVQYXRoXSA9IFtdCiAgZm9yIHBhdGggaW4gYWNjb3VudC5wcml2YXRlUGF0aHMgewogICAgY2xlYW5kUGF0aHMuYXBwZW5kKHBhdGgpCiAgfQogIHJldHVybiBjbGVhbmRQYXRocwp9",
                "getPublicItem": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRQdWJsaWNJdGVtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIC8vIEEgd29ya2Fyb3VuZCBtZXRob2QKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KICAKYWNjZXNzKGFsbCkgc3RydWN0IEl0ZW0gewogIGFjY2VzcyhhbGwpIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCB0eXBlOiBUeXBlCgogIGFjY2VzcyhhbGwpIGxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLCAKICAgIHBhdGg6IFN0cmluZywgCiAgICB0eXBlOiBUeXBlLCAKICAgIHRhcmdldFBhdGg6IFN0cmluZz8KICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudHlwZSA9IHR5cGUKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhNYXA6IHtTdHJpbmc6IEJvb2x9KTogW0l0ZW1dIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCgogIGxldCBpdGVtczogW0l0ZW1dID0gW10KICBhY2NvdW50LmZvckVhY2hQdWJsaWMoZnVuIChwYXRoOiBQdWJsaWNQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICBpZiAhcGF0aE1hcC5jb250YWluc0tleShwYXRoLnRvU3RyaW5nKCkpIHsKICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICB2YXIgdGFyZ2V0UGF0aDogU3RyaW5nPyA9IG5pbAoKICAgIGlmIGxldCB0YXJnZXQgPSBhY2NvdW50LmdldExpbmtUYXJnZXQocGF0aCkgewogICAgICB0YXJnZXRQYXRoID0gdGFyZ2V0LnRvU3RyaW5nKCkKICAgIH0KCiAgICBsZXQgaXRlbSA9IEl0ZW0oCiAgICAgIGFkZHJlc3M6IGFkZHJlc3MsCiAgICAgIHBhdGg6IHBhdGgudG9TdHJpbmcoKSwKICAgICAgdHlwZTogdHlwZSwKICAgICAgdGFyZ2V0UGF0aDogdGFyZ2V0UGF0aAogICAgKQoKICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgcmV0dXJuIGZhbHNlCiAgfSkKCiAgcmV0dXJuIGl0ZW1zCn0=",
                "getPublicItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRQdWJsaWNJdGVtcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgogIAphY2Nlc3MoYWxsKSBzdHJ1Y3QgSXRlbSB7CiAgYWNjZXNzKGFsbCkgbGV0IGFkZHJlc3M6IEFkZHJlc3MKICBhY2Nlc3MoYWxsKSBsZXQgcGF0aDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IHR5cGU6IFR5cGUKCiAgYWNjZXNzKGFsbCkgbGV0IHRhcmdldFBhdGg6IFN0cmluZz8KCiAgYWNjZXNzKGFsbCkgbGV0IGlzQ29sbGVjdGlvbkNhcDogQm9vbAogIGFjY2VzcyhhbGwpIGxldCB0b2tlbklEczogW1VJbnQ2NF0KCiAgYWNjZXNzKGFsbCkgbGV0IGlzQmFsYW5jZUNhcDogQm9vbAogIGFjY2VzcyhhbGwpIGxldCBiYWxhbmNlOiBVRml4NjQ/CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLCAKICAgIHBhdGg6IFN0cmluZywgCiAgICB0eXBlOiBUeXBlLCAKICAgIHRhcmdldFBhdGg6IFN0cmluZz8sIAogICAgaXNDb2xsZWN0aW9uQ2FwOiBCb29sLCAKICAgIHRva2VuSURzOiBbVUludDY0XSwKICAgIGlzQmFsYW5jZUNhcDogQm9vbCwKICAgIGJhbGFuY2U6IFVGaXg2ND8KICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudHlwZSA9IHR5cGUKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICAgIHNlbGYuaXNDb2xsZWN0aW9uQ2FwID0gaXNDb2xsZWN0aW9uQ2FwCiAgICBzZWxmLnRva2VuSURzID0gdG9rZW5JRHMKICAgIHNlbGYuaXNCYWxhbmNlQ2FwID0gaXNCYWxhbmNlQ2FwCiAgICBzZWxmLmJhbGFuY2UgPSBiYWxhbmNlCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoTWFwOiB7U3RyaW5nOiBCb29sfSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQoKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCiAgbGV0IGJhbGFuY2VDYXBUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZBbnlSZXNvdXJjZXtGdW5naWJsZVRva2VuLkJhbGFuY2V9Pj4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwmQW55UmVzb3VyY2V7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4+KCkKCiAgYWNjb3VudC5mb3JFYWNoUHVibGljKGZ1biAocGF0aDogUHVibGljUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgaWYgIXBhdGhNYXAuY29udGFpbnNLZXkocGF0aC50b1N0cmluZygpKSB7CiAgICAgIHJldHVybiB0cnVlCiAgICB9CgogICAgdmFyIHRhcmdldFBhdGg6IFN0cmluZz8gPSBuaWwKICAgIHZhciBpc0NvbGxlY3Rpb25DYXAgPSBmYWxzZQogICAgdmFyIGlzQmFsYW5jZUNhcCA9IGZhbHNlCiAgICB2YXIgdG9rZW5JRHM6IFtVSW50NjRdID0gW10KICAgIHZhciBiYWxhbmNlOiBVRml4NjQ/ID0gbmlsCgogICAgaWYgbGV0IHRhcmdldCA9IGFjY291bnQuZ2V0TGlua1RhcmdldChwYXRoKSB7CiAgICAgIHRhcmdldFBhdGggPSB0YXJnZXQudG9TdHJpbmcoKQogICAgfQoKICAgIGlmICh0eXBlLmlzU3VidHlwZShvZjogYmFsYW5jZUNhcFR5cGUpKSB7CiAgICAgIGlzQmFsYW5jZUNhcCA9IHRydWUKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAgICAgLmdldENhcGFiaWxpdHkocGF0aCkKICAgICAgICAgIC5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9PigpCgogICAgICBpZiBsZXQgdmF1bHQgPSB2YXVsdFJlZiB7CiAgICAgICAgICBiYWxhbmNlID0gdmF1bHQuYmFsYW5jZQogICAgICB9CiAgICB9IGVsc2UgaWYgKHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkpIHsKICAgICAgaXNDb2xsZWN0aW9uQ2FwID0gdHJ1ZQogICAgICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQKICAgICAgICAuZ2V0Q2FwYWJpbGl0eShwYXRoKQogICAgICAgIC5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigpCgogICAgICBpZiBsZXQgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25SZWYgewogICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvbi5nZXRJRHMoKQogICAgICB9CiAgICB9CgogICAgbGV0IGl0ZW0gPSBJdGVtKAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHRhcmdldFBhdGg6IHRhcmdldFBhdGgsCiAgICAgIGlzQ29sbGVjdGlvbkNhcDogaXNDb2xsZWN0aW9uQ2FwLAogICAgICB0b2tlbklEczogdG9rZW5JRHMsCiAgICAgIGlzQmFsYW5jZUNhcDogaXNCYWxhbmNlQ2FwLAogICAgICBiYWxhbmNlOiBiYWxhbmNlCiAgICApCgogICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICByZXR1cm4gdHJ1ZQogIH0pCgogIHJldHVybiBpdGVtcwp9",
                "getPublicPaths": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRQdWJsaWNQYXRocyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtQdWJsaWNQYXRoXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCBjbGVhbmRQYXRoczogW1B1YmxpY1BhdGhdID0gW10KICBmb3IgcGF0aCBpbiBhY2NvdW50LnB1YmxpY1BhdGhzIHsKICAgIGNsZWFuZFBhdGhzLmFwcGVuZChwYXRoKQogIH0KICByZXR1cm4gY2xlYW5kUGF0aHMKfQ==",
                "getStoragePaths": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdG9yYWdlUGF0aHMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgcHViIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbU3RvcmFnZVBhdGhdIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGNsZWFuZFBhdGhzOiBbU3RvcmFnZVBhdGhdID0gW10KICBmb3IgcGF0aCBpbiBhY2NvdW50LnN0b3JhZ2VQYXRocyB7CiAgICBjbGVhbmRQYXRocy5hcHBlbmQocGF0aCkKICB9CiAgcmV0dXJuIGNsZWFuZFBhdGhzCn0=",
                "getStoredItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdG9yZWRJdGVtcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKcHViIHN0cnVjdCBDb2xsZWN0aW9uRGlzcGxheSB7CiAgcHViIGxldCBuYW1lOiBTdHJpbmcKICBwdWIgbGV0IHNxdWFyZUltYWdlOiBNZXRhZGF0YVZpZXdzLk1lZGlhCgogIGluaXQobmFtZTogU3RyaW5nLCBzcXVhcmVJbWFnZTogTWV0YWRhdGFWaWV3cy5NZWRpYSkgewogICAgc2VsZi5uYW1lID0gbmFtZQogICAgc2VsZi5zcXVhcmVJbWFnZSA9IHNxdWFyZUltYWdlCiAgfQp9CgpwdWIgc3RydWN0IEl0ZW0gewogIHB1YiBsZXQgYWRkcmVzczogQWRkcmVzcwogIHB1YiBsZXQgcGF0aDogU3RyaW5nCiAgcHViIGxldCB0eXBlOiBUeXBlCiAgcHViIGxldCBpc1Jlc291cmNlOiBCb29sCiAgcHViIGxldCBpc05GVENvbGxlY3Rpb246IEJvb2wKICBwdWIgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogIHB1YiBsZXQgdG9rZW5JRHM6IFtVSW50NjRdCiAgcHViIGxldCBpc1ZhdWx0OiBCb29sCiAgcHViIGxldCBiYWxhbmNlOiBVRml4NjQ/CgogIGluaXQoYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCB0eXBlOiBUeXBlLCBpc1Jlc291cmNlOiBCb29sLCAKICAgIGlzTkZUQ29sbGVjdGlvbjogQm9vbCwgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LAogICAgdG9rZW5JRHM6IFtVSW50NjRdLCBpc1ZhdWx0OiBCb29sLCBiYWxhbmNlOiBVRml4NjQ/KSB7CiAgICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgICAgc2VsZi5wYXRoID0gcGF0aAogICAgICBzZWxmLnR5cGUgPSB0eXBlCiAgICAgIHNlbGYuaXNSZXNvdXJjZSA9IGlzUmVzb3VyY2UKICAgICAgc2VsZi5pc05GVENvbGxlY3Rpb24gPSBpc05GVENvbGxlY3Rpb24KICAgICAgc2VsZi5kaXNwbGF5ID0gZGlzcGxheQogICAgICBzZWxmLnRva2VuSURzID0gdG9rZW5JRHMKICAgICAgc2VsZi5pc1ZhdWx0ID0gaXNWYXVsdAogICAgICBzZWxmLmJhbGFuY2UgPSBiYWxhbmNlCiAgfQp9CgpwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aElkZW50aWZpZXJzOiBbU3RyaW5nXSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCB2YXVsdFR5cGUgPSBUeXBlPEBGdW5naWJsZVRva2VuLlZhdWx0PigpCiAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxATm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uPigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZXtNZXRhZGF0YVZpZXdzLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCgogIGZvciBpZGVudGlmaWVyIGluIHBhdGhJZGVudGlmaWVycyB7CiAgICBsZXQgcGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IGlkZW50aWZpZXIpIQoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC50eXBlKGF0OiBwYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICB2YXIgY29sbGVjdGlvbkRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PyA9IG5pbAogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmJvcnJvdzwme01ldGFkYXRhVmlld3MuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihmcm9tOiBwYXRoKSB7CiAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKCiAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIGEgbGlzdAogICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZi5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSURzWzBdKSAKICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgICAgICAgICAgY29sbGVjdGlvbkRpc3BsYXkgPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgaXNORlRDb2xsZWN0aW9uIHsKICAgICAgICBpZiBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuYm9ycm93PCZOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb24+KGZyb206IHBhdGgpIHsKICAgICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvblJlZi5nZXRJRHMoKQogICAgICAgIH0KICAgICAgfQoKICAgICAgbGV0IGlzVmF1bHQgPSB0eXBlLmlzU3VidHlwZShvZjogdmF1bHRUeXBlKSAKICAgICAgdmFyIGJhbGFuY2U6IFVGaXg2ND8gPSBuaWwKICAgICAgaWYgaXNWYXVsdCB7CiAgICAgICAgaWYgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHBhdGgpIHsKICAgICAgICAgIGJhbGFuY2UgPSB2YXVsdFJlZi5iYWxhbmNlCiAgICAgICAgfQogICAgICB9CgogICAgICBsZXQgaXRlbSA9IEl0ZW0oCiAgICAgICAgYWRkcmVzczogYWRkcmVzcywKICAgICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICBpc1Jlc291cmNlOiBpc1Jlc291cmNlLAogICAgICAgIGlzTkZUQ29sbGVjdGlvbjogaXNORlRDb2xsZWN0aW9uLAogICAgICAgIGRpc3BsYXk6IGNvbGxlY3Rpb25EaXNwbGF5LAogICAgICAgIHRva2VuSURzOiB0b2tlbklEcywKICAgICAgICBpc1ZhdWx0OiBpc1ZhdWx0LAogICAgICAgIGJhbGFuY2U6IGJhbGFuY2UKICAgICAgKQoKICAgICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICB9CiAgfQoKICByZXR1cm4gaXRlbXMKfQ==",
                "getStoredResource": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdG9yZWRSZXNvdXJjZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aFN0cjogU3RyaW5nKTogJkFueVJlc291cmNlPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCBwYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aFN0cikhCiAgcmV0dXJuIGFjY291bnQuYm9ycm93PCZBbnlSZXNvdXJjZT4oZnJvbTogcGF0aCkKfQ==",
                "getStoredStruct": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBnZXRTdG9yZWRTdHJ1Y3QgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgcHViIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhTdHI6IFN0cmluZyk6ICZBbnlTdHJ1Y3Q/IHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoU3RyKSEKICByZXR1cm4gYWNjb3VudC5ib3Jyb3c8JkFueVN0cnVjdD4oZnJvbTogcGF0aCkKfQ=="
            },
            "temp": {
                "addKeys": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBhZGRLZXlzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCnRyYW5zYWN0aW9uKHB1YmxpY0tleTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogMSkhCiAgICAgICAgKQogICAgICAgIHZhciBpZHggPSAwCiAgICAgICAgd2hpbGUgaWR4IDwgOTkgewogICAgICAgICAgICBzaWduZXIua2V5cy5hZGQoCiAgICAgICAgICAgICAgICBwdWJsaWNLZXk6IGtleSwKICAgICAgICAgICAgICAgIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IDEpISwKICAgICAgICAgICAgICAgIHdlaWdodDogMTAwMC4wCiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgIAogICAgfQp9",
                "createAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBjcmVhdGVBY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCmltcG9ydCBVU0RDRmxvdyBmcm9tIDB4VVNEQ0Zsb3cKaW1wb3J0IHN0Rmxvd1Rva2VuIGZyb20gMHhzdEZsb3dUb2tlbgoKdHJhbnNhY3Rpb24ocHVibGljS2V5czogW0NyeXB0by5LZXlMaXN0RW50cnldLCBjb250cmFjdHM6IHtTdHJpbmc6IFN0cmluZ30pIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICBsZXQgbmV3QWNjb3VudCA9IEFjY291bnQocGF5ZXI6IHNpZ25lcikKCiAgICAgICAgZm9yIGtleSBpbiBwdWJsaWNLZXlzIHsKICAgICAgICAgICAgbmV3QWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleS5wdWJsaWNLZXksIGhhc2hBbGdvcml0aG06IGtleS5oYXNoQWxnb3JpdGhtLCB3ZWlnaHQ6IGtleS53ZWlnaHQpCiAgICAgICAgfQoKICAgICAgICBmb3IgY29udHJhY3QgaW4gY29udHJhY3RzLmtleXMgewogICAgICAgICAgICBuZXdBY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogY29udHJhY3QsIGNvZGU6IGNvbnRyYWN0c1tjb250cmFjdF0hLmRlY29kZUhleCgpKQogICAgICAgIH0KCiAgICAgICAgbGV0IGNvYSA8LSBFVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpCiAgICAgICAgbGV0IGNvYVBhdGggPSAvc3RvcmFnZS9ldm0KICAgICAgICBuZXdBY2NvdW50LnN0b3JhZ2Uuc2F2ZSg8LWNvYSwgdG86IGNvYVBhdGgpCiAgICAgICAgbGV0IGNvYUNhcGFiaWxpdHkgPSBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oY29hUGF0aCkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvYUNhcGFiaWxpdHksIGF0OiAvcHVibGljL2V2bSkKICAgICAgICBsZXQgdXNkY1ZhdWx0IDwtIFVTRENGbG93LmNyZWF0ZUVtcHR5VmF1bHQodmF1bHRUeXBlOiBUeXBlPEBVU0RDRmxvdy5WYXVsdD4oKSkKICAgICAgICBuZXdBY2NvdW50LnN0b3JhZ2Uuc2F2ZSg8LXVzZGNWYXVsdCwgdG86IFVTRENGbG93LlZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KFVTRENGbG93LlZhdWx0U3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogVVNEQ0Zsb3cuVmF1bHRQdWJsaWNQYXRoCiAgICAgICAgKQogICAgICAgIG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgIG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyLCBGdW5naWJsZVRva2VuLkJhbGFuY2V9PihVU0RDRmxvdy5WYXVsdFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IFVTRENGbG93LlJlY2VpdmVyUHVibGljUGF0aAogICAgICAgICkKCiAgICAgICAgLy8gc3RGbG93CiAgICAgICAgbGV0IHN0Rmxvd1ZhdWx0IDwtIHN0Rmxvd1Rva2VuLmNyZWF0ZUVtcHR5VmF1bHQodmF1bHRUeXBlOiBUeXBlPEBzdEZsb3dUb2tlbi5WYXVsdD4oKSkKICAgICAgICBuZXdBY2NvdW50LnN0b3JhZ2Uuc2F2ZSg8LXN0Rmxvd1ZhdWx0LCB0bzogc3RGbG93VG9rZW4udG9rZW5WYXVsdFBhdGgpCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHN0Rmxvd1Rva2VuLnRva2VuVmF1bHRQYXRoKSwKICAgICAgICAgICAgYXQ6IHN0Rmxvd1Rva2VuLnRva2VuQmFsYW5jZVBhdGgKICAgICAgICApCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHN0Rmxvd1Rva2VuLnRva2VuVmF1bHRQYXRoKSwKICAgICAgICAgICAgYXQ6IHN0Rmxvd1Rva2VuLnRva2VuUmVjZWl2ZXJQYXRoCiAgICAgICAgKQogICAgfQoKfQ==",
                "mintNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBtaW50TkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIC8vLyBUaGlzIHNjcmlwdCB1c2VzIHRoZSBORlRNaW50ZXIgcmVzb3VyY2UgdG8gbWludCBhIG5ldyBORlQKLy8vIEl0IG11c3QgYmUgcnVuIHdpdGggdGhlIGFjY291bnQgdGhhdCBoYXMgdGhlIG1pbnRlciByZXNvdXJjZQovLy8gc3RvcmVkIGluIC9zdG9yYWdlL05GVE1pbnRlcgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CmltcG9ydCBFeGFtcGxlTkZUIGZyb20gMHgzOTBiNDcwNWRhNjMwNWMzCgp0cmFuc2FjdGlvbigKICAgIHJlY2lwaWVudDogQWRkcmVzcywKICAgIG5hbWU6IFN0cmluZywKICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsCiAgICB0aHVtYm5haWw6IFN0cmluZywKICAgIGN1dHM6IFtVRml4NjRdLAogICAgcm95YWx0eURlc2NyaXB0aW9uczogW1N0cmluZ10sCiAgICByb3lhbHR5QmVuZWZpY2lhcmllczogW0FkZHJlc3NdCikgewoKICAgIC8vLyBsb2NhbCB2YXJpYWJsZSBmb3Igc3RvcmluZyB0aGUgbWludGVyIHJlZmVyZW5jZQogICAgbGV0IG1pbnRlcjogJkV4YW1wbGVORlQuTkZUTWludGVyCgogICAgLy8vIFJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXIncyBjb2xsZWN0aW9uCiAgICBsZXQgcmVjaXBpZW50Q29sbGVjdGlvblJlZjogJntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBFeGFtcGxlTkZULnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICAgICAgPz8gcGFuaWMoIlZpZXdSZXNvbHZlciBkb2VzIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIAogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUTWludGVyIHJlc291cmNlIGluIHN0b3JhZ2UKICAgICAgICBzZWxmLm1pbnRlciA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRXhhbXBsZU5GVC5ORlRNaW50ZXI+KGZyb206IEV4YW1wbGVORlQuTWludGVyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJBY2NvdW50IGRvZXMgbm90IHN0b3JlIGFuIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIHBhdGgiKQoKICAgICAgICAvLyBCb3Jyb3cgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBORlQgY29sbGVjdGlvbiByZWZlcmVuY2UKICAgICAgICBzZWxmLnJlY2lwaWVudENvbGxlY3Rpb25SZWYgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGdldCByZWNlaXZlciByZWZlcmVuY2UgdG8gdGhlIE5GVCBDb2xsZWN0aW9uIikKICAgIH0KCiAgICBwcmUgewogICAgICAgIGN1dHMubGVuZ3RoID09IHJveWFsdHlEZXNjcmlwdGlvbnMubGVuZ3RoICYmIGN1dHMubGVuZ3RoID09IHJveWFsdHlCZW5lZmljaWFyaWVzLmxlbmd0aDogIkFycmF5IGxlbmd0aCBzaG91bGQgYmUgZXF1YWwgZm9yIHJveWFsdHkgcmVsYXRlZCBkZXRhaWxzIgogICAgfQoKICAgIGV4ZWN1dGUgewoKICAgICAgICAvLyBDcmVhdGUgdGhlIHJveWFsdHkgZGV0YWlscwogICAgICAgIHZhciBjb3VudCA9IDAKICAgICAgICB2YXIgcm95YWx0aWVzOiBbTWV0YWRhdGFWaWV3cy5Sb3lhbHR5XSA9IFtdCiAgICAgICAgbG9nKHJveWFsdHlCZW5lZmljaWFyaWVzLmxlbmd0aCkKICAgICAgICB3aGlsZSByb3lhbHR5QmVuZWZpY2lhcmllcy5sZW5ndGggPiBjb3VudCB7CiAgICAgICAgICAgIGxldCBiZW5lZmljaWFyeSA9IHJveWFsdHlCZW5lZmljaWFyaWVzW2NvdW50XQogICAgICAgICAgICBsZXQgYmVuZWZpY2lhcnlDYXBhYmlsaXR5ID0gZ2V0QWNjb3VudChiZW5lZmljaWFyeSkuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigKICAgICAgICAgICAgICAgICAgICBNZXRhZGF0YVZpZXdzLmdldFJveWFsdHlSZWNlaXZlclB1YmxpY1BhdGgoKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICBpZiAhYmVuZWZpY2lhcnlDYXBhYmlsaXR5LmNoZWNrKCkgewogICAgICAgICAgICAgICAgcGFuaWMoIkJlbmVmaWNpYXJ5IGRvZXMgbm90IGhhdmUgUmVjZWl2ZXIgY29uZmlndXJlZCBhdCBSb3lhbHR5UmVjZWl2ZXJQdWJsaWNQYXRoIikKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcm95YWx0aWVzLmFwcGVuZCgKICAgICAgICAgICAgICAgIE1ldGFkYXRhVmlld3MuUm95YWx0eSgKICAgICAgICAgICAgICAgICAgICByZWNlaXZlcjogYmVuZWZpY2lhcnlDYXBhYmlsaXR5LAogICAgICAgICAgICAgICAgICAgIGN1dDogY3V0c1tjb3VudF0sCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJveWFsdHlEZXNjcmlwdGlvbnNbY291bnRdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICkKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDEKICAgICAgICB9CgoKICAgICAgICAvLyBNaW50IHRoZSBORlQgYW5kIGRlcG9zaXQgaXQgdG8gdGhlIHJlY2lwaWVudCdzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbWludGVkTkZUIDwtIHNlbGYubWludGVyLm1pbnRORlQoCiAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiwKICAgICAgICAgICAgdGh1bWJuYWlsOiB0aHVtYm5haWwsCiAgICAgICAgICAgIHJveWFsdGllczogcm95YWx0aWVzCiAgICAgICAgKQogICAgICAgIHNlbGYucmVjaXBpZW50Q29sbGVjdGlvblJlZi5kZXBvc2l0KHRva2VuOiA8LW1pbnRlZE5GVCkKICAgIH0KCn0=",
                "onboardEvmToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBvbmJvYXJkRXZtVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIEVSQzIwL0VSQzcyMSBhc3NldHMgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIGFzc2V0cyBiZXR3ZWVuCi8vLyBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIE5GVCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gYWRkcmVzc2VzQXNIZXg6IEFycmF5IG9mIEVWTSBjb250cmFjdCBhZGRyZXNzZXMgZGVmaW5pbmcgdGhlIAovLy8gICAgIGJyaWRnZWFibGUgYXNzZXQgdG8gYmUgb25ib2FyZGVkCi8vLwp0cmFuc2FjdGlvbihhZGRyZXNzZXNBc0hleDogW1N0cmluZ10pIHsKbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgIC8vCiAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICkKICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgIC8vIFNldCBhIHdpdGhkcmF3YWwgbGltaXQgZm9yIHRoZSBwcm92aWRlcgogICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQoYWRkcmVzc2VzQXNIZXgubGVuZ3RoKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKHByb3ZpZGVyTGltaXQpCiAgICAvLyBDcmVhdGUgU2NvcGVkRlRQcm92aWRlciB0byBleHBpcmUganVzdCBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQp9CmV4ZWN1dGUgewogICAgLy8gSXRlcmF0ZSBvdmVyIHByb3ZpZGVkIGFycmF5CiAgICBmb3IgYWRkcmVzc0hleCBpbiBhZGRyZXNzZXNBc0hleCB7CiAgICAgICAgLy8gQ29udmVydCBoZXggc3RyaW5nIHRvIEVWTUFkZHJlc3MKICAgICAgICBsZXQgYWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhhZGRyZXNzSGV4KQogICAgICAgIC8vIENvbnRpbnVlIGlmIHRoZSBoZXggaXMgbm90IGEgdmFsaWQgRVZNIGFkZHJlc3Mgb3IgaWYgdGhlIGFkZHJlc3MgaXMgYWxyZWFkeSBvbmJvYXJkZWQKICAgICAgICBpZiBhZGRyZXNzID09IG5pbCB8fCBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzcyEpICE9IHRydWUgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeUVWTUFkZHJlc3MoCiAgICAgICAgICAgIGFkZHJlc3MhLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgfQogICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCn0KfQ==",
                "setupFTProvider": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZXR1cEZUUHJvdmlkZXIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdERhdGEgPSBFeGFtcGxlVG9rZW4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgRXhhbXBsZVRva2VuIikKICAgIAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICB9Cn0KIA==",
                "setupNFTFull": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICBzZXR1cE5GVEZ1bGwgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCnRyYW5zYWN0aW9uIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGQgPSBFeGFtcGxlTkZULnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpISBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YQoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZFeGFtcGxlTkZULkNvbGxlY3Rpb24+KGZyb206IGQuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGFjY3Quc3RvcmFnZS5zYXZlKDwtIEV4YW1wbGVORlQuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBFeGFtcGxlTkZULkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICB9CgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaChkLnB1YmxpY1BhdGgpCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntFeGFtcGxlTkZULkV4YW1wbGVORlRDb2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PihkLnN0b3JhZ2VQYXRoKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY2FwLCBhdDogZC5wdWJsaWNQYXRoKQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntFeGFtcGxlTkZULkV4YW1wbGVORlRDb2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWMsIE5vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PihkLnN0b3JhZ2VQYXRoKQogICAgfQp9Cg==",
                "test": "CiAgICAvLyBGbG93IFdhbGxldCAtIG1haW5uZXQgU2NyaXB0ICB0ZXN0IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIA=="
            }
        },
        "testnet": {
            "version": "1.0",
            "ft": {
                "isTokenListEnabled": "CiAgICAKICAgIC8vIEZsb3cgV2FsbGV0IC0gdGVzdG5ldCBTY3JpcHQgIGlzVG9rZW5MaXN0RW5hYmxlZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgIAogICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KICAgIGltcG9ydCBGaWF0VG9rZW4gZnJvbSAweGE5ODNmZWNiZWQ2MjExNjMNCmltcG9ydCBGbG92YXRhckR1c3RUb2tlbiBmcm9tIDB4OTM5MmE0YTdjM2Y0OWEwYg0KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4N2U2MGRmMDQyYTljMDg2OA0KaW1wb3J0IFVTRENGbG93IGZyb20gMHg2NGFkZjM5Y2JjMzU0ZmNiDQppbXBvcnQgc3RGbG93VG9rZW4gZnJvbSAweGU0NWM2NGVjZmUzMWU0NjUKCiAgICAKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja0ZpYXRUb2tlblZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCByZWNlaXZlcjogQm9vbCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9VU0RDVmF1bHRSZWNlaXZlcikKCiAgICAgIGxldCBiYWxhbmNlOiBCb29sID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9VU0RDVmF1bHRCYWxhbmNlKQoKICAgICAgbGV0IGZsYWcgPSByZWNlaXZlciAmJiBiYWxhbmNlICAgICAgCgogICAgICAgcmV0dXJuIGZsYWcKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tGbG92YXRhckR1c3RUb2tlblZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCByZWNlaXZlcjogQm9vbCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9GbG92YXRhckR1c3RUb2tlblJlY2VpdmVyKQoKICAgICAgbGV0IGJhbGFuY2U6IEJvb2wgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0Zsb3ZhdGFyRHVzdFRva2VuQmFsYW5jZSkKCiAgICAgIGxldCBmbGFnID0gcmVjZWl2ZXIgJiYgYmFsYW5jZSAgICAgIAoKICAgICAgIHJldHVybiBmbGFnCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd1Rva2VuVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IHJlY2VpdmVyOiBCb29sID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKQoKICAgICAgbGV0IGJhbGFuY2U6IEJvb2wgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL2Zsb3dUb2tlbkJhbGFuY2UpCgogICAgICBsZXQgZmxhZyA9IHJlY2VpdmVyICYmIGJhbGFuY2UgICAgICAKCiAgICAgICByZXR1cm4gZmxhZwogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja1VTRENGbG93VmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IHJlY2VpdmVyOiBCb29sID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL3VzZGNGbG93UmVjZWl2ZXIpCgogICAgICBsZXQgYmFsYW5jZTogQm9vbCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvdXNkY0Zsb3dNZXRhZGF0YSkKCiAgICAgIGxldCBmbGFnID0gcmVjZWl2ZXIgJiYgYmFsYW5jZSAgICAgIAoKICAgICAgIHJldHVybiBmbGFnCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrc3RGbG93VG9rZW5WYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgcmVjZWl2ZXI6IEJvb2wgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvc3RGbG93VG9rZW5SZWNlaXZlcikKCiAgICAgIGxldCBiYWxhbmNlOiBCb29sID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9zdEZsb3dUb2tlbkJhbGFuY2UpCgogICAgICBsZXQgZmxhZyA9IHJlY2VpdmVyICYmIGJhbGFuY2UgICAgICAKCiAgICAgICByZXR1cm4gZmxhZwogICAgfQogICAgCgogICAgYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcykgOiB7U3RyaW5nOiBCb29sfSB7CiAgICAgIHJldHVybiB7CiAgICAiQS5hOTgzZmVjYmVkNjIxMTYzLkZpYXRUb2tlbiIgOgogICAgY2hlY2tGaWF0VG9rZW5WYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuOTM5MmE0YTdjM2Y0OWEwYi5GbG92YXRhckR1c3RUb2tlbiIgOgogICAgY2hlY2tGbG92YXRhckR1c3RUb2tlblZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS43ZTYwZGYwNDJhOWMwODY4LkZsb3dUb2tlbiIgOgogICAgY2hlY2tGbG93VG9rZW5WYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuNjRhZGYzOWNiYzM1NGZjYi5VU0RDRmxvdyIgOgogICAgY2hlY2tVU0RDRmxvd1ZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS5lNDVjNjRlY2ZlMzFlNDY1LnN0Rmxvd1Rva2VuIiA6CiAgICBjaGVja3N0Rmxvd1Rva2VuVmF1bHQoYWRkcmVzczogYWRkcmVzcykKICAgIH0KICAgIH0KICA=",
                "getTokenListBalance": "CiAgICAKICAgIC8vIEZsb3cgV2FsbGV0IC0gdGVzdG5ldCBTY3JpcHQgIGdldFRva2VuTGlzdEJhbGFuY2VTdGFibGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAKICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCiAgICBpbXBvcnQgRmlhdFRva2VuIGZyb20gMHhhOTgzZmVjYmVkNjIxMTYzDQppbXBvcnQgRmxvdmF0YXJEdXN0VG9rZW4gZnJvbSAweDkzOTJhNGE3YzNmNDlhMGINCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgNCmltcG9ydCBVU0RDRmxvdyBmcm9tIDB4NjRhZGYzOWNiYzM1NGZjYg0KaW1wb3J0IHN0Rmxvd1Rva2VuIGZyb20gMHhlNDVjNjRlY2ZlMzFlNDY1CgogICAgCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tGaWF0VG9rZW5CYWxhbmNlKGFkZHJlc3M6IEFkZHJlc3MpIDogVUZpeDY0IHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgICAgLmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9PigvcHVibGljL1VTRENWYXVsdEJhbGFuY2UpID8/IG5pbAogICAgICAKICAgICAgaWYgdmF1bHRSZWYgIT0gbmlsIHsKICAgICAgICAKICAgICAgICByZXR1cm4gdmF1bHRSZWYhLmJhbGFuY2UKICAgICAgfQogICAgICAKICAgICAgcmV0dXJuIDAuMAogICAgICAKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tGbG92YXRhckR1c3RUb2tlbkJhbGFuY2UoYWRkcmVzczogQWRkcmVzcykgOiBVRml4NjQgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgICAuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvRmxvdmF0YXJEdXN0VG9rZW5CYWxhbmNlKSA/PyBuaWwKICAgICAgCiAgICAgIGlmIHZhdWx0UmVmICE9IG5pbCB7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHZhdWx0UmVmIS5iYWxhbmNlCiAgICAgIH0KICAgICAgCiAgICAgIHJldHVybiAwLjAKICAgICAgCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd1Rva2VuQmFsYW5jZShhZGRyZXNzOiBBZGRyZXNzKSA6IFVGaXg2NCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAgIC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5CYWxhbmNlfT4oL3B1YmxpYy9mbG93VG9rZW5CYWxhbmNlKSA/PyBuaWwKICAgICAgCiAgICAgIGlmIHZhdWx0UmVmICE9IG5pbCB7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHZhdWx0UmVmIS5iYWxhbmNlCiAgICAgIH0KICAgICAgCiAgICAgIHJldHVybiAwLjAKICAgICAgCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrVVNEQ0Zsb3dCYWxhbmNlKGFkZHJlc3M6IEFkZHJlc3MpIDogVUZpeDY0IHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgICAgLmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9PigvcHVibGljL3VzZGNGbG93TWV0YWRhdGEpID8/IG5pbAogICAgICAKICAgICAgaWYgdmF1bHRSZWYgIT0gbmlsIHsKICAgICAgICAKICAgICAgICByZXR1cm4gdmF1bHRSZWYhLmJhbGFuY2UKICAgICAgfQogICAgICAKICAgICAgcmV0dXJuIDAuMAogICAgICAKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tzdEZsb3dUb2tlbkJhbGFuY2UoYWRkcmVzczogQWRkcmVzcykgOiBVRml4NjQgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgICAuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvc3RGbG93VG9rZW5CYWxhbmNlKSA/PyBuaWwKICAgICAgCiAgICAgIGlmIHZhdWx0UmVmICE9IG5pbCB7CiAgICAgICAgCiAgICAgICAgcmV0dXJuIHZhdWx0UmVmIS5iYWxhbmNlCiAgICAgIH0KICAgICAgCiAgICAgIHJldHVybiAwLjAKICAgICAgCiAgICB9CiAgICAKCiAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IHtTdHJpbmc6IFVGaXg2NH0gewogICAgICByZXR1cm4gewogICAgICAiQS5hOTgzZmVjYmVkNjIxMTYzLkZpYXRUb2tlbiIgOgogICAgY2hlY2tGaWF0VG9rZW5CYWxhbmNlKGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAgICJBLjkzOTJhNGE3YzNmNDlhMGIuRmxvdmF0YXJEdXN0VG9rZW4iIDoKICAgIGNoZWNrRmxvdmF0YXJEdXN0VG9rZW5CYWxhbmNlKGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAgICJBLjdlNjBkZjA0MmE5YzA4NjguRmxvd1Rva2VuIiA6CiAgICBjaGVja0Zsb3dUb2tlbkJhbGFuY2UoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICAgIkEuNjRhZGYzOWNiYzM1NGZjYi5VU0RDRmxvdyIgOgogICAgY2hlY2tVU0RDRmxvd0JhbGFuY2UoYWRkcmVzczogYWRkcmVzcykKICAgICwKICAgICAgIkEuZTQ1YzY0ZWNmZTMxZTQ2NS5zdEZsb3dUb2tlbiIgOgogICAgY2hlY2tzdEZsb3dUb2tlbkJhbGFuY2UoYWRkcmVzczogYWRkcmVzcykKICAgIH0KICAgIH0KICA=",
                "addToken": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhZGRUb2tlbiAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewoKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPiApID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC0gPFRva2VuPi5jcmVhdGVFbXB0eVZhdWx0KHZhdWx0VHlwZTogVHlwZTxAPFRva2VuPi5WYXVsdD4oKSksIHRvOiA8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgfQoKICAgICAgICBpZiBzaWduZXIuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwYWJpbGl0eSwgYXQ6IDxUb2tlblJlY2VpdmVyUGF0aD4pCiAgICAgICAgCiAgICAgICAgfQogICAgICAgCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KSA9PSBmYWxzZSB7CiAgICAgICAgICAgIGxldCBiYWxhbmNlQ2FwYWJpbGl0eSA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmPFRva2VuPi5WYXVsdD4oPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goYmFsYW5jZUNhcGFiaWxpdHksIGF0OiA8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICAgICAgfQogICAgCiAgICB9Cn0=",
                "enableTokenStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBlbmFibGVUb2tlblN0b3JhZ2UgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
                "transferEvmTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlckV2bVRva2VucyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCi8vLyBUcmFuc2ZlcnMgJEZMT1cgZnJvbSB0aGUgc2lnbmVyJ3MgYWNjb3VudCBDYWRlbmNlIEZsb3cgYmFsYW5jZSB0byB0aGUgcmVjaXBpZW50J3MgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MuCi8vLyBOb3RlIHRoYXQgYSBDT0EgbXVzdCBoYXZlIGEgJEZMT1cgYmFsYW5jZSBpbiBFVk0gYmVmb3JlIHRyYW5zZmVycmluZyB2YWx1ZSB0byBhbm90aGVyIEVWTSBhZGRyZXNzLgovLy8KdHJhbnNhY3Rpb24odG9FVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUludDI1NiwgZ2FzTGltaXQ6IFVJbnQ2NCkgewoKICAgIGxldCBjb2E6IGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzczogRVZNLkVWTUFkZHJlc3MKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IC9zdG9yYWdlL2V2bSkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LUVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCksIHRvOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgfQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3LCBFVk0uQ2FsbCkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgYnJpZGdlZCBhY2NvdW50IikKCiAgICAgICAgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzID0gRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHRvRVZNQWRkcmVzc0hleCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBpZiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MuYnl0ZXMgPT0gc2VsZi5jb2EuYWRkcmVzcygpLmJ5dGVzIHsKICAgICAgICAvLyAgICAgcmV0dXJuCiAgICAgICAgLy8gfQogICAgICAgIGxldCBkYXRhID0gIiIKICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgIH0KfQ==",
                "transferTokens": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlclRva2VucyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBBZGRyZXNzKSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oPFRva2VuUmVjZWl2ZXJQYXRoPikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9"
            },
            "nft": {
                "checkNFTListEnabledNew": "CiAgICAKICAgIC8vIEZsb3cgV2FsbGV0IC0gdGVzdG5ldCBTY3JpcHQgIGNoZWNrTkZUTGlzdEVuYWJsZWQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAKICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCiAgICBpbXBvcnQgRlJDMjBTZW1pTkZUIGZyb20gMHhiNzI0OGJhYTI0YTk1YzNmDQppbXBvcnQgbmJhX05GVCBmcm9tIDB4MDQ2MjVjMjg1OTNkOTQwOA0KaW1wb3J0IE1vbnN0ZXJNYWtlciBmcm9tIDB4NzI0YTlkYTAwMzQwZjE0Yw0KaW1wb3J0IEV4YW1wbGVORlQgZnJvbSAweDM5MGI0NzA1ZGE2MzA1YzMNCmltcG9ydCBGbG93dHlUZXN0TkZUIGZyb20gMHhkOWMwMmNkYWNjY2IyNWFiCgogICAgCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tGUkMyMFNlbWlORlRWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9GUkMyMFNlbWlORlRfMHhiNzI0OGJhYTI0YTk1YzNmY29sbGVjdGlvbikKCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja25iYV9ORlRWYXVsdChhZGRyZXNzOiBBZGRyZXNzKSA6IEJvb2wgewogICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5leGlzdHMoL3B1YmxpYy9uYmFfTkZUQ29sbGVjdGlvbikKCiAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQogICAgDQoKICAgIGFjY2VzcyhhbGwpIGZ1biBjaGVja01vbnN0ZXJNYWtlclZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL01vbnN0ZXJNYWtlckNvbGxlY3Rpb24pCgogICAgICByZXR1cm4gdmF1bHRSZWYKICAgIH0KICAgIA0KCiAgICBhY2Nlc3MoYWxsKSBmdW4gY2hlY2tFeGFtcGxlTkZUVmF1bHQoYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZXhpc3RzKC9wdWJsaWMvY2FkZW5jZUV4YW1wbGVORlRDb2xsZWN0aW9uKQoKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICANCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd3R5VGVzdE5GVFZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmV4aXN0cygvcHVibGljL0Zsb3d0eVRlc3RORlRDb2xsZWN0aW9uKQoKICAgICAgcmV0dXJuIHZhdWx0UmVmCiAgICB9CiAgICAKCiAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IHtTdHJpbmc6IEJvb2x9IHsKICAgICAgcmV0dXJuIHsKICAgICJBLmI3MjQ4YmFhMjRhOTVjM2YuRlJDMjBTZW1pTkZUIiA6CiAgICBjaGVja0ZSQzIwU2VtaU5GVFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS4wNDYyNWMyODU5M2Q5NDA4Lm5iYV9ORlQiIDoKICAgIGNoZWNrbmJhX05GVFZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICAsCiAgICAiQS43MjRhOWRhMDAzNDBmMTRjLk1vbnN0ZXJNYWtlciIgOgogICAgY2hlY2tNb25zdGVyTWFrZXJWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuMzkwYjQ3MDVkYTYzMDVjMy5FeGFtcGxlTkZUIiA6CiAgICBjaGVja0V4YW1wbGVORlRWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgLAogICAgIkEuZDljMDJjZGFjY2NiMjVhYi5GbG93dHlUZXN0TkZUIiA6CiAgICBjaGVja0Zsb3d0eVRlc3RORlRWYXVsdChhZGRyZXNzOiBhZGRyZXNzKQogICAgfQogICAgfQogIA=="
            },
            "basic": {
                "accountStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhY2NvdW50U3RvcmFnZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAgYWNjZXNzKGFsbCkgc3RydWN0IFN0b3JhZ2VJbmZvIHsKICAgIGFjY2VzcyhhbGwpICBsZXQgY2FwYWNpdHk6IFVJbnQ2NAogICAgYWNjZXNzKGFsbCkgIGxldCB1c2VkOiBVSW50NjQKICAgIGFjY2VzcyhhbGwpICBsZXQgYXZhaWxhYmxlOiBVSW50NjQKCiAgICBpbml0KGNhcGFjaXR5OiBVSW50NjQsIHVzZWQ6IFVJbnQ2NCwgYXZhaWxhYmxlOiBVSW50NjQpIHsKICAgICAgICBzZWxmLmNhcGFjaXR5ID0gY2FwYWNpdHkKICAgICAgICBzZWxmLnVzZWQgPSB1c2VkCiAgICAgICAgc2VsZi5hdmFpbGFibGUgPSBhdmFpbGFibGUKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcyk6IFN0b3JhZ2VJbmZvIHsKICAgIGxldCBhY2N0ID0gZ2V0QWNjb3VudChhZGRyKQogICAgcmV0dXJuIFN0b3JhZ2VJbmZvKGNhcGFjaXR5OiBhY2N0LnN0b3JhZ2UuY2FwYWNpdHksCiAgICAgICAgICAgIHVzZWQ6IGFjY3Quc3RvcmFnZS51c2VkLAogICAgICAgICAgICBhdmFpbGFibGU6IGFjY3Quc3RvcmFnZS5jYXBhY2l0eSAtIGFjY3Quc3RvcmFnZS51c2VkKQp9",
                "addContractToAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhZGRDb250cmFjdFRvQWNjb3VudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICB0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmcsIGNvZGU6IFN0cmluZykgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29udHJhY3RzLCBBZGRDb250cmFjdCkgJkFjY291bnQpIHsKICAgICAgICBzaWduZXIuY29udHJhY3RzLmFkZChuYW1lOiBuYW1lLCBjb2RlOiBjb2RlLnV0ZjgpCiAgICB9Cn0=",
                "addKey": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhZGRLZXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IENyeXB0bwoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcsIHNpZ25hdHVyZUFsZ29yaXRobTogVUludDgsIGhhc2hBbGdvcml0aG06IFVJbnQ4LCB3ZWlnaHQ6IFVGaXg2NCkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoS2V5cykgJkFjY291bnQpIHsKICAgICAgICBsZXQga2V5ID0gUHVibGljS2V5KAogICAgICAgICAgICBwdWJsaWNLZXk6IHB1YmxpY0tleS5kZWNvZGVIZXgoKSwKICAgICAgICAgICAgc2lnbmF0dXJlQWxnb3JpdGhtOiBTaWduYXR1cmVBbGdvcml0aG0ocmF3VmFsdWU6IHNpZ25hdHVyZUFsZ29yaXRobSkhCiAgICAgICAgKQoKICAgICAgICBzaWduZXIua2V5cy5hZGQoCiAgICAgICAgICAgIHB1YmxpY0tleToga2V5LAogICAgICAgICAgICBoYXNoQWxnb3JpdGhtOiBIYXNoQWxnb3JpdGhtKHJhd1ZhbHVlOiBoYXNoQWxnb3JpdGhtKSEsCiAgICAgICAgICAgIHdlaWdodDogd2VpZ2h0CiAgICAgICAgKQogICAgfQp9",
                "addKeyTemp": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhZGRLZXlUZW1wIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCnRyYW5zYWN0aW9uKHB1YmxpY0tleXM6IFtDcnlwdG8uS2V5TGlzdEVudHJ5XSwgY29udHJhY3RzOiB7U3RyaW5nOiBTdHJpbmd9KSB7CglwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSB8IFN0b3JhZ2UpICZBY2NvdW50KSB7CgoJCWxldCBhY2NvdW50ID0gQWNjb3VudChwYXllcjogc2lnbmVyKQoKCQkvLyBhZGQgYWxsIHRoZSBrZXlzIHRvIHRoZSBhY2NvdW50CgkJZm9yIGtleSBpbiBwdWJsaWNLZXlzIHsKCQkJYWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleS5wdWJsaWNLZXksIGhhc2hBbGdvcml0aG06IGtleS5oYXNoQWxnb3JpdGhtLCB3ZWlnaHQ6IGtleS53ZWlnaHQpCgkJfQoJCQoJCS8vIGFkZCBjb250cmFjdHMgaWYgcHJvdmlkZWQKCQlmb3IgY29udHJhY3QgaW4gY29udHJhY3RzLmtleXMgewoJCQlhY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogY29udHJhY3QsIGNvZGU6IGNvbnRyYWN0c1tjb250cmFjdF0hLmRlY29kZUhleCgpKQoJCX0KCX0KfQ==",
                "createAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVBY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4MTY1NDY1MzM5OTA0MGE2MQppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZjIzM2RjZWU4OGZlMGFiZQoKIHRyYW5zYWN0aW9uKHB1YmxpY0tleXM6IFtDcnlwdG8uS2V5TGlzdEVudHJ5XSwgY29udHJhY3RzOiB7U3RyaW5nOiBTdHJpbmd9LCBmdW5kQW1vdW50OiBVRml4NjQpIHsKICAgIGxldCB0b2tlblJlY2VpdmVyOiAme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9CiAgICBsZXQgc2VudFZhdWx0OiBARnVuZ2libGVUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlIHwgU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICBsZXQgYWNjb3VudCA9IEFjY291bnQocGF5ZXI6IHNpZ25lcikKICAgICAgICBmb3Iga2V5IGluIHB1YmxpY0tleXMgewogICAgICAgICAgICBhY2NvdW50LmtleXMuYWRkKHB1YmxpY0tleToga2V5LnB1YmxpY0tleSwgaGFzaEFsZ29yaXRobToga2V5Lmhhc2hBbGdvcml0aG0sIHdlaWdodDoga2V5LndlaWdodCkKICAgICAgICB9CiAgICAgICAgZm9yIGNvbnRyYWN0IGluIGNvbnRyYWN0cy5rZXlzIHsKICAgICAgICAgICAgYWNjb3VudC5jb250cmFjdHMuYWRkKG5hbWU6IGNvbnRyYWN0LCBjb2RlOiBjb250cmFjdHNbY29udHJhY3RdIS5kZWNvZGVIZXgoKSkKICAgICAgICB9CiAgICAgICAgc2VsZi50b2tlblJlY2VpdmVyID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpID8/IHBhbmljKCJVbmFibGUgdG8gYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSIpCiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQpID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXInJ3MgVmF1bHQhIikKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGZ1bmRBbW91bnQpCiAgICB9CiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnRva2VuUmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQogfQ==",
                "createAccountSdk": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVBY2NvdW50U2RrIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCnRyYW5zYWN0aW9uKHB1YmxpY0tleTogU3RyaW5nLCBzaWduYXR1cmVBbGdvcml0aG06IFVJbnQ4LCBoYXNoQWxnb3JpdGhtOiBVSW50OCwgd2VpZ2h0OiBVRml4NjQsIGNvbnRyYWN0czoge1N0cmluZzogU3RyaW5nfSkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUgfCBTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAgIGxldCBhY2NvdW50ID0gQWNjb3VudChwYXllcjogc2lnbmVyKQoKICAgICAgICBsZXQga2V5ID0gUHVibGljS2V5KAogICAgICAgICAgICBwdWJsaWNLZXk6IHB1YmxpY0tleS5kZWNvZGVIZXgoKSwKICAgICAgICAgICAgc2lnbmF0dXJlQWxnb3JpdGhtOiBTaWduYXR1cmVBbGdvcml0aG0ocmF3VmFsdWU6IHNpZ25hdHVyZUFsZ29yaXRobSkhCiAgICAgICAgKQoKICAgICAgICBhY2NvdW50LmtleXMuYWRkKAogICAgICAgICAgICBwdWJsaWNLZXk6IGtleSwKICAgICAgICAgICAgaGFzaEFsZ29yaXRobTogSGFzaEFsZ29yaXRobShyYXdWYWx1ZTogaGFzaEFsZ29yaXRobSkhLAogICAgICAgICAgICB3ZWlnaHQ6IHdlaWdodAogICAgICAgICkKCiAgICAgICAgZm9yIGNvbnRyYWN0IGluIGNvbnRyYWN0cy5rZXlzIHsKICAgICAgICAgICAgYWNjb3VudC5jb250cmFjdHMuYWRkKG5hbWU6IGNvbnRyYWN0LCBjb2RlOiBjb250cmFjdHNbY29udHJhY3RdIS5kZWNvZGVIZXgoKSkKICAgICAgICB9CiAgICB9Cn0=",
                "getAccountInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2NvdW50SW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBhY2Nlc3MoYWxsKSBzdHJ1Y3QgUmVzdWx0IHsKICBhY2Nlc3MoYWxsKSBsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpIGxldCBiYWxhbmNlOiBVRml4NjQKICBhY2Nlc3MoYWxsKSBsZXQgYXZhaWxhYmxlQmFsYW5jZTogVUZpeDY0CiAgYWNjZXNzKGFsbCkgbGV0IHN0b3JhZ2VVc2VkOiBVSW50NjQKICBhY2Nlc3MoYWxsKSBsZXQgc3RvcmFnZUNhcGFjaXR5OiBVSW50NjQKCiAgaW5pdCgKICAgIGFkZHJlc3M6IEFkZHJlc3MsCiAgICBiYWxhbmNlOiBVRml4NjQsCiAgICBhdmFpbGFibGVCYWxhbmNlOiBVRml4NjQsCiAgICBzdG9yYWdlVXNlZDogVUludDY0LAogICAgc3RvcmFnZUNhcGFjaXR5OiBVSW50NjQKICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYuYmFsYW5jZSA9IGJhbGFuY2UKICAgIHNlbGYuYXZhaWxhYmxlQmFsYW5jZSA9IGF2YWlsYWJsZUJhbGFuY2UKICAgIHNlbGYuc3RvcmFnZVVzZWQgPSBzdG9yYWdlVXNlZAogICAgc2VsZi5zdG9yYWdlQ2FwYWNpdHkgPSBzdG9yYWdlQ2FwYWNpdHkKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBSZXN1bHQgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHJldHVybiBSZXN1bHQoCiAgICBhZGRyZXNzOiBhY2NvdW50LmFkZHJlc3MsCiAgICBiYWxhbmNlOiBhY2NvdW50LmJhbGFuY2UsCiAgICBhdmFpbGFibGVCYWxhbmNlOiBhY2NvdW50LmF2YWlsYWJsZUJhbGFuY2UsCiAgICBzdG9yYWdlVXNlZDogYWNjb3VudC5zdG9yYWdlLnVzZWQsCiAgICBzdG9yYWdlQ2FwYWNpdHk6IGFjY291bnQuc3RvcmFnZS5jYXBhY2l0eQogICkKfQ==",
                "getAccountMinFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2NvdW50TWluRmxvdyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogVUZpeDY0IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICByZXR1cm4gYWNjb3VudC5iYWxhbmNlIC0gYWNjb3VudC5hdmFpbGFibGVCYWxhbmNlCn0=",
                "getAccountTotalFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2NvdW50VG90YWxGbG93QmFsYW5jZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCi8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhlZTgyODU2YmYyMGUyYWE2Ci8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDBhZTUzY2I2ZTNmNDJhNzkKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4ZjhkNmUwNTg2YjBhMjBjNwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCB1bmxvY2tlZFZhdWx0ID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvZmxvd1Rva2VuQmFsYW5jZSkhCiAgICAgIC5ib3Jyb3coKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IEJhbGFuY2UgcmVmZXJlbmNlIHRvIHRoZSBWYXVsdCIpCiAgICBsZXQgdW5sb2NrZWRCYWxhbmNlID0gdW5sb2NrZWRWYXVsdC5iYWxhbmNlCiAgICAgICAgCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9DYXAgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZ2V0CiAgICAgIDwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPgogICAgICAoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKICAgIGlmIGxvY2tlZEFjY291bnRJbmZvQ2FwID09IG5pbCB8fCAhKGxvY2tlZEFjY291bnRJbmZvQ2FwIS5jaGVjaygpKSB7CiAgICAgICAgcmV0dXJuIHVubG9ja2VkQmFsYW5jZQogICAgfQogICAgCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9SZWYgPSBsb2NrZWRBY2NvdW50SW5mb0NhcCEuYm9ycm93KCkhCiAgICBsZXQgbG9ja2VkQmFsYW5jZSA9IGxvY2tlZEFjY291bnRJbmZvUmVmLmdldExvY2tlZEFjY291bnRCYWxhbmNlKCkKICAgIAogICAgcmV0dXJuIGxvY2tlZEJhbGFuY2UgKyB1bmxvY2tlZEJhbGFuY2UKfQ==",
                "getAccountTotalLockedFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2NvdW50VG90YWxMb2NrZWRGbG93QmFsYW5jZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCgovLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZWU4Mjg1NmJmMjBlMmFhNgovLyBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgwYWU1M2NiNmUzZjQyYTc5Ci8vIGltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweGY4ZDZlMDU4NmIwYTIwYzcKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBVRml4NjQgewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCgogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvQ2FwID0gYWNjb3VudAogICAgICAuY2FwYWJpbGl0aWVzLmdldAogICAgICA8JkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcj4KICAgICAgKExvY2tlZFRva2Vucy5Mb2NrZWRBY2NvdW50SW5mb1B1YmxpY1BhdGgpCiAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgIHJldHVybiBVRml4NjQoMCkKICAgIH0KICAgIAogICAgbGV0IGxvY2tlZEFjY291bnRJbmZvUmVmID0gbG9ja2VkQWNjb3VudEluZm9DYXAhLmJvcnJvdygpIQogICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICAKICAgIHJldHVybiBsb2NrZWRCYWxhbmNlCn0=",
                "getAccountTotalUnlockedFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2NvdW50VG90YWxVbmxvY2tlZEZsb3dCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIC8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCi8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgovLyBpbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHhMb2NrZWRUb2tlbnMKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhlZTgyODU2YmYyMGUyYWE2CmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDBhZTUzY2I2ZTNmNDJhNzkKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4ZjhkNmUwNTg2YjBhMjBjNwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICBsZXQgdW5sb2NrZWRWYXVsdCA9IGFjY291bnQKICAgICAgLmNhcGFiaWxpdGllcy5nZXQ8JkZsb3dUb2tlbi5WYXVsdD4oL3B1YmxpYy9mbG93VG9rZW5CYWxhbmNlKSEKICAgICAgLmJvcnJvdygpCiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQmFsYW5jZSByZWZlcmVuY2UgdG8gdGhlIFZhdWx0IikKICAgIGxldCB1bmxvY2tlZEJhbGFuY2UgPSB1bmxvY2tlZFZhdWx0LmJhbGFuY2UKCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9DYXAgPSBhY2NvdW50CiAgICAgIC5jYXBhYmlsaXRpZXMuZ2V0CiAgICAgIDwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPgogICAgICAoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKICAgIGlmIGxvY2tlZEFjY291bnRJbmZvQ2FwID09IG5pbCB8fCAhKGxvY2tlZEFjY291bnRJbmZvQ2FwIS5jaGVjaygpKSB7CiAgICAgICAgcmV0dXJuIHVubG9ja2VkQmFsYW5jZQogICAgfQogICAgCiAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9SZWYgPSBsb2NrZWRBY2NvdW50SW5mb0NhcCEuYm9ycm93KCkhCiAgICBsZXQgbG9ja2VkQmFsYW5jZSA9IGxvY2tlZEFjY291bnRJbmZvUmVmLmdldExvY2tlZEFjY291bnRCYWxhbmNlKCkKICAgIGxldCBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRVbmxvY2tMaW1pdCgpCgogICAgaWYgbG9ja2VkQmFsYW5jZSA9PSBVRml4NjQoMCkgewogICAgICAgIHJldHVybiB1bmxvY2tlZEJhbGFuY2UKICAgIH0KCiAgICBpZiBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgPiBsb2NrZWRCYWxhbmNlIHsKICAgICAgICByZXR1cm4gdW5sb2NrZWRCYWxhbmNlICsgbG9ja2VkQmFsYW5jZQogICAgfQoKICAgIHJldHVybiBsb2NrZWRCYWxhbmNlVW5sb2NrZWQgKyB1bmxvY2tlZEJhbGFuY2UKfQ==",
                "getFindAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRGaW5kQWRkcmVzcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRklORCBmcm9tIDB4RmluZAovL0NoZWNrIHRoZSBzdGF0dXMgb2YgYSBmaW4gdXNlcgphY2Nlc3MoYWxsKSBmdW4gbWFpbihuYW1lOiBTdHJpbmcpIDogQWRkcmVzcz8gewogICAgbGV0IHN0YXR1cyA9IEZJTkQuc3RhdHVzKG5hbWUpCiAgICByZXR1cm4gc3RhdHVzLm93bmVyCn0=",
                "getFindDomainByAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRGaW5kRG9tYWluQnlBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGSU5EIGZyb20gMHhGaW5kCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKSA6IFN0cmluZz97CiAgICByZXR1cm4gRklORC5yZXZlcnNlTG9va3VwKGFkZHJlc3MpCn0=",
                "getFlownsAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRGbG93bnNBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93bnMgZnJvbSAweEZsb3ducwppbXBvcnQgRG9tYWlucyBmcm9tIDB4RG9tYWlucwoKYWNjZXNzKGFsbCkgZnVuIG1haW4obmFtZTogU3RyaW5nLCByb290OiBTdHJpbmcpIDogQWRkcmVzcz8gewogICAgbGV0IHByZWZpeCA9ICIweCIKICAgIGxldCByb290SGFoc2ggPSBGbG93bnMuaGFzaChub2RlOiAiIiwgbGFibGU6IHJvb3QpCiAgICBsZXQgbmFtZWhhc2ggPSBwcmVmaXguY29uY2F0KEZsb3ducy5oYXNoKG5vZGU6IHJvb3RIYWhzaCwgbGFibGU6IG5hbWUpKQogICAgdmFyIGFkZHJlc3MgPSBEb21haW5zLmdldFJlY29yZHMobmFtZWhhc2gpCiAgICByZXR1cm4gYWRkcmVzcwp9",
                "getFlownsDomainsByAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRGbG93bnNEb21haW5zQnlBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBEb21haW5zIGZyb20gMHhEb21haW5zCi8vIGFkZHJlc3M6IEZsb3cgYWRkcmVzcwoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtEb21haW5zLkRvbWFpbkRldGFpbF0gewogICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICBsZXQgY29sbGVjdGlvbkNhcCA9IGFjY291bnQuZ2V0Q2FwYWJpbGl0eTwme0RvbWFpbnMuQ29sbGVjdGlvblB1YmxpY30+KERvbWFpbnMuQ29sbGVjdGlvblB1YmxpY1BhdGgpCiAgICBsZXQgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25DYXAuYm9ycm93KCkhCiAgICBsZXQgZG9tYWluczpbRG9tYWlucy5Eb21haW5EZXRhaWxdID0gW10KICAgIGxldCBpZHMgPSBjb2xsZWN0aW9uLmdldElEcygpCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgICAgbGV0IGRvbWFpbiA9IGNvbGxlY3Rpb24uYm9ycm93RG9tYWluKGlkOiBpZCkKICAgICAgICBsZXQgZGV0YWlsID0gZG9tYWluLmdldERldGFpbCgpCiAgICAgICAgZG9tYWlucy5hcHBlbmQoZGV0YWlsKQogICAgfQoKICAgIHJldHVybiBkb21haW5zCn0=",
                "getStorageInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdG9yYWdlSW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAgYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcyk6IHtTdHJpbmc6IFVJbnQ2NH0gewogICAgbGV0IGFjY3QgPSBnZXRBY2NvdW50KGFkZHIpCiAgICBsZXQgcmV0OiB7U3RyaW5nOiBVSW50NjR9ID0ge30KICAgIHJldFsiY2FwYWNpdHkiXSA9IGFjY3Quc3RvcmFnZS5jYXBhY2l0eQogICAgcmV0WyJ1c2VkIl0gPSBhY2N0LnN0b3JhZ2UudXNlZAogICAgcmV0WyJhdmFpbGFibGUiXSA9IGFjY3Quc3RvcmFnZS5jYXBhY2l0eSAtICBhY2N0LnN0b3JhZ2UudXNlZAogICAgcmV0dXJuIHJldAp9",
                "getTokenBalanceWithModel": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRUb2tlbkJhbGFuY2VXaXRoTW9kZWwgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKCiAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9Pig8VG9rZW5CYWxhbmNlUGF0aD4pCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBCYWxhbmNlIGNhcGFiaWxpdHkiKQoKICAgIHJldHVybiB2YXVsdFJlZi5iYWxhbmNlCn0=",
                "isKeyHasFullAuth": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBpc0tleUhhc0Z1bGxBdXRoIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwdWJsaWNLZXk6IFN0cmluZyk6IEJvb2wgewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHZhciBmbGFnID0gZmFsc2UKICBmdW4gYWNjb3VudEZuKGFjY291bnRLZXk6IEFjY291bnRLZXkpOiBCb29sIHsKICAgIGxldCBrZXkgPSBTdHJpbmcuZW5jb2RlSGV4KGFjY291bnRLZXkucHVibGljS2V5LnB1YmxpY0tleSkKICAgIGlmIHB1YmxpY0tleSA9PSBrZXkgewogICAgICBmbGFnID0gYWNjb3VudEtleS53ZWlnaHQgPj0gVUZpeDY0KDEwMDApICYmICFhY2NvdW50S2V5LmlzUmV2b2tlZAogICAgfQogICAgcmV0dXJuIGZhbHNlCiAgfQogIGFjY291bnQua2V5cy5mb3JFYWNoKGFjY291bnRGbikKCiAgcmV0dXJuIGZsYWcKfQo=",
                "isKeysHasFullAuth": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBpc0tleXNIYXNGdWxsQXV0aCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcHVibGljS2V5czogW1N0cmluZ10pOiBCb29sIHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICB2YXIgd2VpZ2h0OiBVRml4NjQgPSAwLjAKICBmdW4gYWNjb3VudEZuKGFjY291bnRLZXk6IEFjY291bnRLZXkpOiBCb29sIHsKICAgIGxldCBrZXkgPSBTdHJpbmcuZW5jb2RlSGV4KGFjY291bnRLZXkucHVibGljS2V5LnB1YmxpY0tleSkKICAgIGlmIHB1YmxpY0tleXMuY29udGFpbnMoa2V5KSAmJiAhYWNjb3VudEtleS5pc1Jldm9rZWQgewogICAgICB3ZWlnaHQgPSB3ZWlnaHQgKyBhY2NvdW50S2V5LndlaWdodCAKICAgIH0KICAgIHJldHVybiBmYWxzZQogIH0KICBhY2NvdW50LmtleXMuZm9yRWFjaChhY2NvdW50Rm4pCgogIHJldHVybiB3ZWlnaHQgPj0gVUZpeDY0KDEwMDApCn0K",
                "isLockedFlowEnable": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBpc0xvY2tlZEZsb3dFbmFibGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogQm9vbCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIHJldHVybiBhY2NvdW50LmNhcGFiaWxpdGllcy5leGlzdHMoTG9ja2VkVG9rZW5zLkxvY2tlZEFjY291bnRJbmZvUHVibGljUGF0aCkKfQ==",
                "isTokenStorageEnabled": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBpc1Rva2VuU3RvcmFnZUVuYWJsZWQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcykgOiBCb29sIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAKICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmV4aXN0cyg8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgbGV0IGJhbGFuY2UgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuQmFsYW5jZVBhdGg+KQoKICAgIHJldHVybiByZWNlaXZlciAmJiBiYWxhbmNlCn0=",
                "queryCustomFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBxdWVyeUN1c3RvbUZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGNvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgY29udHJhY3ROYW1lOiBTdHJpbmcpOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YSB7CiAgICAKICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KGNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IGNvbnRyYWN0TmFtZSkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgIHJldHVybiB2YXVsdERhdGEKfQ==",
                "queryCustomNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBxdWVyeUN1c3RvbU5GVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhNZXRhZGF0YVZpZXdzCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihjb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIGNvbnRyYWN0TmFtZTogU3RyaW5nKTogTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YSB7CgogICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQoY29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogY29udHJhY3ROYW1lKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAKICAgIHJldHVybiBjb2xsZWN0aW9uRGF0YQp9",
                "queryFlowBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBxdWVyeUZsb3dCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgoKYWNjZXNzKGFsbCkgZnVuIGNoZWNrRmxvd1Rva2VuQmFsYW5jZShhZGRyZXNzOiBBZGRyZXNzKSA6IFVGaXg2NCB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCB2YXVsdFJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KC9wdWJsaWMvZmxvd1Rva2VuQmFsYW5jZSkKICAgID8/IG5pbAoKICAgIAogICAgaWYgdmF1bHRSZWYgIT0gbmlsIHsKICAgICAgICByZXR1cm4gdmF1bHRSZWYhLmJhbGFuY2UKICAgIH0KICAgIAogICAgcmV0dXJuIDAuMAp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyczogW0FkZHJlc3NdKTogW1VGaXg2NF0gewogICAgbGV0IGJhbHM6IFtVRml4NjRdID0gW10KCiAgICBmb3IgYWRkciBpbiBhZGRycyB7CiAgICAgICAgbGV0IGJhbCA9IGNoZWNrRmxvd1Rva2VuQmFsYW5jZShhZGRyZXNzOiBhZGRyKQogICAgICAgIGJhbHMuYXBwZW5kKGJhbCkKICAgIH0KICAgIAogICAgcmV0dXJuIGJhbHMKfQ==",
                "removeAccountKeyByIndex": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICByZW1vdmVBY2NvdW50S2V5QnlJbmRleCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICB0cmFuc2FjdGlvbihrZXlJbmRleDogSW50KSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIHNpZ25lci5rZXlzLnJldm9rZShrZXlJbmRleDoga2V5SW5kZXgpCiAgICB9Cn0=",
                "removeContractFromAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICByZW1vdmVDb250cmFjdEZyb21BY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIHRyYW5zYWN0aW9uKG5hbWU6IFN0cmluZykgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoUmVtb3ZlQ29udHJhY3QpICZBY2NvdW50KSB7CiAgICAgICAgc2lnbmVyLmNvbnRyYWN0cy5yZW1vdmUobmFtZTogbmFtZSkKICAgIH0KfQ==",
                "revokeKey": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICByZXZva2VLZXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgdHJhbnNhY3Rpb24oaW5kZXg6IEludCkgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoS2V5cykgJkFjY291bnQpIHsKICAgICAgICAvLyBHZXQgYSBrZXkgZnJvbSBhbiBhdXRoIGFjY291bnQuCiAgICAgICAgbGV0IGtleUEgPSBzaWduZXIua2V5cy5yZXZva2Uoa2V5SW5kZXg6IGluZGV4KQogICAgfQp9",
                "test": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0ZXN0IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDdlNjBkZjA0MmE5YzA4NjgKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0LCByZWNpcGllbnQ6IEFkZHJlc3MpIHsKCiAgICAvLyBUaGUgVmF1bHQgcmVzb3VyY2UgdGhhdCBob2xkcyB0aGUgdG9rZW5zIHRoYXQgYXJlIGJlaW5nIHRyYW5zZmVyZWQKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlLCBCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9",
                "updateContractOfAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB1cGRhdGVDb250cmFjdE9mQWNjb3VudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICB0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmcsIGNvZGU6IFN0cmluZykgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoVXBkYXRlQ29udHJhY3QpICZBY2NvdW50KSB7CiAgICAgICAgc2lnbmVyLmNvbnRyYWN0cy51cGRhdGUobmFtZTogbmFtZSwgY29kZTogY29kZS51dGY4KQogICAgfQp9",
                "verifyUserSignature": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB2ZXJpZnlVc2VyU2lnbmF0dXJlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCmFjY2VzcyhhbGwpIGZ1biBtYWluKAogICAgbWVzc2FnZTogU3RyaW5nLAogICAgcmF3UHVibGljS2V5czogW1N0cmluZ10sCiAgICB3ZWlnaHRzOiBbVUZpeDY0XSwKICAgIHNpZ25BbGdvczogW1VJbnQ4XSwKICAgIGhhc2hBbGdvczogW1VJbnQ4XSwKICAgIHNpZ25hdHVyZXM6IFtTdHJpbmddLAopOiBCb29sIHsKCiAgICBsZXQga2V5TGlzdCA9IENyeXB0by5LZXlMaXN0KCkKCiAgICB2YXIgaSA9IDAKICAgIGZvciByYXdQdWJsaWNLZXkgaW4gcmF3UHVibGljS2V5cyB7CiAgICBrZXlMaXN0LmFkZCgKICAgICAgICBQdWJsaWNLZXkoCiAgICAgICAgcHVibGljS2V5OiByYXdQdWJsaWNLZXkuZGVjb2RlSGV4KCksCiAgICAgICAgc2lnbmF0dXJlQWxnb3JpdGhtOiBTaWduYXR1cmVBbGdvcml0aG0ocmF3VmFsdWU6IHNpZ25BbGdvc1tpXSkhCiAgICAgICAgKSwKICAgICAgICBoYXNoQWxnb3JpdGhtOiBIYXNoQWxnb3JpdGhtKHJhd1ZhbHVlOiBoYXNoQWxnb3NbaV0pISwKICAgICAgICB3ZWlnaHQ6IHdlaWdodHNbaV0sCiAgICApCiAgICBpID0gaSArIDEKICAgIH0KCiAgICBsZXQgc2lnbmF0dXJlU2V0OiBbQ3J5cHRvLktleUxpc3RTaWduYXR1cmVdID0gW10KCiAgICB2YXIgaiA9IDAKICAgIGZvciBzaWduYXR1cmUgaW4gc2lnbmF0dXJlcyB7CiAgICBzaWduYXR1cmVTZXQuYXBwZW5kKAogICAgICAgIENyeXB0by5LZXlMaXN0U2lnbmF0dXJlKAogICAgICAgICAgICBrZXlJbmRleDogaiwKICAgICAgICAgICAgc2lnbmF0dXJlOiBzaWduYXR1cmUuZGVjb2RlSGV4KCkKICAgICAgICApCiAgICApCiAgICAgICAgaiA9IGogKyAxCiAgICB9CgogICAgbGV0IHNpZ25lZERhdGEgPSBtZXNzYWdlLmRlY29kZUhleCgpCgogICAgcmV0dXJuIGtleUxpc3QudmVyaWZ5KAogICAgICAgIHNpZ25hdHVyZVNldDogc2lnbmF0dXJlU2V0LAogICAgICAgIHNpZ25lZERhdGE6IHNpZ25lZERhdGEsCiAgICAgICAgZG9tYWluU2VwYXJhdGlvblRhZzogIkZMT1ctVjAuMC11c2VyIgogICAgKQp9",
                "withdrawAllUnlockedFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB3aXRoZHJhd0FsbFVubG9ja2VkRmxvdyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCi8vIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhlZTgyODU2YmYyMGUyYWE2Ci8vIGltcG9ydCBGbG93VG9rZW4gZnJvbSAweDBhZTUzY2I2ZTNmNDJhNzkKLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4ZjhkNmUwNTg2YjBhMjBjNwoKdHJhbnNhY3Rpb24oKSB7CgogICAgbGV0IGhvbGRlclJlZjogYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyCiAgICBsZXQgdmF1bHRSZWY6ICZGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhbW91bnQ6IFVGaXg2NAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgICBzZWxmLmhvbGRlclJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KGZyb206IExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBUb2tlbkhvbGRlciIpCgoJCQkJc2VsZi52YXVsdFJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1Rva2VuLlZhdWx0Pihmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgZmxvdyB0b2tlbiB2YXVsdCByZWYiKQoKICAgICAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9DYXAgPSBzaWduZXIKICAgICAgICAuY2FwYWJpbGl0aWVzLmdldDwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPgogICAgICAgIChMb2NrZWRUb2tlbnMuTG9ja2VkQWNjb3VudEluZm9QdWJsaWNQYXRoKQoKICAgICAgICBpZiBsb2NrZWRBY2NvdW50SW5mb0NhcCA9PSBuaWwgfHwgIShsb2NrZWRBY2NvdW50SW5mb0NhcCEuY2hlY2soKSkgewogICAgICAgICAgICBwYW5pYygiQ291bGQgbm90IGdldCBmbG93IGxvY2tlZCB0b2tlbiB2YXVsdCIpCiAgICAgICAgfQoKICAgICAgICBsZXQgbG9ja2VkQWNjb3VudEluZm9SZWYgPSBsb2NrZWRBY2NvdW50SW5mb0NhcCEuYm9ycm93KCkhCiAgICAgICAgbGV0IGxvY2tlZEJhbGFuY2UgPSBsb2NrZWRBY2NvdW50SW5mb1JlZi5nZXRMb2NrZWRBY2NvdW50QmFsYW5jZSgpCiAgICAgICAgbGV0IGxvY2tlZEJhbGFuY2VVbmxvY2tlZCA9IGxvY2tlZEFjY291bnRJbmZvUmVmLmdldFVubG9ja0xpbWl0KCkKCiAgICAgICAgLy8gaWYgbG9ja2VkQmFsYW5jZSA9PSBVRml4NjQoMCkgewogICAgICAgIC8vICAgICBwYW5pYygiTm90IGVub3VnaCBhbW91bnQgdG8gd2l0aGRyYXciKQogICAgICAgIC8vIH0KCiAgICAgICAgc2VsZi5hbW91bnQgPSBsb2NrZWRCYWxhbmNlVW5sb2NrZWQKICAgIAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYudmF1bHRSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuaG9sZGVyUmVmLndpdGhkcmF3KGFtb3VudDogc2VsZi5hbW91bnQpKQogICAgfQp9",
                "withdrawUnlockedFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB3aXRoZHJhd1VubG9ja2VkRmxvdyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAvLyBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgovLyBpbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KLy8gaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4TG9ja2VkVG9rZW5zCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4ZWU4Mjg1NmJmMjBlMmFhNgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgwYWU1M2NiNmUzZjQyYTc5CmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweGY4ZDZlMDU4NmIwYTIwYzcKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CgogICAgbGV0IGhvbGRlclJlZjogYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAgJkxvY2tlZFRva2Vucy5Ub2tlbkhvbGRlcgogICAgbGV0IHZhdWx0UmVmOiAmRmxvd1Rva2VuLlZhdWx0CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5ob2xkZXJSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gVG9rZW5Ib2xkZXIiKQoKICAgICAgICBzZWxmLnZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBmbG93IHRva2VuIHZhdWx0IHJlZiIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi52YXVsdFJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5ob2xkZXJSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpKQogICAgfQp9"
            },
            "bridge": {
                "batchBridgeNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaEJyaWRnZU5GVEZyb21Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRDb250cmFjdEFkZHJlc3M6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyBob3N0aW5nIHRoZSBORlQtZGVmaW5pbmcgQ2FkZW5jZSBjb250cmFjdAovLy8gQHBhcmFtIG5mdENvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWRzOiBbVUludDI1Nl0pIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkM3MjEgY29udHJhY3QgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIE5GVCB0eXBlCiAgICAgICAgc2VsZi5uZnRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5mdENvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogbmZ0Q29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiTkZUIgogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIikKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24gLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25DYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvbGxlY3Rpb25DYXAsIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgY29sbGVjdGlvbiBmcm9tIHN0b3JhZ2UgcGF0aCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBicmlkZ2UgZmVlIC0gYnJpZGdpbmcgZnJvbSBFVk0gY29uc3VtZXMgbm8gc3RvcmFnZSwgc28gZmxhdCBmZWUKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkgKiBVRml4NjQoaWRzLmxlbmd0aCkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAgICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdORlQoCiAgICAgICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2VsZi5jb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIE5GVCBpbnRvIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "batchBridgeNFTFromEvmV2": "",
                "batchBridgeNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaEJyaWRnZU5GVFRvRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKG5mdENvbnRyYWN0QWRkcmVzczogQWRkcmVzcywgbmZ0Q29udHJhY3ROYW1lOiBTdHJpbmcsIGlkczogW1VJbnQ2NF0pIHsKICAgIAogICAgbGV0IG5mdHM6IEB7VUludDY0IDoge05vbkZ1bmdpYmxlVG9rZW4uTkZUfX0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICBzZWxmLm5mdHMgPC0ge30KICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgTkZUICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIE5GVCBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgZm9yIGlkIGluIGlkcyB7CiAgICAgICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvbi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICAgICAgc2VsZi5uZnRzW2lkXSA8LSEgbmZ0CiAgICAgICAgfQogICAgICAgIC8vIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwICogVUZpeDY0KGlkcy5sZW5ndGgpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICB3aGlsZSBpZHggPCBpZHMubGVuZ3RoIHsKICAgICAgICAgICAgbGV0IG5mdElkID0gaWRzW2lkeF0hCiAgICAgICAgICAgIGxldCBuZnQgPC0gc2VsZi5uZnRzLnJlbW92ZShrZXk6IG5mdElkKSEgYXMgQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgICAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCggCiAgICAgICAgICAgICAgICBuZnQ6IDwtIG5mdCEsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYubmZ0cwogICAgfQp9Cg==",
                "batchBridgeNFTToEvmAddress": "",
                "batchBridgeNFTToEvmV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaEJyaWRnZU5GVFRvRXZtVjIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgoKCi8vLyBCcmlkZ2VzIGFuIE5GVCBmcm9tIHRoZSBzaWduZXIncyBjb2xsZWN0aW9uIGluIENhZGVuY2UgdG8gdGhlIHNpZ25lcidzIENPQSBpbiBGbG93RVZNCi8vLwovLy8gTk9URTogVGhpcyB0cmFuc2FjdGlvbiBhbHNvIG9uYm9hcmRzIHRoZSBORlQgdG8gdGhlIGJyaWRnZSBpZiBuZWNlc3Nhcnkgd2hpY2ggbWF5IGluY3VyIGFkZGl0aW9uYWwgZmVlcwovLy8gICAgIHRoYW4gYnJpZGdpbmcgYW4gYXNzZXQgdGhhdCBoYXMgYWxyZWFkeSBiZWVuIG9uYm9hcmRlZC4KLy8vCi8vLyBAcGFyYW0gbmZ0SWRlbnRpZmllcjogVGhlIENhZGVuY2UgdHlwZSBpZGVudGlmaWVyIG9mIHRoZSBORlQgdG8gYnJpZGdlIC0gZS5nLiBuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIKLy8vIEBwYXJhbSBpZDogVGhlIENhZGVuY2UgTkZULmlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgICAKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgcmVxdWlyZXNPbmJvYXJkaW5nOiBCb29sCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgICAgIAogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIE5GVCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgTkZUICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIE5GVCBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkc1swXSkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHZhciBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiA0MDBfMDAwKSArIChGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUgKiBVRml4NjQoaWRzLmxlbmd0aCkpCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBORlQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcobmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkJyaWRnZSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMgYXNzZXQgdHlwZSIpCiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICBhcHByb3hGZWUgPSBhcHByb3hGZWUgKyBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUKICAgICAgICB9CgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgbGV0IHNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC0gbmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKCiAgICAgICAgdmFyIGlkeCA9IDAKICAgICAgICB3aGlsZSBpZHggPCBpZHMubGVuZ3RoIHsKICAgICAgICAgICAgIGlmIGlkeCA9PSAwIHsKICAgICAgICAgICAgICAgIGlkeCA9IGlkeCArIDEKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgbGV0IG5mdElkID0gaWRzW2lkeF0hCiAgICAgICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvbi53aXRoZHJhdyh3aXRoZHJhd0lEOiBuZnRJZCkhIGFzIEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9CiAgICAgICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgICAgICBuZnQ6IDwtIG5mdCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchEvmAddressRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaEV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgRVZNIGNvbnRyYWN0IG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBldm1BZGRyZXNzZXM6IEFycmF5IG9mIGhleC1lbmNvZGVkIGFkZHJlc3Mgb2YgdGhlIEVWTSBjb250cmFjdCBhcyBhIFN0cmluZyB3aXRob3V0IDB4IHByZWZpeCB0byBjaGVjayBmb3IKLy8vICAgICBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29udHJhY3QgcmVxdWlyZXMgb25ib2FyZGluZyB0byB0aGUgRmxvd0VWTUJyaWRnZSBpZiB0aGUgdHlwZSBpcyBicmlkZ2VhYmxlLCBvdGhlcndpc2UgbmlsCi8vLyAgICAgaW5kZXhlZCBvbiB0aGUgaGV4LWVuY29kZWQgYWRkcmVzcyBvZiB0aGUgRVZNIGNvbnRyYWN0IHdpdGhvdXQgMHggcHJlZml4Ci8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihldm1BZGRyZXNzZXM6IFtTdHJpbmddKToge1N0cmluZzogQm9vbD99IHsKICAgIGxldCByZXN1bHRzOiB7U3RyaW5nOiBCb29sP30gPSB7fQogICAgZm9yIGFkZHJlc3NIZXggaW4gZXZtQWRkcmVzc2VzIHsKICAgICAgICBpZiByZXN1bHRzW2FkZHJlc3NIZXhdICE9IG5pbCB7CiAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgfQogICAgICAgIGlmIGxldCBhZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzc0hleCkgewogICAgICAgICAgICBsZXQgcmVxdWlyZXNPbmJvYXJkaW5nID0gRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3MpCiAgICAgICAgICAgIHJlc3VsdHMuaW5zZXJ0KGtleTogYWRkcmVzc0hleCwgcmVxdWlyZXNPbmJvYXJkaW5nKQogICAgICAgIH0KICAgIH0KICAgIHJldHVybiByZXN1bHRzCn0K",
                "batchIdentifierRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaElkZW50aWZpZXJSZXF1aXJlc09uYm9hcmRpbmcgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihpZGVudGlmaWVyczogW1N0cmluZ10pOiB7U3RyaW5nOiBCb29sP30gewogICAgbGV0IHJlc3VsdHM6IHtTdHJpbmc6IEJvb2w/fSA9IHt9CgogICAgZm9yIGlkZW50aWZpZXIgaW4gaWRlbnRpZmllcnMgewogICAgICAgIGlmIHJlc3VsdHNbaWRlbnRpZmllcl0gIT0gbmlsIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICB9CiAgICAgICAgbGV0IHR5cGU6IFR5cGUgPSBDb21wb3NpdGVUeXBlKGlkZW50aWZpZXIpID8/IHBhbmljKCJJbnZhbGlkIHR5cGUgaWRlbnRpZmllciIpCiAgICAgICAgcmVzdWx0cy5pbnNlcnQoa2V5OiBpZGVudGlmaWVyLCBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcodHlwZSkpCiAgICB9CiAgICByZXR1cm4gcmVzdWx0cwp9Cg==",
                "batchOnboardByEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaE9uYm9hcmRCeUV2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgTkZUIHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIE5GVHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIE5GVCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gYWRkcmVzc2VzQXNIZXg6IEFycmF5IG9mIEVWTSBjb250cmFjdCBhZGRyZXNzZXMgKGFzIGhleCBzdHJpbmcgd2l0aG91dCAweCBwcmVmaXgpIGRlZmluaW5nIHRoZSAKLy8vICAgICBicmlkZ2VhYmxlIGFzc2V0IHRvIGJlIG9uYm9hcmRlZAovLy8KdHJhbnNhY3Rpb24oYWRkcmVzc2VzQXNIZXg6IFtTdHJpbmddKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQoYWRkcmVzc2VzQXNIZXgubGVuZ3RoKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihwcm92aWRlckxpbWl0KQogICAgICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBJdGVyYXRlIG92ZXIgcHJvdmlkZWQgYXJyYXkKICAgICAgICBmb3IgYWRkcmVzc0hleCBpbiBhZGRyZXNzZXNBc0hleCB7CiAgICAgICAgICAgIC8vIENvbnZlcnQgaGV4IHN0cmluZyB0byBFVk1BZGRyZXNzCiAgICAgICAgICAgIGxldCBhZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzc0hleCkKICAgICAgICAgICAgLy8gQ29udGludWUgaWYgdGhlIGhleCBpcyBub3QgYSB2YWxpZCBFVk0gYWRkcmVzcyBvciBpZiB0aGUgYWRkcmVzcyBpcyBhbHJlYWR5IG9uYm9hcmRlZAogICAgICAgICAgICBpZiBhZGRyZXNzID09IG5pbCB8fCBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzcyEpICE9IHRydWUgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQoKICAgICAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlFVk1BZGRyZXNzKAogICAgICAgICAgICAgICAgYWRkcmVzcyEsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchOnboardByIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaE9uYm9hcmRCeUlkZW50aWZpZXIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBhc3NldCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBhc3NldHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIGFzc2V0IHRvIEVWTQovLy8KLy8vIEBwYXJhbSB0eXBlczogVGhlIENhZGVuY2UgdHlwZXMgb2YgdGhlIGJyaWRnZWFibGUgYXNzZXQgdG8gb25ib2FyZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbihpZGVudGlmaWVyczogW1N0cmluZ10pIHsKCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICAvLyBTZXQgYSB3aXRoZHJhd2FsIGxpbWl0IGZvciB0aGUgcHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJMaW1pdCA9IEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSAqIFVGaXg2NCh0eXBlcy5sZW5ndGgpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKHByb3ZpZGVyTGltaXQpCiAgICAgICAgLy8gQ3JlYXRlIFNjb3BlZEZUUHJvdmlkZXIgdG8gZXhwaXJlIGp1c3QgYWZ0ZXIgdGhpcyB0cmFuc2FjdGlvbgogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGZvciBpZGVudGlmaWVycyBpbiBpZGVudGlmaWVycyB7IAogICAgICAgICAgICBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgPz8gcGFuaWMoIkludmFsaWQgdHlwZSBpZGVudGlmaWVyIikKICAgICAgICAgICAgLy8gQ29udGludWUgb24gaWYgdGhlIHR5cGUgZG9lcyBub3QgcmVxdWlyZSBvbmJvYXJkaW5nCiAgICAgICAgICAgIGlmIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSAhPSB0cnVlIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gT25ib2FyZCB0aGUgYXNzZXQgVHlwZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICB0eXBlLAogICAgICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICAgICApCiAgICAgICAgfQogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "batchOnboardByType": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaE9uYm9hcmRCeVR5cGUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIHRoZSBhc3NldCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBhc3NldHMgYmV0d2VlbiBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIGFzc2V0IHRvIEVWTQovLy8KLy8vIEBwYXJhbSB0eXBlczogVGhlIENhZGVuY2UgdHlwZXMgb2YgdGhlIGJyaWRnZWFibGUgYXNzZXQgdG8gb25ib2FyZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbih0eXBlczogW1R5cGVdKSB7CgogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgLy8gU2V0IGEgd2l0aGRyYXdhbCBsaW1pdCBmb3IgdGhlIHByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQodHlwZXMubGVuZ3RoKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihwcm92aWRlckxpbWl0KQogICAgICAgIC8vIENyZWF0ZSBTY29wZWRGVFByb3ZpZGVyIHRvIGV4cGlyZSBqdXN0IGFmdGVyIHRoaXMgdHJhbnNhY3Rpb24KICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBmb3IgdHlwZSBpbiB0eXBlcyB7IAogICAgICAgICAgICAvLyBDb250aW51ZSBvbiBpZiB0aGUgdHlwZSBkb2VzIG5vdCByZXF1aXJlIG9uYm9hcmRpbmcKICAgICAgICAgICAgaWYgRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHR5cGUpICE9IHRydWUgewogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBhc3NldCBUeXBlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHR5cGUsCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchTypeRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaFR5cGVSZXF1aXJlc09uYm9hcmRpbmcgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLyBSZXR1cm5zIHdoZXRoZXIgYSB0eXBlIG5lZWRzIHRvIGJlIG9uYm9hcmRlZCB0byB0aGUgRmxvd0VWTUJyaWRnZQovLy8KLy8vIEBwYXJhbSBUeXBlczogVGhlIGFycmF5IG9mIHR5cGVzIHRvIGNoZWNrIGZvciBvbmJvYXJkaW5nIHN0YXR1cwovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwgaW5kZXhlZAovLy8gICAgIG9uIHRoZSB0eXBlCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbih0eXBlczogW1R5cGVdKToge1R5cGU6IEJvb2w/fSB7CiAgICBsZXQgcmVzdWx0czoge1R5cGU6IEJvb2w/fSA9IHt9CiAgICBmb3IgdHlwZSBpbiB0eXBlcyB7CiAgICAgICAgaWYgcmVzdWx0c1t0eXBlXSAhPSBuaWwgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICByZXN1bHRzLmluc2VydChrZXk6IHR5cGUsIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKSkKICAgIH0KICAgIHJldHVybiByZXN1bHRzCn0K",
                "bridgeNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRGcm9tRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRDb250cmFjdEFkZHJlc3M6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyBob3N0aW5nIHRoZSBORlQtZGVmaW5pbmcgQ2FkZW5jZSBjb250cmFjdAovLy8gQHBhcmFtIG5mdENvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWQ6IFVJbnQyNTYpIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkM3MjEgY29udHJhY3QgYWRkcmVzcyBmb3IgdGhlIGdpdmVuIE5GVCB0eXBlCiAgICAgICAgc2VsZi5uZnRUeXBlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmJ1aWxkQ29tcG9zaXRlVHlwZSgKICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5mdENvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogbmZ0Q29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiTkZUIgogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIikKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24gLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IHNlbGYubmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbkRhdGEuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2goY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgbGV0IGNvbGxlY3Rpb25DYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvbGxlY3Rpb25DYXAsIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgY29sbGVjdGlvbiBmcm9tIHN0b3JhZ2UgcGF0aCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBicmlkZ2UgZmVlIC0gYnJpZGdpbmcgZnJvbSBFVk0gY29uc3VtZXMgbm8gc3RvcmFnZSwgc28gZmxhdCBmZWUKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYuY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTFromEvmToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRGcm9tRXZtVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRDb250cmFjdEFkZHJlc3M6IFRoZSBGbG93IGFjY291bnQgYWRkcmVzcyBob3N0aW5nIHRoZSBORlQtZGVmaW5pbmcgQ2FkZW5jZSBjb250cmFjdAovLy8gQHBhcmFtIG5mdENvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIE5GVC1kZWZpbmluZyBDYWRlbmNlIGNvbnRyYWN0Ci8vLyBAcGFyYW0gaWQ6IFRoZSBFUkM3MjEgaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gQ2FkZW5jZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWQ6IFVJbnQyNTYsIHJlY2VpdmVyOiBBZGRyZXNzKSB7CgogICAgbGV0IG5mdFR5cGU6IFR5cGUKICAgIGxldCBjb2xsZWN0aW9uOiAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBDb3B5VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlLCBVbnB1Ymxpc2hDYXBhYmlsaXR5KSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8vIEdldCB0aGUgRVJDNzIxIGNvbnRyYWN0IGFkZHJlc3MgZm9yIHRoZSBnaXZlbiBORlQgdHlwZQogICAgICAgIHNlbGYubmZ0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgICAgICBhZGRyZXNzOiBuZnRDb250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICBjb250cmFjdE5hbWU6IG5mdENvbnRyYWN0TmFtZSwKICAgICAgICAgICAgICAgIHJlc291cmNlTmFtZTogIk5GVCIKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSIpCgogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pihmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSg8LWNvbGxlY3Rpb25EYXRhLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLCB0bzogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgICAgIGxldCBjb2xsZWN0aW9uQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChjb2xsZWN0aW9uQ2FwLCBhdDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICB9CgogICAgICAgIGxldCByZWNlaXZlckFjY3QgPSBnZXRBY2NvdW50KHJlY2VpdmVyKQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHJlY2VpdmVyQWNjdC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgY29sbGVjdGlvbiBjYXBhYmlsaXRpZXMgZnJvbSBwdWJsaWMgcGF0aCIpCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBicmlkZ2UgZmVlIC0gYnJpZGdpbmcgZnJvbSBFVk0gY29uc3VtZXMgbm8gc3RvcmFnZSwgc28gZmxhdCBmZWUKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBzZWxmLmNvYS53aXRoZHJhd05GVCgKICAgICAgICAgICAgdHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBpZDogaWQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYuY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTFromEvmToFlowV2": "",
                "bridgeNFTFromEvmV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRGcm9tRXZtVjIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGFuIE5GVCBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZSBGbG93RVZNQnJpZGdlCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgRVJDNzIxIGlkIG9mIHRoZSBORlQgdG8gYnJpZGdlIHRvIENhZGVuY2UgZnJvbSBFVk0KLy8vCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQyNTYpIHsKCiAgICBsZXQgbmZ0VHlwZTogVHlwZQogICAgbGV0IGNvbGxlY3Rpb246ICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLyogLS0tIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBzZWxmLm5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIE5GVCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogc2VsZi5uZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHNlbGYubmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBORlQgQ29sbGVjdGlvbiAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi5uZnRUeXBlLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1jb2xsZWN0aW9uRGF0YS5jcmVhdGVFbXB0eUNvbGxlY3Rpb24oKSwgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgICAgICBsZXQgY29sbGVjdGlvbkNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29sbGVjdGlvbkNhcCwgYXQ6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCiAgICAgICAgfQogICAgICAgIHNlbGYuY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBjb2xsZWN0aW9uIGZyb20gc3RvcmFnZSBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9IDwtIHNlbGYuY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICB0eXBlOiBzZWxmLm5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBFbnN1cmUgdGhlIGJyaWRnZWQgbmZ0IGlzIHRoZSBjb3JyZWN0IHR5cGUKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gc2VsZi5uZnRUeXBlLAogICAgICAgICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KHNlbGYubmZ0VHlwZS5pZGVudGlmaWVyKQogICAgICAgICAgICAgICAgLmNvbmNhdCgiLCByZWNlaXZlZDogIikuY29uY2F0KG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCBORlQgaW50byB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbgogICAgICAgIHNlbGYuY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0=",
                "bridgeNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgp0cmFuc2FjdGlvbihuZnRDb250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIG5mdENvbnRyYWN0TmFtZTogU3RyaW5nLCBpZDogVUludDY0KSB7CiAgICAKICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgICAgIAogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBORlQgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gTkZUIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC1zZWxmLm5mdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgoKdHJhbnNhY3Rpb24obmZ0Q29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCBuZnRDb250cmFjdE5hbWU6IFN0cmluZywgaWQ6IFVJbnQ2NCwgY29udHJhY3RFVk1BZGRyZXNzOiBTdHJpbmcsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKICAgIAogICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIE5GVCAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBORlQgc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LXNlbGYubmZ0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIHZhciBhZGRyZXNzQnl0ZXM6IFtVSW50OF0gPSBjb250cmFjdEVWTUFkZHJlc3MuZGVjb2RlSGV4KCkKICAgICAgICBsZXQgZXZtVG9rZW5BZGRyID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IFsKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzBdLCBhZGRyZXNzQnl0ZXNbMV0sIGFkZHJlc3NCeXRlc1syXSwgYWRkcmVzc0J5dGVzWzNdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbNF0sIGFkZHJlc3NCeXRlc1s1XSwgYWRkcmVzc0J5dGVzWzZdLCBhZGRyZXNzQnl0ZXNbN10sCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1s4XSwgYWRkcmVzc0J5dGVzWzldLCBhZGRyZXNzQnl0ZXNbMTBdLCBhZGRyZXNzQnl0ZXNbMTFdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTJdLCBhZGRyZXNzQnl0ZXNbMTNdLCBhZGRyZXNzQnl0ZXNbMTRdLCBhZGRyZXNzQnl0ZXNbMTVdLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbMTZdLCBhZGRyZXNzQnl0ZXNbMTddLCBhZGRyZXNzQnl0ZXNbMThdLCBhZGRyZXNzQnl0ZXNbMTldCiAgICAgICAgXSkKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgLy8gbGV0IGRhdGEgPSBkYXRhU3RyLmRlY29kZUhleCgpCgogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBldm1Ub2tlbkFkZHIsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeNFTToEvmAddressV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bUFkZHJlc3NWMiAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIEJyaWRnZXMgYW4gTkZUIGZyb20gdGhlIHNpZ25lcidzIGNvbGxlY3Rpb24gaW4gQ2FkZW5jZSB0byB0aGUgbmFtZWQgcmVjaXBpZW50IGluIEVWTS4KLy8vCi8vLyBOT1RFOiBUaGlzIHRyYW5zYWN0aW9uIGFsc28gb25ib2FyZHMgdGhlIE5GVCB0byB0aGUgYnJpZGdlIGlmIG5lY2Vzc2FyeSB3aGljaCBtYXkgaW5jdXIgYWRkaXRpb25hbCBmZWVzCi8vLyAgICAgdGhhbiBicmlkZ2luZyBhbiBhc3NldCB0aGF0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkLgovLy8KLy8vIEBwYXJhbSBuZnRJZGVudGlmaWVyOiBUaGUgQ2FkZW5jZSB0eXBlIGlkZW50aWZpZXIgb2YgdGhlIE5GVCB0byBicmlkZ2UgLSBlLmcuIG5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcgovLy8gQHBhcmFtIGlkOiBUaGUgQ2FkZW5jZSBORlQuaWQgb2YgdGhlIE5GVCB0byBicmlkZ2UgdG8gRVZNCi8vLyBAcGFyYW0gcmVjaXBpZW50OiBUaGUgaGV4LWVuY29kZWQgRVZNIGFkZHJlc3MgdG8gcmVjZWl2ZSB0aGUgTkZUCi8vLwp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGlkOiBVSW50NjQsIHJlY2lwaWVudDogU3RyaW5nKSB7CiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IHJlcXVpcmVzT25ib2FyZGluZzogQm9vbAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsgICAgICAgIAogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIE5GVCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBORlQgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gTkZUIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDQwMF8wMDApICsgRmxvd0VWTUJyaWRnZUNvbmZpZy5iYXNlRmVlCiAgICAgICAgLy8gRGV0ZXJtaW5lIGlmIHRoZSBORlQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5uZnQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYubmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IG5mdElkZW50aWZpZXI6CiAgICAgICAgICAgICJBdHRlbXB0aW5nIHRvIHNlbmQgaW52YWxpZCBuZnQgdHlwZSAtIHJlcXVlc3RlZDogIi5jb25jYXQobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5uZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBORlQgdG8gdGhlIGJyaWRnZQogICAgICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgICAgICBzZWxmLm5mdC5nZXRUeXBlKCksCiAgICAgICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICB9CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHRyYW5zYWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50KQogICAgICAgIEZsb3dFVk1CcmlkZ2UuYnJpZGdlTkZUVG9FVk0oCiAgICAgICAgICAgIHRva2VuOiA8LXNlbGYubmZ0LAogICAgICAgICAgICB0bzogRVZNLmFkZHJlc3NGcm9tU3RyaW5nKHJlY2lwaWVudCksCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9",
                "bridgeNFTToEvmV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VORlRUb0V2bVYyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gQnJpZGdlcyBhbiBORlQgZnJvbSB0aGUgc2lnbmVyJ3MgY29sbGVjdGlvbiBpbiBDYWRlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EgaW4gRmxvd0VWTQovLy8KLy8vIE5PVEU6IFRoaXMgdHJhbnNhY3Rpb24gYWxzbyBvbmJvYXJkcyB0aGUgTkZUIHRvIHRoZSBicmlkZ2UgaWYgbmVjZXNzYXJ5IHdoaWNoIG1heSBpbmN1ciBhZGRpdGlvbmFsIGZlZXMKLy8vICAgICB0aGFuIGJyaWRnaW5nIGFuIGFzc2V0IHRoYXQgaGFzIGFscmVhZHkgYmVlbiBvbmJvYXJkZWQuCi8vLwovLy8gQHBhcmFtIG5mdElkZW50aWZpZXI6IFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBvZiB0aGUgTkZUIHRvIGJyaWRnZSAtIGUuZy4gbmZ0LmdldFR5cGUoKS5pZGVudGlmaWVyCi8vLyBAcGFyYW0gaWQ6IFRoZSBDYWRlbmNlIE5GVC5pZCBvZiB0aGUgTkZUIHRvIGJyaWRnZSB0byBFVk0KLy8vCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogICAgCiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBORlQgdHlwZSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBORlQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIE5GVCAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBORlQgc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICB2YXIgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogNDAwXzAwMCkgKyBGbG93RVZNQnJpZGdlQ29uZmlnLmJhc2VGZWUKICAgICAgICAvLyBEZXRlcm1pbmUgaWYgdGhlIE5GVCByZXF1aXJlcyBvbmJvYXJkaW5nIC0gdGhpcyBpbXBhY3RzIHRoZSBmZWUgcmVxdWlyZWQKICAgICAgICBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyA9IEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyhzZWxmLm5mdC5nZXRUeXBlKCkpCiAgICAgICAgICAgID8/IHBhbmljKCJCcmlkZ2UgZG9lcyBub3Qgc3VwcG9ydCB0aGlzIGFzc2V0IHR5cGUiKQogICAgICAgIGlmIHNlbGYucmVxdWlyZXNPbmJvYXJkaW5nIHsKICAgICAgICAgICAgYXBwcm94RmVlID0gYXBwcm94RmVlICsgRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlCiAgICAgICAgfQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIHByZSB7CiAgICAgICAgc2VsZi5uZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIgPT0gbmZ0SWRlbnRpZmllcjoKICAgICAgICAgICAgIkF0dGVtcHRpbmcgdG8gc2VuZCBpbnZhbGlkIG5mdCB0eXBlIC0gcmVxdWVzdGVkOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKQogICAgICAgICAgICAuY29uY2F0KCIsIHNlbmRpbmc6ICIpLmNvbmNhdChzZWxmLm5mdC5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIC8vIE9uYm9hcmQgdGhlIE5GVCB0byB0aGUgYnJpZGdlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHNlbGYubmZ0LmdldFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBzZWxmLmNvYS5kZXBvc2l0TkZUKAogICAgICAgICAgICBuZnQ6IDwtc2VsZi5uZnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9",
                "bridgeTokensFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNGcm9tRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NikgewoKICAgIGxldCB2YXVsdFR5cGU6IFR5cGUKICAgIGxldCByZWNlaXZlcjogJntGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvLyBHZXQgdGhlIEVSQzIwIGNvbnRyYWN0IGFkZHJlc3MgZm9yIHRoZSBnaXZlbiBGdW5naWJsZVRva2VuIFZhdWx0IHR5cGUKICAgICAgICBzZWxmLnZhdWx0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgICAgICBhZGRyZXNzOiB0b2tlbkNvbnRyYWN0QWRkcmVzcywKICAgICAgICAgICAgICAgIGNvbnRyYWN0TmFtZTogdG9rZW5Db250cmFjdE5hbWUsCiAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJWYXVsdCIKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIG9mOiAiIC5jb25jYXQodG9rZW5Db250cmFjdEFkZHJlc3MudG9TdHJpbmcoKSkuY29uY2F0KCIuIikuY29uY2F0KHRva2VuQ29udHJhY3ROYW1lKS5jb25jYXQoIi5WYXVsdCIpKQoKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBWYXVsdCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdCwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgLy8gSWYgdGhlIHZhdWx0IGRvZXMgbm90IGV4aXN0LCBjcmVhdGUgaXQgYW5kIHB1Ymxpc2ggYWNjb3JkaW5nIHRvIHRoZSBjb250cmFjdCdzIGRlZmluZWQgY29uZmlndXJhdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC12YXVsdERhdGEuY3JlYXRlRW1wdHlWYXVsdCgpLCB0bzogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy51bnB1Ymxpc2godmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKCiAgICAgICAgICAgIGxldCByZWNlaXZlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgIGxldCBtZXRhZGF0YUNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCgogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gocmVjZWl2ZXJDYXAsIGF0OiB2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2gobWV0YWRhdGFDYXAsIGF0OiB2YXVsdERhdGEubWV0YWRhdGFQYXRoKQogICAgICAgIH0KICAgICAgICBzZWxmLnJlY2VpdmVyID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmF1bHQgZnJvbSBzdG9yYWdlIHBhdGgiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgYnJpZGdlIGZlZSAtIGJyaWRnaW5nIGZyb20gRVZNIGNvbnN1bWVzIG5vIHN0b3JhZ2UsIHNvIGZsYXQgZmVlCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IDApCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlIHJlcXVlc3QKICAgICAgICBsZXQgdmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0gPC0gc2VsZi5jb2Eud2l0aGRyYXdUb2tlbnMoCiAgICAgICAgICAgIHR5cGU6IHNlbGYudmF1bHRUeXBlLAogICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXBvc2l0IHRoZSBicmlkZ2VkIHRva2VuIGludG8gdGhlIHNpZ25lcidzIHZhdWx0CiAgICAgICAgc2VsZi5yZWNlaXZlci5kZXBvc2l0KGZyb206IDwtdmF1bHQpCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeTokensFromEvmToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNGcm9tRXZtVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCi8vLy8gVGhpcyB0cmFuc2FjdGlvbiBicmlkZ2VzIGZ1bmdpYmxlIHRva2VucyBmcm9tIEVWTSB0byBDYWRlbmNlIGFzc3VtaW5nIGl0IGhhcyBhbHJlYWR5IGJlZW4gb25ib2FyZGVkIHRvIHRoZQovLy8gRmxvd0VWTUJyaWRnZS4KLy8vCi8vLyBOT1RFOiBUaGUgRVJDNzIxIG11c3QgaGF2ZSBmaXJzdCBiZWVuIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlLiBUaGlzIGNhbiBiZSBjaGVja2VkIHZpYSB0aGUgbWV0aG9kCi8vLyAgICAgRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3M6IHNlbGYuZXZtQ29udHJhY3RBZGRyZXNzKQovLy8KLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0QWRkcmVzczogVGhlIEZsb3cgYWNjb3VudCBhZGRyZXNzIGhvc3RpbmcgdGhlIEZULWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSB0b2tlbkNvbnRyYWN0TmFtZTogVGhlIG5hbWUgb2YgdGhlIFZhdWx0LWRlZmluaW5nIENhZGVuY2UgY29udHJhY3QKLy8vIEBwYXJhbSBhbW91bnQ6IFRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGJyaWRnZSBmcm9tIEVWTQovLy8KdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUludDI1NiwgcmVjZWl2ZXI6IEFkZHJlc3MpIHsKCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlCiAgICBsZXQgcmVjZWl2ZXI6ICZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0KICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLy8gR2V0IHRoZSBFUkMyMCBjb250cmFjdCBhZGRyZXNzIGZvciB0aGUgZ2l2ZW4gRnVuZ2libGVUb2tlbiBWYXVsdCB0eXBlCiAgICAgICAgc2VsZi52YXVsdFR5cGUgPSBGbG93RVZNQnJpZGdlVXRpbHMuYnVpbGRDb21wb3NpdGVUeXBlKAogICAgICAgICAgICAgICAgYWRkcmVzczogdG9rZW5Db250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgICAgICBjb250cmFjdE5hbWU6IHRva2VuQ29udHJhY3ROYW1lLAogICAgICAgICAgICAgICAgcmVzb3VyY2VOYW1lOiAiVmF1bHQiCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBvZjogIiAuY29uY2F0KHRva2VuQ29udHJhY3RBZGRyZXNzLnRvU3RyaW5nKCkpLmNvbmNhdCgiLiIpLmNvbmNhdCh0b2tlbkNvbnRyYWN0TmFtZSkuY29uY2F0KCIuVmF1bHQiKSkKCiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgVmF1bHQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQsIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogc2VsZi52YXVsdFR5cGUsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIC8vIElmIHRoZSB2YXVsdCBkb2VzIG5vdCBleGlzdCwgY3JlYXRlIGl0IGFuZCBwdWJsaXNoIGFjY29yZGluZyB0byB0aGUgY29udHJhY3QncyBkZWZpbmVkIGNvbmZpZ3VyYXRpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlZhdWx0fT4oZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwgdG86IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5tZXRhZGF0YVBhdGgpCgogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICBsZXQgbWV0YWRhdGFDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlZhdWx0fT4odmF1bHREYXRhLnN0b3JhZ2VQYXRoKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKHJlY2VpdmVyQ2FwLCBhdDogdmF1bHREYXRhLnJlY2VpdmVyUGF0aCkKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKG1ldGFkYXRhQ2FwLCBhdDogdmF1bHREYXRhLm1ldGFkYXRhUGF0aCkKICAgICAgICB9CiAgICAgICAgbGV0IHJlY2VpdmVyQWNjdCA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICAgICAgc2VsZi5yZWNlaXZlciA9IHJlY2VpdmVyQWNjdC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZhdWx0IHJlY2VpdmVyIGNhcGFiaWxpdGllcyBmcm9tIHB1YmxpYyBwYXRoIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIGJyaWRnZSBmZWUgLSBicmlkZ2luZyBmcm9tIEVWTSBjb25zdW1lcyBubyBzdG9yYWdlLCBzbyBmbGF0IGZlZQogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKGJ5dGVzOiAwKQogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZSByZXF1ZXN0CiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIHNlbGYuY29hLndpdGhkcmF3VG9rZW5zKAogICAgICAgICAgICB0eXBlOiBzZWxmLnZhdWx0VHlwZSwKICAgICAgICAgICAgYW1vdW50OiBhbW91bnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgYnJpZGdlZCB0b2tlbiBpbnRvIHRoZSBzaWduZXIncyB2YXVsdAogICAgICAgIHNlbGYucmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXZhdWx0KQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQo=",
                "bridgeTokensFromEvmToFlowV2": "",
                "bridgeTokensFromEvmV2": "",
                "bridgeTokensToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNUb0V2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgoKdHJhbnNhY3Rpb24odG9rZW5Db250cmFjdEFkZHJlc3M6IEFkZHJlc3MsIHRva2VuQ29udHJhY3ROYW1lOiBTdHJpbmcsIGFtb3VudDogVUZpeDY0KSB7CgogICAgbGV0IHNlbnRWYXVsdDogQHtGdW5naWJsZVRva2VuLlZhdWx0fQogICAgbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIGxldCB2YXVsdCA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KAogICAgICAgICAgICAgICAgZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRoZSByZXF1ZXN0ZWQgYmFsYW5jZSAmIGNhbGN1bGF0ZSB0aGUgYXBwcm94aW1hdGUgYnJpZGdlIGZlZSBiYXNlZCBvbiBzdG9yYWdlIHVzYWdlCiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHQud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICAvLyBBcHByb3hpbWF0ZSB0aGUgYnJpZGdlIGZlZSBiYXNlZCBvbiB0aGUgZGlmZmVyZW5jZSBpbiBzdG9yYWdlIHVzYWdlIHdpdGggc29tZSBidWZmZXIKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCgogICAgICAgIC8qIC0tLSBDb25maWd1cmUgYSBTY29wZWRGVFByb3ZpZGVyIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gSXNzdWUgYW5kIHN0b3JlIGJyaWRnZS1kZWRpY2F0ZWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBpbiBzdG9yYWdlIGlmIG5lY2Vzc2FyeQogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLnR5cGUoYXQ6IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAgICAgL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICAgICAgKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgICAgICB9CiAgICAgICAgLy8gQ29weSB0aGUgc3RvcmVkIFByb3ZpZGVyIGNhcGFiaWxpdHkgYW5kIGNyZWF0ZSBhIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICAgICAgZnJvbTogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJJbnZhbGlkIFByb3ZpZGVyIENhcGFiaWxpdHkgZm91bmQgaW4gc3RvcmFnZS4iKQogICAgICAgIGxldCBwcm92aWRlckZpbHRlciA9IFNjb3BlZEZUUHJvdmlkZXJzLkFsbG93YW5jZUZpbHRlcihhcHByb3hGZWUpCiAgICAgICAgc2VsZi5zY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICAgICAgcHJvdmlkZXI6IHByb3ZpZGVyQ2FwQ29weSwKICAgICAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICAgICApCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgLy8gRXhlY3V0ZSB0aGUgYnJpZGdlCiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdFRva2VucygKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeTokensToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNUb0V2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKHRva2VuQ29udHJhY3RBZGRyZXNzOiBBZGRyZXNzLCB0b2tlbkNvbnRyYWN0TmFtZTogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgY29udHJhY3RFVk1BZGRyZXNzOiBTdHJpbmcsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UsIEVWTS5DYWxsLCBFVk0uT3duZXIpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBSZWZlcmVuY2UgdGhlIHNpZ25lcidzIENhZGVuY2VPd25lZEFjY291bnQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIENPQQogICAgICAgIHNlbGYuY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSwgRVZNLkNhbGwsIEVWTS5Pd25lcikgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCgogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgZnVuZHMgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIEZ1bmdpYmxlVG9rZW4gVmF1bHQKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudCh0b2tlbkNvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IHRva2VuQ29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBGdW5naWJsZVRva2VuIGNvbnRyYWN0IikKICAgICAgICBsZXQgdmF1bHREYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgRlRWYXVsdERhdGEgdmlldyIpCiAgICAgICAgbGV0IHZhdWx0ID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5idWlsZENvbXBvc2l0ZVR5cGUoCiAgICAgICAgICAgIGFkZHJlc3M6IHRva2VuQ29udHJhY3RBZGRyZXNzLAogICAgICAgICAgICBjb250cmFjdE5hbWU6IHRva2VuQ29udHJhY3ROYW1lLAogICAgICAgICAgICByZXNvdXJjZU5hbWU6ICJWYXVsdCIKICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgb2Y6ICIgLmNvbmNhdCh0b2tlbkNvbnRyYWN0QWRkcmVzcy50b1N0cmluZygpKS5jb25jYXQoIi4iKS5jb25jYXQodG9rZW5Db250cmFjdE5hbWUpLmNvbmNhdCgiLlZhdWx0IikpCgogICAgICAgIHNlbGYuY29hLmRlcG9zaXRUb2tlbnMoCiAgICAgICAgICAgIHZhdWx0OiA8LXNlbGYuc2VudFZhdWx0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQoKICAgICAgICB2YXIgYWRkcmVzc0J5dGVzOiBbVUludDhdID0gY29udHJhY3RFVk1BZGRyZXNzLmRlY29kZUhleCgpCiAgICAgICAgbGV0IGV2bVRva2VuQWRkciA9IEVWTS5FVk1BZGRyZXNzKGJ5dGVzOiBbCiAgICAgICAgICAgIGFkZHJlc3NCeXRlc1swXSwgYWRkcmVzc0J5dGVzWzFdLCBhZGRyZXNzQnl0ZXNbMl0sIGFkZHJlc3NCeXRlc1szXSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzRdLCBhZGRyZXNzQnl0ZXNbNV0sIGFkZHJlc3NCeXRlc1s2XSwgYWRkcmVzc0J5dGVzWzddLAogICAgICAgICAgICBhZGRyZXNzQnl0ZXNbOF0sIGFkZHJlc3NCeXRlc1s5XSwgYWRkcmVzc0J5dGVzWzEwXSwgYWRkcmVzc0J5dGVzWzExXSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzEyXSwgYWRkcmVzc0J5dGVzWzEzXSwgYWRkcmVzc0J5dGVzWzE0XSwgYWRkcmVzc0J5dGVzWzE1XSwKICAgICAgICAgICAgYWRkcmVzc0J5dGVzWzE2XSwgYWRkcmVzc0J5dGVzWzE3XSwgYWRkcmVzc0J5dGVzWzE4XSwgYWRkcmVzc0J5dGVzWzE5XQogICAgICAgIF0pCiAgICAgICAgbGV0IHZhbHVlQmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIC8vIGxldCBkYXRhID0gZGF0YVN0ci5kZWNvZGVIZXgoKQogICAgICAgICBsZXQgdHhSZXN1bHQgPSBzZWxmLmNvYS5jYWxsKAogICAgICAgICAgICB0bzogZXZtVG9rZW5BZGRyLAogICAgICAgICAgICBkYXRhOiBkYXRhLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCgogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCiAgICAgICAgLy8gRGVzdHJveSB0aGUgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGRlc3Ryb3kgc2VsZi5zY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeTokensToEvmAddressV2": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VUb2tlbnNUb0V2bUFkZHJlc3NWMiAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCwgcmVjaXBpZW50OiBTdHJpbmcpIHsKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCByZXF1aXJlc09uYm9hcmRpbmc6IEJvb2wKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBWYXVsdCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKICAgICAgICBsZXQgdmF1bHQgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigKICAgICAgICAgICAgICAgIGZyb206IHZhdWx0RGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIEZ1bmdpYmxlVG9rZW4gVmF1bHQiKQoKICAgICAgICAvLyBXaXRoZHJhdyB0aGUgcmVxdWVzdGVkIGJhbGFuY2UgJiBjYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGJyaWRnZSBmZWUgYmFzZWQgb24gc3RvcmFnZSB1c2FnZQogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0LndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgLy8gQXBwcm94aW1hdGUgdGhlIGJyaWRnZSBmZWUgYmFzZWQgb24gdGhlIGRpZmZlcmVuY2UgaW4gc3RvcmFnZSB1c2FnZSB3aXRoIHNvbWUgYnVmZmVyCiAgICAgICAgdmFyIGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAogICAgICAgIC8vIERldGVybWluZSBpZiB0aGUgVmF1bHQgcmVxdWlyZXMgb25ib2FyZGluZyAtIHRoaXMgaW1wYWN0cyB0aGUgZmVlIHJlcXVpcmVkCiAgICAgICAgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgPSBGbG93RVZNQnJpZGdlLnR5cGVSZXF1aXJlc09uYm9hcmRpbmcoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpKQogICAgICAgICAgICA/PyBwYW5pYygiQnJpZGdlIGRvZXMgbm90IHN1cHBvcnQgdGhpcyBhc3NldCB0eXBlIikKICAgICAgICBpZiBzZWxmLnJlcXVpcmVzT25ib2FyZGluZyB7CiAgICAgICAgICAgIGFwcHJveEZlZSA9IGFwcHJveEZlZSArIEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZQogICAgICAgIH0KCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBwcmUgewogICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKS5pZGVudGlmaWVyID09IHZhdWx0SWRlbnRpZmllcjoKICAgICAgICAgICAgIkF0dGVtcHRpbmcgdG8gc2VuZCBpbnZhbGlkIHZhdWx0IHR5cGUgLSByZXF1ZXN0ZWQ6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgLmNvbmNhdCgiLCBzZW5kaW5nOiAiKS5jb25jYXQoc2VsZi5zZW50VmF1bHQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQuYmFsYW5jZSA9PSBhbW91bnQ6ICJBbW91bnQgdG8gYmUgdHJhbnNmZXJyZWQgZG9lcyBub3QgbWF0Y2ggdGhlIHJlcXVlc3RlZCBhbW91bnQiCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZXF1aXJlc09uYm9hcmRpbmcgewogICAgICAgICAgICAvLyBPbmJvYXJkIHRoZSBWYXVsdCB0byB0aGUgYnJpZGdlCiAgICAgICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5VHlwZSgKICAgICAgICAgICAgICAgIHNlbGYuc2VudFZhdWx0LmdldFR5cGUoKSwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAgICAgKQogICAgICAgIH0KICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UgdHJhbnNhY3Rpb24KICAgICAgICBsZXQgcmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnQpCiAgICAgICAgRmxvd0VWTUJyaWRnZS5icmlkZ2VUb2tlbnNUb0VWTSgKICAgICAgICAgICAgdmF1bHQ6IDwtc2VsZi5zZW50VmF1bHQsCiAgICAgICAgICAgIHRvOiByZWNpcGllbnRFVk1BZGRyZXNzLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQ==",
                "bridgeTokensToEvmV2": "",
                "calculateBridgeFee": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjYWxjdWxhdGVCcmlkZ2VGZWUgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFJldHVybnMgdGhlIGNhbGN1bGF0ZWQgZmVlIGJhc2VkIG9uIHRoZSBudW1iZXIgb2YgYnl0ZXMgdXNlZCB0byBlc2Nyb3cgYW4gYXNzZXQgcGx1cyB0aGUgYmFzZSBmZWUuCi8vLwovLy8gQHBhcmFtIGJ5dGVzOiBUaGUgbnVtYmVyIG9mIGJ5dGVzIHVzZWQgdG8gZXNjcm93IGFuIGFzc2V0LgovLy8KLy8vIEByZXR1cm4gVGhlIGNhbGN1bGF0ZWQgZmVlIHRvIGJlIHBhaWQgaW4gRmxvd1Rva2VuCi8vLwphY2Nlc3MoYWxsKQpmdW4gbWFpbihieXRlcyB1c2VkOiBVSW50NjQpOiBVRml4NjQgewogICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoYnl0ZXM6IHVzZWQpCn0K",
                "evmAddressRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk1VdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFJldHVybnMgd2hldGhlciBhIEVWTSBjb250cmFjdCBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gZXZtQWRkcmVzc0hleDogVGhlIGhleC1lbmNvZGVkIGFkZHJlc3Mgb2YgdGhlIEVWTSBjb250cmFjdCBhcyBhIFN0cmluZyB3aXRob3V0IDB4IHByZWZpeAovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgY29udHJhY3QgcmVxdWlyZXMgb25ib2FyZGluZyB0byB0aGUgRmxvd0VWTUJyaWRnZSBpZiB0aGUgdHlwZSBpcyBicmlkZ2VhYmxlLCBvdGhlcndpc2UgbmlsCi8vLwphY2Nlc3MoYWxsKSBmdW4gbWFpbihldm1BZGRyZXNzSGV4OiBTdHJpbmcpOiBCb29sPyB7CiAgICBpZiBsZXQgYWRkcmVzcyA9IEVWTVV0aWxzLmdldEVWTUFkZHJlc3NGcm9tSGV4U3RyaW5nKGFkZHJlc3M6IGV2bUFkZHJlc3NIZXgpIHsKICAgICAgICByZXR1cm4gRmxvd0VWTUJyaWRnZS5ldm1BZGRyZXNzUmVxdWlyZXNPbmJvYXJkaW5nKGFkZHJlc3MpCiAgICB9CiAgICByZXR1cm4gbmlsCn0K",
                "getAssociatedEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBc3NvY2lhdGVkRXZtQWRkcmVzcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBFVk1VdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFJldHVybnMgdGhlIEVWTSBhZGRyZXNzIGFzc29jaWF0ZWQgd2l0aCB0aGUgZ2l2ZW4gQ2FkZW5jZSB0eXBlIChhcyBpdHMgaWRlbnRpZmllciBTdHJpbmcpCi8vLwovLy8gQHBhcmFtIHR5cGVJZGVudGlmaWVyIFRoZSBDYWRlbmNlIHR5cGUgaWRlbnRpZmllciBTdHJpbmcKLy8vCi8vLyBAcmV0dXJuIFRoZSBFVk0gYWRkcmVzcyBhcyBhIGhleCBzdHJpbmcgaWYgdGhlIHR5cGUgaGFzIGFuIGFzc29jaWF0ZWQgRVZNQWRkcmVzcywgb3RoZXJ3aXNlIG5pbAovLy8KYWNjZXNzKGFsbCkKZnVuIG1haW4oaWRlbnRpZmllcjogU3RyaW5nKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgdHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgewogICAgICAgIGlmIGxldCBhZGRyZXNzID0gRmxvd0VWTUJyaWRnZUNvbmZpZy5nZXRFVk1BZGRyZXNzQXNzb2NpYXRlZCh3aXRoOiB0eXBlKSB7CiAgICAgICAgICAgIHJldHVybiBFVk1VdGlscy5nZXRFVk1BZGRyZXNzQXNIZXhTdHJpbmcoYWRkcmVzczogYWRkcmVzcykKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
                "getAssociatedFlowIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBc3NvY2lhdGVkRmxvd0lkZW50aWZpZXIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTSBmcm9tIDB4RVZNCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlQ29uZmlnCgphY2Nlc3MoYWxsKQpmdW4gbWFpbihhZGRyZXNzOiBTdHJpbmcpOiBTdHJpbmc/IHsKICAgIGlmIGxldCB0eXBlSW5mbyA9IEZsb3dFVk1CcmlkZ2VDb25maWcuZ2V0VHlwZUFzc29jaWF0ZWQod2l0aDogRVZNLmFkZHJlc3NGcm9tU3RyaW5nKGFkZHJlc3MpKSB7CiAgICAgICAgcmV0dXJuIHR5cGVJbmZvLmlkZW50aWZpZXIKICAgIH0KICAgIHJldHVybiBuaWwKfQ==",
                "getBridgeCoaAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRCcmlkZ2VDb2FBZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEVWTVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB0aGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlCi8vLwovLy8gQHJldHVybiBUaGUgRVZNIGFkZHJlc3MgYXNzb2NpYXRlZCB3aXRoIHRoZSBGbG93RVZNQnJpZGdlJ3MgY29vcmRpbmF0aW5nIENhZGVuY2VPd25lZEFjY291bnQKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6IFN0cmluZyB7CiAgICBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBGbG93RVZNQnJpZGdlLmdldEJyaWRnZUNPQUVWTUFkZHJlc3MoKQogICAgcmV0dXJuIEVWTVV0aWxzLmdldEVWTUFkZHJlc3NBc0hleFN0cmluZyhhZGRyZXNzOiBhZGRyZXNzKQp9",
                "onboardByEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBvbmJvYXJkQnlFdm1BZGRyZXNzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBFVk1VdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgdGhlIE5GVCB0eXBlIHRvIHRoZSBicmlkZ2UsIGNvbmZpZ3VyaW5nIHRoZSBicmlkZ2UgdG8gbW92ZSBORlRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBORlQgdG8gRVZNCi8vLwovLy8gQHBhcmFtIGNvbnRyYWN0QWRkcmVzc0hleDogVGhlIEVWTSBhZGRyZXNzIG9mIHRoZSBjb250cmFjdCAoYXMgaGV4IHN0cmluZyB3aXRob3V0IDB4IHByZWZpeCkgZGVmaW5pbmcgdGhlIAovLy8gICAgIGJyaWRnZWFibGUgYXNzZXQgdG8gYmUgb25ib2FyZGVkCi8vLwp0cmFuc2FjdGlvbihjb250cmFjdEFkZHJlc3NIZXg6IFN0cmluZykgewoKICAgIGxldCBjb250cmFjdEFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8qIC0tLSBDb25zdHJ1Y3QgRVZNQWRkcmVzcyBmcm9tIGhleCBzdHJpbmcgKG5vIGxlYWRpbmcgYCIweCJgKSAtLS0gKi8KICAgICAgICAvLwogICAgICAgIHNlbGYuY29udHJhY3RBZGRyZXNzID0gRVZNVXRpbHMuZ2V0RVZNQWRkcmVzc0Zyb21IZXhTdHJpbmcoYWRkcmVzczogY29udHJhY3RBZGRyZXNzSGV4KQogICAgICAgICAgICA/PyBwYW5pYygiSW52YWxpZCBFVk0gYWRkcmVzcyBzdHJpbmcgcHJvdmlkZWQiKQoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIE9uYm9hcmQgdGhlIEVWTSBjb250cmFjdAogICAgICAgIEZsb3dFVk1CcmlkZ2Uub25ib2FyZEJ5RVZNQWRkcmVzcygKICAgICAgICAgICAgc2VsZi5jb250cmFjdEFkZHJlc3MsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "onboardByType": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBvbmJvYXJkQnlUeXBlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBvbmJvYXJkcyB0aGUgYXNzZXQgdHlwZSB0byB0aGUgYnJpZGdlLCBjb25maWd1cmluZyB0aGUgYnJpZGdlIHRvIG1vdmUgYXNzZXRzIGJldHdlZW4gZW52aXJvbm1lbnRzCi8vLyBOT1RFOiBUaGlzIG11c3QgYmUgZG9uZSBiZWZvcmUgYnJpZGdpbmcgYSBDYWRlbmNlLW5hdGl2ZSBhc3NldCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gdHlwZTogVGhlIENhZGVuY2UgdHlwZSBvZiB0aGUgYnJpZGdlYWJsZSBhc3NldCB0byBvbmJvYXJkIHRvIHRoZSBicmlkZ2UKLy8vCnRyYW5zYWN0aW9uKHR5cGU6IFR5cGUpIHsKCiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCiAgICAKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENvcHlWYWx1ZSwgQm9ycm93VmFsdWUsIElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBQdWJsaXNoQ2FwYWJpbGl0eSwgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoRmxvd0VWTUJyaWRnZUNvbmZpZy5vbmJvYXJkRmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIE9uYm9hcmQgdGhlIGFzc2V0IFR5cGUKICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeVR5cGUoCiAgICAgICAgICAgIHR5cGUsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "onboardByTypeIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBvbmJvYXJkQnlUeXBlSWRlbnRpZmllciAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gb25ib2FyZHMgdGhlIGFzc2V0IHR5cGUgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIGFzc2V0cyBiZXR3ZWVuIGVudmlyb25tZW50cwovLy8gTk9URTogVGhpcyBtdXN0IGJlIGRvbmUgYmVmb3JlIGJyaWRnaW5nIGEgQ2FkZW5jZS1uYXRpdmUgYXNzZXQgdG8gRVZNCi8vLwovLy8gQHBhcmFtIGlkZW50aWZlcjogVGhlIENhZGVuY2UgdHlwZSBpZGVudGlmaWVyIG9mIHRoZSBicmlkZ2VhYmxlIGFzc2V0IHRvIG9uYm9hcmRlZCB0byB0aGUgYnJpZGdlCi8vLwp0cmFuc2FjdGlvbihpZGVudGlmaWVyOiBTdHJpbmcpIHsKCiAgICBsZXQgdHlwZTogVHlwZQogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gQ29uc3RydWN0IHRoZSB0eXBlIGZyb20gaWRlbnRpZmllciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIHNlbGYudHlwZSA9IENvbXBvc2l0ZVR5cGUoaWRlbnRpZmllcikgPz8gcGFuaWMoIkludmFsaWQgdHlwZSBpZGVudGlmaWVyIikKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKEZsb3dFVk1CcmlkZ2VDb25maWcub25ib2FyZEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBPbmJvYXJkIHRoZSBhc3NldCBUeXBlCiAgICAgICAgRmxvd0VWTUJyaWRnZS5vbmJvYXJkQnlUeXBlKAogICAgICAgICAgICBzZWxmLnR5cGUsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "typeRequiresOnboarding": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0eXBlUmVxdWlyZXNPbmJvYXJkaW5nIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gdHlwZTogVGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKHR5cGU6IFR5cGUpOiBCb29sPyB7CiAgICByZXR1cm4gRmxvd0VWTUJyaWRnZS50eXBlUmVxdWlyZXNPbmJvYXJkaW5nKHR5cGUpCn0K",
                "typeRequiresOnboardingByIdentifier": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0eXBlUmVxdWlyZXNPbmJvYXJkaW5nQnlJZGVudGlmaWVyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgdHlwZSBuZWVkcyB0byBiZSBvbmJvYXJkZWQgdG8gdGhlIEZsb3dFVk1CcmlkZ2UKLy8vCi8vLyBAcGFyYW0gaWRlbnRpZmllcjogVGhlIGlkZW50aWZpZXIgb2YgdGhlIENhZGVuY2UgVHlwZSBpbiBxdWVzdGlvbgovLy8KLy8vIEByZXR1cm4gV2hldGhlciB0aGUgdHlwZSByZXF1aXJlcyBvbmJvYXJkaW5nIHRvIHRoZSBGbG93RVZNQnJpZGdlIGlmIHRoZSB0eXBlIGlzIGJyaWRnZWFibGUsIG90aGVyd2lzZSBuaWwKLy8vCmFjY2VzcyhhbGwpIGZ1biBtYWluKGlkZW50aWZpZXI6IFN0cmluZyk6IEJvb2w/IHsKICAgIGlmIGxldCB0eXBlID0gQ29tcG9zaXRlVHlwZShpZGVudGlmaWVyKSB7CiAgICAgICAgcmV0dXJuIEZsb3dFVk1CcmlkZ2UudHlwZVJlcXVpcmVzT25ib2FyZGluZyh0eXBlKQogICAgfQogICAgcmV0dXJuIG5pbAp9Cg=="
            },
            "collection": {
                "checkNFTCollection": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja05GVENvbGxlY3Rpb24gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCiAgICBpbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCiAgICAvLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCiAgICAvLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgogICAgYWNjZXNzKGFsbCkgZnVuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuZXhpc3QoPFRva2VuQ29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgIHJldHVybiB2YXVsdFJlZgogICAgfQoKICAgIGFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpIDogQm9vbCB7CiAgICAgICAgcmV0dXJuIGNoZWNrPFRva2VuPlZhdWx0KGFkZHJlc3M6IGFkZHJlc3MpCiAgICB9",
                "enableNFTStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBlbmFibGVORlRTdG9yYWdlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKENhcGFiaWxpdGllcywgU2F2ZVZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuYm9ycm93PCY8TkZUPi5Db2xsZWN0aW9uPig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KSA9PSBuaWwgewogICAgICAgICAgICBsZXQgY29sbGVjdGlvbiA8LSA8TkZUPi5jcmVhdGVFbXB0eUNvbGxlY3Rpb24obmZ0VHlwZTogVHlwZTxAPE5GVD4uTkZUPigpKQogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtY29sbGVjdGlvbiwgdG86IDxDb2xsZWN0aW9uU3RvcmFnZVBhdGg+KQogICAgICAgIH0KICAgICAgICBpZiAoc2lnbmVyLmNhcGFiaWxpdGllcy5ib3Jyb3c8JjxORlQ+LkNvbGxlY3Rpb24+KDxDb2xsZWN0aW9uUHVibGljUGF0aD4pID09IG5pbCkgewogICAgICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaCg8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgICAgICBsZXQgY2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8TkZUPi5Db2xsZWN0aW9uPig8Q29sbGVjdGlvblN0b3JhZ2VQYXRoPikgICAgICAgICAgICAKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGNhcCwgYXQ6IDxDb2xsZWN0aW9uUHVibGljUGF0aD4pCgogICAgICAgIH0KICAgIH0KfQ==",
                "getCatalogTypeData": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDYXRhbG9nVHlwZURhdGEgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE5GVENhdGFsb2cgZnJvbSAweE5GVENhdGFsb2cKCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6IHtTdHJpbmcgOiB7U3RyaW5nIDogQm9vbH19IHsKICBsZXQgY2F0YWxvZyA9IE5GVENhdGFsb2cuZ2V0Q2F0YWxvZ1R5cGVEYXRhKCkKICByZXR1cm4gY2F0YWxvZwp9",
                "getNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRORlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKCmFjY2VzcyhhbGwpIHN0cnVjdCBWaWV3SW5mbyB7CiAgYWNjZXNzKGFsbCkgbGV0IG5hbWU6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBkZXNjcmlwdGlvbjogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0KICBhY2Nlc3MoYWxsKSBsZXQgcmFyaXR5OiBTdHJpbmc/CgogIGluaXQobmFtZTogU3RyaW5nLCBkZXNjcmlwdGlvbjogU3RyaW5nLCB0aHVtYm5haWw6IHtNZXRhZGF0YVZpZXdzLkZpbGV9LCByYXJpdHk6IFN0cmluZz8pIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbgogICAgc2VsZi50aHVtYm5haWwgPSB0aHVtYm5haWwKICAgIHNlbGYucmFyaXR5ID0gcmFyaXR5CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSWQ6IFN0cmluZywgdG9rZW5JRHM6IFtVSW50NjRdKToge1VJbnQ2NDogVmlld0luZm99IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzOiB7VUludDY0OiBWaWV3SW5mb30gPSB7fQogIHZhciBjb2xsZWN0aW9uRGlzcGxheUZldGNoZWQgPSBmYWxzZQoKICBpZiB0b2tlbklEcy5sZW5ndGggPT0gMCB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoSWQpIQogIGxldCBwdWJsaWNQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBwYXRoSWQpIQogIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKQogIGlmIHR5cGUgPT0gbmlsIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCgogIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZSEuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQogIGlmICFjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgbmFtZTogcGF0aElkLAogICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiAiIiksCiAgICAgICAgcmFyaXR5OiBuaWwKICAgICAgKQogICAgfQogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PihwdWJsaWNQYXRoKQogIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYhLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRCkKICAgIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0RGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICB2YXIgcmFyaXR5RGVzYzogU3RyaW5nPyA9IG5pbAogICAgICAgIGlmIGxldCByYXJpdHlWaWV3ID0gTWV0YWRhdGFWaWV3cy5nZXRSYXJpdHkocmVzb2x2ZXIhKSB7CiAgICAgICAgICByYXJpdHlEZXNjID0gcmFyaXR5Vmlldy5kZXNjcmlwdGlvbgogICAgICAgIH0KCiAgICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgICBuYW1lOiBkaXNwbGF5Lm5hbWUsCiAgICAgICAgICBkZXNjcmlwdGlvbjogZGlzcGxheS5kZXNjcmlwdGlvbiwKICAgICAgICAgIHRodW1ibmFpbDogZGlzcGxheS50aHVtYm5haWwsCiAgICAgICAgICByYXJpdHk6IHJhcml0eURlc2MKICAgICAgICApCiAgICAgIH0gCiAgICB9CiAgIGVsc2UgewogICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICBuYW1lOiBwYXRoSWQsCiAgICAgICAgZGVzY3JpcHRpb246ICIiLAogICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6ICIiKSwKICAgICAgICByYXJpdHk6IG5pbAogICAgICApCiAgICB9CiAgfQogIHJldHVybiByZXMKfQ==",
                "getNFTCollection": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRORlRDb2xsZWN0aW9uIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCQppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCgoKYWNjZXNzKGFsbCkgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICBhY2Nlc3MoYWxsKSBsZXQgbmFtZTogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IHNxdWFyZUltYWdlOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgbWVkaWFUeXBlOiBTdHJpbmcKCiAgaW5pdChuYW1lOiBTdHJpbmcsIHNxdWFyZUltYWdlOiBTdHJpbmcsIG1lZGlhVHlwZTogU3RyaW5nKSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLnNxdWFyZUltYWdlID0gc3F1YXJlSW1hZ2UKICAgIHNlbGYubWVkaWFUeXBlID0gbWVkaWFUeXBlCiAgfQp9CgphY2Nlc3MoYWxsKSBzdHJ1Y3QgTkZUQ29sbGVjdGlvbiB7CiAgYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgcGF0aDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogIGFjY2VzcyhhbGwpIGxldCBpZExpc3Q6IFtVSW50NjRdCgogIGluaXQoaWQ6U3RyaW5nLCBwYXRoOiBTdHJpbmcsIGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PywgaWRMaXN0OiBbVUludDY0XSkgewogICAgc2VsZi5pZCA9IGlkCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICBzZWxmLmlkTGlzdCA9IGlkTGlzdAogIH0KfQoKYWNjZXNzKGFsbCkgZnVuIGdldERpc3BsYXkoYWRkcmVzczogQWRkcmVzcywgc3RvcmFnZVBhdGg6IFN0b3JhZ2VQYXRoLCBwdWJsaWNQYXRoOiBQdWJsaWNQYXRoKTogQ29sbGVjdGlvbkRpc3BsYXk/IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzb3VyY2VUeXBlID0gVHlwZTxAQW55UmVzb3VyY2U+KCkKICBsZXQgY29sbGVjdGlvblR5cGUgPSBUeXBlPEB7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oKQogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgdmFyIGl0ZW06IENvbGxlY3Rpb25EaXNwbGF5PyA9ICBuaWwKCiAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkgewogICAgICBsZXQgaXNSZXNvdXJjZSA9IHR5cGUuaXNTdWJ0eXBlKG9mOiByZXNvdXJjZVR5cGUpCiAgICAgIGxldCBpc05GVENvbGxlY3Rpb24gPSB0eXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpCiAgICAgIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCgogICAgICB2YXIgdG9rZW5JRHM6IFtVSW50NjRdID0gW10KICAgICAgaWYgaXNORlRDb2xsZWN0aW9uICYmIGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgICAgIGlmIGxldCBjb2xsZWN0aW9uUmVmID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbiwgTm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHB1YmxpY1BhdGgpIHsKICAgICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvblJlZi5nZXRJRHMoKQoKICAgICAgICAgIC8vIFRPRE86IG1vdmUgdG8gYSBsaXN0CiAgICAgICAgICBpZiB0b2tlbklEcy5sZW5ndGggPiAwIHsKICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZi5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSURzWzBdKQogICAgICAgICAgICBpZiByZXNvbHZlciAhPSBuaWwgewogICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICAgICAgaXRlbSA9IENvbGxlY3Rpb25EaXNwbGF5KAogICAgICAgICAgICAgICAgICBuYW1lOiBkaXNwbGF5Lm5hbWUsCiAgICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlLmZpbGUudXJpKCksCiAgICAgICAgICAgICAgICAgIG1lZGlhVHlwZTogZGlzcGxheS5zcXVhcmVJbWFnZS5tZWRpYVR5cGUKICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9CgogIHJldHVybiBpdGVtCn0KCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSUQ6IFN0cmluZyk6IE5GVENvbGxlY3Rpb24gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJRCkhCiAgbGV0IGNvbGxlY3Rpb24gPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9ufT4ocHVibGljUGF0aCkhCiAgcmV0dXJuIE5GVENvbGxlY3Rpb24oCiAgICBpZDogYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSEuaWRlbnRpZmllciwKICAgIHBhdGg6IHN0b3JhZ2VQYXRoLnRvU3RyaW5nKCksCiAgICBkaXNwbGF5OiBnZXREaXNwbGF5KGFkZHJlc3M6IGFkZHJlc3MsIHN0b3JhZ2VQYXRoOiBzdG9yYWdlUGF0aCwgcHVibGljUGF0aDogcHVibGljUGF0aCksCiAgICBpZExpc3Q6IGNvbGxlY3Rpb24uZ2V0SURzKCkKICApCn0=",
                "getNFTDisplays": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRORlREaXNwbGF5cyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgVmlld0luZm8gewphY2Nlc3MoYWxsKSBsZXQgbmFtZTogU3RyaW5nCmFjY2VzcyhhbGwpIGxldCBkZXNjcmlwdGlvbjogU3RyaW5nCmFjY2VzcyhhbGwpIGxldCB0aHVtYm5haWw6IHtNZXRhZGF0YVZpZXdzLkZpbGV9CmFjY2VzcyhhbGwpIGxldCByYXJpdHk6IFN0cmluZz8KYWNjZXNzKGFsbCkgbGV0IGNvbGxlY3Rpb25EaXNwbGF5OiBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EaXNwbGF5PwoKaW5pdChuYW1lOiBTdHJpbmcsIGRlc2NyaXB0aW9uOiBTdHJpbmcsIHRodW1ibmFpbDoge01ldGFkYXRhVmlld3MuRmlsZX0sIHJhcml0eTogU3RyaW5nPywgY29sbGVjdGlvbkRpc3BsYXk6IE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRpc3BsYXk/KSB7CiAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICBzZWxmLmRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24KICAgIHNlbGYudGh1bWJuYWlsID0gdGh1bWJuYWlsCiAgICBzZWxmLnJhcml0eSA9IHJhcml0eQogICAgc2VsZi5jb2xsZWN0aW9uRGlzcGxheSA9IGNvbGxlY3Rpb25EaXNwbGF5CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSUQ6IFN0cmluZywgdG9rZW5JRHM6IFtVSW50NjRdKToge1VJbnQ2NDogVmlld0luZm99IHsKICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICBsZXQgcmVzOiB7VUludDY0OiBWaWV3SW5mb30gPSB7fQogIHZhciBjb2xsZWN0aW9uRGlzcGxheUZldGNoZWQgPSBmYWxzZQoKICBpZiB0b2tlbklEcy5sZW5ndGggPT0gMCB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoSUQpIQogIGxldCBwdWJsaWNQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBwYXRoSUQpIQogIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKQogIGlmIHR5cGUgPT0gbmlsIHsKICAgIHJldHVybiByZXMKICB9CgogIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCgogIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZSEuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQogIGlmICFjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgbmFtZTogcGF0aElELAogICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiAiIiksCiAgICAgICAgcmFyaXR5OiBuaWwsCiAgICAgICAgY29sbGVjdGlvbkRpc3BsYXk6IG5pbAogICAgICApCiAgICB9CiAgICByZXR1cm4gcmVzCiAgfQoKICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb24sIE5vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PihwdWJsaWNQYXRoKQogIGZvciB0b2tlbklEIGluIHRva2VuSURzIHsKICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYhLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRCkKICAgIGlmIHJlc29sdmVyICE9IG5pbCB7CiAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXREaXNwbGF5KHJlc29sdmVyISkgewogICAgICB2YXIgcmFyaXR5RGVzYzogU3RyaW5nPyA9IG5pbAogICAgICBpZiBsZXQgcmFyaXR5VmlldyA9IE1ldGFkYXRhVmlld3MuZ2V0UmFyaXR5KHJlc29sdmVyISkgewogICAgICAgICAgcmFyaXR5RGVzYyA9IHJhcml0eVZpZXcuZGVzY3JpcHRpb24KICAgICAgICB9CgogICAgICAgIHZhciBjb2xsZWN0aW9uRGlzcGxheTogTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGlzcGxheT8gPSBuaWwKICAgICAgICBpZiAoIWNvbGxlY3Rpb25EaXNwbGF5RmV0Y2hlZCkgewogICAgICAgICAgaWYgbGV0IGNEaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICAgICAgY29sbGVjdGlvbkRpc3BsYXkgPSBjRGlzcGxheQogICAgICAgICAgICBjb2xsZWN0aW9uRGlzcGxheUZldGNoZWQgPSB0cnVlCiAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICByZXNbdG9rZW5JRF0gPSBWaWV3SW5mbygKICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgIGRlc2NyaXB0aW9uOiBkaXNwbGF5LmRlc2NyaXB0aW9uLAogICAgICAgICAgdGh1bWJuYWlsOiBkaXNwbGF5LnRodW1ibmFpbCwKICAgICAgICAgIHJhcml0eTogcmFyaXR5RGVzYywKICAgICAgICAgIGNvbGxlY3Rpb25EaXNwbGF5OiBjb2xsZWN0aW9uRGlzcGxheQogICAgICAgICkKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgcmVzW3Rva2VuSURdID0gVmlld0luZm8oCiAgICAgICAgbmFtZTogcGF0aElELAogICAgICAgIGRlc2NyaXB0aW9uOiAiIiwKICAgICAgICB0aHVtYm5haWw6IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiAiIiksCiAgICAgICAgcmFyaXR5OiBuaWwsCiAgICAgICAgY29sbGVjdGlvbkRpc3BsYXk6IG5pbAogICAgICApCiAgICB9CiAgfQogIHJldHVybiByZXMKfQ==",
                "getNFTMetadataViews": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRORlRNZXRhZGF0YVZpZXdzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRhdGEgewogIGFjY2VzcyhhbGwpIGxldCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgKICBhY2Nlc3MoYWxsKSBsZXQgcHVibGljUGF0aDogUHVibGljUGF0aAogIGFjY2VzcyhhbGwpIGxldCBwcm92aWRlclBhdGg6IFByaXZhdGVQYXRoCiAgYWNjZXNzKGFsbCkgbGV0IHB1YmxpY0NvbGxlY3Rpb246IFR5cGUKICBhY2Nlc3MoYWxsKSBsZXQgcHVibGljTGlua2VkVHlwZTogVHlwZQogIGFjY2VzcyhhbGwpIGxldCBwcm92aWRlckxpbmtlZFR5cGU6IFR5cGUKCiAgaW5pdCgKICAgIHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aCwKICAgIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgsCiAgICBwcm92aWRlclBhdGg6IFByaXZhdGVQYXRoLAogICAgcHVibGljQ29sbGVjdGlvbjogVHlwZSwKICAgIHB1YmxpY0xpbmtlZFR5cGU6IFR5cGUsCiAgICBwcm92aWRlckxpbmtlZFR5cGU6IFR5cGUKICApIHsKICAgIHNlbGYuc3RvcmFnZVBhdGggPSBzdG9yYWdlUGF0aAogICAgc2VsZi5wdWJsaWNQYXRoID0gcHVibGljUGF0aAogICAgc2VsZi5wcm92aWRlclBhdGggPSBwcm92aWRlclBhdGgKICAgIHNlbGYucHVibGljQ29sbGVjdGlvbiA9IHB1YmxpY0NvbGxlY3Rpb24KICAgIHNlbGYucHVibGljTGlua2VkVHlwZSA9IHB1YmxpY0xpbmtlZFR5cGUKICAgIHNlbGYucHJvdmlkZXJMaW5rZWRUeXBlID0gcHJvdmlkZXJMaW5rZWRUeXBlCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoSWQ6IFN0cmluZywgdG9rZW5JRDogVUludDY0KToge1N0cmluZzogQW55U3RydWN0fSB7CiAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHJlczoge1N0cmluZzogQW55U3RydWN0fSA9IHt9CgogIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6IHBhdGhJZCkhCiAgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb24sIFZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PihwdWJsaWNQYXRoKQogIGlmIGNvbGxlY3Rpb25SZWYgPT0gbmlsIHsKICAgIHBhbmljKCJHZXQgQ29sbGVjdGlvbiBGYWlsZWQiKQogIH0KCiAgbGV0IHR5cGUgPSBhY2NvdW50LnN0b3JhZ2UudHlwZShhdDogc3RvcmFnZVBhdGgpCiAgaWYgdHlwZSA9PSBuaWwgewogICAgcmV0dXJuIHJlcwogIH0KCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICBsZXQgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyA9IHR5cGUhLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgaWYgKCFjb25mb3JtZWRNZXRhZGF0YVZpZXdzKSB7CiAgICByZXR1cm4gcmVzCiAgfQoKICBjb2xsZWN0aW9uUmVmIS5ib3Jyb3dORlQodG9rZW5JRCkKCiAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZiEuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEKSEKICBpZiByZXNvbHZlciAhPSBuaWwgewogICAgaWYgbGV0IHJhcml0eSA9IE1ldGFkYXRhVmlld3MuZ2V0UmFyaXR5KHJlc29sdmVyKSB7CiAgICAgIHJlc1sicmFyaXR5Il0gPSByYXJpdHkKICAgIH0KCiAgICBpZiBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuZ2V0RGlzcGxheShyZXNvbHZlcikgewogICAgICByZXNbImRpc3BsYXkiXSA9IGRpc3BsYXkKICAgIH0KCiAgICBpZiBsZXQgZWRpdGlvbnMgPSBNZXRhZGF0YVZpZXdzLmdldEVkaXRpb25zKHJlc29sdmVyKSB7CiAgICAgIHJlc1siZWRpdGlvbnMiXSA9IGVkaXRpb25zCiAgICB9CgogICAgaWYgbGV0IHNlcmlhbCA9IE1ldGFkYXRhVmlld3MuZ2V0U2VyaWFsKHJlc29sdmVyKSB7CiAgICAgIHJlc1sic2VyaWFsIl0gPSBzZXJpYWwKICAgIH0KCiAgICBpZiBsZXQgcm95YWx0aWVzID0gTWV0YWRhdGFWaWV3cy5nZXRSb3lhbHRpZXMocmVzb2x2ZXIpIHsKICAgICAgcmVzWyJyb3lhbHRpZXMiXSA9IHJveWFsdGllcwogICAgfQoKICAgIGlmIGxldCBsaWNlbnNlID0gTWV0YWRhdGFWaWV3cy5nZXRMaWNlbnNlKHJlc29sdmVyKSB7CiAgICAgIHJlc1sibGljZW5zZSJdID0gbGljZW5zZQogICAgfQoKICAgIGlmIGxldCBtZWRpYXMgPSBNZXRhZGF0YVZpZXdzLmdldE1lZGlhcyhyZXNvbHZlcikgewogICAgICByZXNbIm1lZGlhcyJdID0gbWVkaWFzCiAgICB9CgogICAgaWYgbGV0IGV4dGVybmFsVVJMID0gTWV0YWRhdGFWaWV3cy5nZXRFeHRlcm5hbFVSTChyZXNvbHZlcikgewogICAgICByZXNbImV4dGVybmFsVVJMIl0gPSBleHRlcm5hbFVSTAogICAgfQoKICAgIGlmIGxldCB0cmFpdHMgPSBNZXRhZGF0YVZpZXdzLmdldFRyYWl0cyhyZXNvbHZlcikgewogICAgICByZXNbInRyYWl0cyJdID0gdHJhaXRzCiAgICB9CgogICAgaWYgbGV0IGNvbGxlY3Rpb25EaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlcikgewogICAgICByZXNbImNvbGxlY3Rpb25EaXNwbGF5Il0gPSBjb2xsZWN0aW9uRGlzcGxheQogICAgfQoKICAgIGlmIGxldCBjb2xsZWN0aW9uRGF0YSA9IE1ldGFkYXRhVmlld3MuZ2V0TkZUQ29sbGVjdGlvbkRhdGEocmVzb2x2ZXIpIHsKICAgICAgbGV0IGRhdGEgPSBDb2xsZWN0aW9uRGF0YSgKICAgICAgICBzdG9yYWdlUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgsCiAgICAgICAgcHVibGljUGF0aDogY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCwKICAgICAgICBwcm92aWRlclBhdGg6IGNvbGxlY3Rpb25EYXRhLnByb3ZpZGVyUGF0aCwKICAgICAgICBwdWJsaWNDb2xsZWN0aW9uOiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNDb2xsZWN0aW9uLAogICAgICAgIHB1YmxpY0xpbmtlZFR5cGU6IGNvbGxlY3Rpb25EYXRhLnB1YmxpY0xpbmtlZFR5cGUsCiAgICAgICAgcHJvdmlkZXJMaW5rZWRUeXBlOiBjb2xsZWN0aW9uRGF0YS5wcm92aWRlckxpbmtlZFR5cGUKICAgICAgKQogICAgICByZXNbImNvbGxlY3Rpb25EYXRhIl0gPSBkYXRhCiAgICB9CiAgfQogIHJlc1sidG9rZW5JZCJdID0gdG9rZW5JRAoKICByZXR1cm4gcmVzCn0=",
                "getUserCollections": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRVc2VyQ29sbGVjdGlvbnMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4Vmlld1Jlc29sdmVyCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgQ29sbGVjdGlvbkRpc3BsYXkgewogIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgc3F1YXJlSW1hZ2U6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBtZWRpYVR5cGU6IFN0cmluZwoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IFN0cmluZywgbWVkaWFUeXBlOiBTdHJpbmcpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgc2VsZi5tZWRpYVR5cGUgPSBtZWRpYVR5cGUKICB9Cn0KCmFjY2VzcyhhbGwpIHN0cnVjdCBORlRDb2xsZWN0aW9uIHsKICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKSBsZXQgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/CiAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KCiAgaW5pdChpZDpTdHJpbmcsIHBhdGg6IFN0cmluZywgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LCBpZExpc3Q6IFtVSW50NjRdKSB7CiAgICBzZWxmLmlkID0gaWQKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYuZGlzcGxheSA9IGRpc3BsYXkKICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gZ2V0RGlzcGxheShhZGRyZXNzOiBBZGRyZXNzLCBzdG9yYWdlUGF0aDogU3RvcmFnZVBhdGgsIHB1YmxpY1BhdGg6IFB1YmxpY1BhdGgpOiBDb2xsZWN0aW9uRGlzcGxheT8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEB7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHN0b3JhZ2VQYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgdG9rZW5JRHMgPSBjb2xsZWN0aW9uUmVmLmdldElEcygpCgogICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgIGlmIHRva2VuSURzLmxlbmd0aCA+IDAgCiAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9SYXJpYmxlTkZUQ29sbGVjdGlvbiAKICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvQXJsZWVTY2VuZSB7CiAgICAgICAgICAgIGxldCByZXNvbHZlciA9IGNvbGxlY3Rpb25SZWYuYm9ycm93Vmlld1Jlc29sdmVyKGlkOiB0b2tlbklEc1swXSkKICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgIGlmIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5nZXRORlRDb2xsZWN0aW9uRGlzcGxheShyZXNvbHZlciEpIHsKICAgICAgICAgICAgICAgIGl0ZW0gPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICBzcXVhcmVJbWFnZTogZGlzcGxheS5zcXVhcmVJbWFnZS5maWxlLnVyaSgpLAogICAgICAgICAgICAgICAgICBtZWRpYVR5cGU6IGRpc3BsYXkuc3F1YXJlSW1hZ2UubWVkaWFUeXBlCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfQoKICByZXR1cm4gaXRlbQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbTkZUQ29sbGVjdGlvbl0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IGNvbGxlY3Rpb25QYXRoczogW1N0b3JhZ2VQYXRoXSA9IFtdCiAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQoKICBmdW4gZWFjaFBhdGgocGF0aDogU3RvcmFnZVBhdGgsIFR5cGU6IFR5cGUpOiBCb29sIHsKICAgCiAgICBpZiBUeXBlICE9IG5pbCB7CiAgICAgIGlmIFR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkgewogICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgfQogICAgICAKICAgIH0KICAgCiAgICByZXR1cm4gdHJ1ZQogIH0KCiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZWFjaFBhdGgpCgogIGZvciBwYXRoIGluIGNvbGxlY3Rpb25QYXRocyB7CiAgICBsZXQgcGF0aFN0ciA9IHBhdGgudG9TdHJpbmcoKQogICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgIGxldCBpZGVudGlmaWVyID0gc3BsaXRBcnJbMl0KICAgIGxldCBwdWJQYXRoID0gUHVibGljUGF0aChpZGVudGlmaWVyOiBpZGVudGlmaWVyKSEKICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQoKICAgIGNvbGxlY3Rpb25zLmFwcGVuZCgKICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgaWQ6IGlkZW50aWZpZXIsCiAgICAgIHBhdGg6IHB1YlBhdGgudG9TdHJpbmcoKSwKICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgIGlkTGlzdDogY29sbGVjdGlvbi5nZXRJRHMoKQogICAgICApCiAgICApCiAgfQoKCiAgcmV0dXJuIGNvbGxlY3Rpb25zCn0=",
                "getUserCollectionsPage": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRVc2VyQ29sbGVjdGlvbnNQYWdlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwogIGltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweFZpZXdSZXNvbHZlcgogIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCiAgCiAgYWNjZXNzKGFsbCkgc3RydWN0IENvbGxlY3Rpb25EaXNwbGF5IHsKICAgIGFjY2VzcyhhbGwpIGxldCBuYW1lOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCBzcXVhcmVJbWFnZTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgbWVkaWFUeXBlOiBTdHJpbmcKICAKICAgIGluaXQobmFtZTogU3RyaW5nLCBzcXVhcmVJbWFnZTogU3RyaW5nLCBtZWRpYVR5cGU6IFN0cmluZykgewogICAgICBzZWxmLm5hbWUgPSBuYW1lCiAgICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogICAgICBzZWxmLm1lZGlhVHlwZSA9IG1lZGlhVHlwZQogICAgfQogIH0KICAKICBhY2Nlc3MoYWxsKSBzdHJ1Y3QgTkZUQ29sbGVjdGlvbiB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogICAgYWNjZXNzKGFsbCkgbGV0IGlkTGlzdDogW1VJbnQ2NF0KICAKICAgIGluaXQoaWQ6U3RyaW5nLCBwYXRoOiBTdHJpbmcsIGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PywgaWRMaXN0OiBbVUludDY0XSkgewogICAgICBzZWxmLmlkID0gaWQKICAgICAgc2VsZi5wYXRoID0gcGF0aAogICAgICBzZWxmLmRpc3BsYXkgPSBkaXNwbGF5CiAgICAgIHNlbGYuaWRMaXN0ID0gaWRMaXN0CiAgICB9CiAgfQogIAogIGFjY2VzcyhhbGwpIGZ1biBnZXREaXNwbGF5KGFkZHJlc3M6IEFkZHJlc3MsIHN0b3JhZ2VQYXRoOiBTdG9yYWdlUGF0aCwgcHVibGljUGF0aDogUHVibGljUGF0aCk6IENvbGxlY3Rpb25EaXNwbGF5PyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBtZXRhZGF0YVZpZXdUeXBlID0gVHlwZTxAe1ZpZXdSZXNvbHZlci5SZXNvbHZlckNvbGxlY3Rpb259PigpCiAgICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAogIAogICAgICBpZiBsZXQgdHlwZSA9IGFjY291bnQuc3RvcmFnZS50eXBlKGF0OiBzdG9yYWdlUGF0aCkgewogICAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICAgIGxldCBjb25mb3JtZWRNZXRhZGF0YVZpZXdzID0gdHlwZS5pc1N1YnR5cGUob2Y6IG1ldGFkYXRhVmlld1R5cGUpCiAgCiAgICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgICAgaWYgaXNORlRDb2xsZWN0aW9uICYmIGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgewogICAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4ocHVibGljUGF0aCkgewogICAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKICAKICAgICAgICAgICAgLy8gVE9ETzogbW92ZSB0byBhIGxpc3QKICAgICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICAgJiYgc3RvcmFnZVBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAgICYmIHN0b3JhZ2VQYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgICAmJiBzdG9yYWdlUGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uUmVmLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogdG9rZW5JRHNbMF0pCiAgICAgICAgICAgICAgaWYgcmVzb2x2ZXIgIT0gbmlsIHsKICAgICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyISkgewogICAgICAgICAgICAgICAgICBpdGVtID0gQ29sbGVjdGlvbkRpc3BsYXkoCiAgICAgICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlLmZpbGUudXJpKCksCiAgICAgICAgICAgICAgICAgICAgbWVkaWFUeXBlOiBkaXNwbGF5LnNxdWFyZUltYWdlLm1lZGlhVHlwZQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIAogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgCiAgICByZXR1cm4gaXRlbQogIH0KICAKICBhY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHN0YXJ0OiBJbnQsIGVuZDogSW50KTogW05GVENvbGxlY3Rpb25dIHsKICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KCkKICAgIGxldCBjb2xsZWN0aW9uUGF0aHM6IFtTdG9yYWdlUGF0aF0gPSBbXQogICAgbGV0IGNvbGxlY3Rpb25zOiBbTkZUQ29sbGVjdGlvbl0gPSBbXQogIAogICAgZnVuIGVhY2hQYXRoKHBhdGg6IFN0b3JhZ2VQYXRoLCBUeXBlOiBUeXBlKTogQm9vbCB7CiAgICAgCiAgICAgIGlmIFR5cGUgIT0gbmlsIHsKICAgICAgICBpZiBUeXBlLmlzU3VidHlwZShvZjogY29sbGVjdGlvblR5cGUpIHsKICAgICAgICAgIGNvbGxlY3Rpb25QYXRocy5hcHBlbmQocGF0aCkKICAgICAgICB9CiAgICAgICAgCiAgICAgIH0KICAgICAKICAgICAgcmV0dXJuIHRydWUKICAgIH0KICAKICAgIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGVhY2hQYXRoKQogIAogICAgZm9yIHBhdGggaW4gY29sbGVjdGlvblBhdGhzIHsKICAgICAgbGV0IHBhdGhTdHIgPSBwYXRoLnRvU3RyaW5nKCkKICAgICAgbGV0IHNwbGl0QXJyID0gcGF0aFN0ci5zcGxpdChzZXBhcmF0b3I6ICIvIikKICAgICAgbGV0IGlkZW50aWZpZXIgPSBzcGxpdEFyclsyXQogICAgICBsZXQgcHViUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogaWRlbnRpZmllcikhCiAgICAgIGxldCBjb2xsZWN0aW9uID0gIGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KHB1YlBhdGgpIQogIAogICAgICBjb2xsZWN0aW9ucy5hcHBlbmQoCiAgICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgICBpZDogaWRlbnRpZmllciwKICAgICAgICBwYXRoOiBwdWJQYXRoLnRvU3RyaW5nKCksCiAgICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBhZGRyZXNzLCBzdG9yYWdlUGF0aDogcGF0aCwgcHVibGljUGF0aDogcHViUGF0aCksCiAgICAgICAgaWRMaXN0OiBjb2xsZWN0aW9uLmdldElEcygpCiAgICAgICAgKQogICAgICApCiAgICAgIAogICAgfQoKICAgIGxldCBsZW4gPSBjb2xsZWN0aW9ucy5sZW5ndGgKICAgIHZhciBlbmROdW4gPSBlbmQKICAgIGlmIGxlbiA8IHN0YXJ0IHsKICAgICAgcmV0dXJuIFtdCiAgICB9IGVsc2UgewogICAgICBpZiBsZW4gPCBlbmQgewogICAgICAgIGVuZE51biA9IGxlbgogICAgICB9CiAgICB9CiAgICAKICAgIHJldHVybiBjb2xsZWN0aW9ucy5zbGljZShmcm9tOiBzdGFydCwgdXBUbzogZW5kTnVuICkKICB9",
                "sendNbaNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kTmJhTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgovLyBUaGlzIHRyYW5zYWN0aW9uIGlzIGZvciB0cmFuc2ZlcnJpbmcgYW5kIE5GVCBmcm9tCi8vIG9uZSBhY2NvdW50IHRvIGFub3RoZXIKdHJhbnNhY3Rpb24ocmVjaXBpZW50OiBBZGRyZXNzLCB3aXRoZHJhd0lEOiBVSW50NjQpIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCiAgICAgICAgLy8gYm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXInJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlCiAgICAgICAgLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oZnJvbTogL3N0b3JhZ2UvTW9tZW50Q29sbGVjdGlvbikKICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXInJ3MgY29sbGVjdGlvbiIpCiAgICAgICAgbGV0IHNlbmRlclJlZiA9IHNpZ25lcgogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKQogICAgICAgIC8vIGJvcnJvdyBhIHB1YmxpYyByZWZlcmVuY2UgdG8gdGhlIHJlY2VpdmVycyBjb2xsZWN0aW9uCiAgICAgICAgbGV0IHJlY2lwaWVudFJlZiA9IHJlY2lwaWVudAogICAgICAgIC5jYXBhYmlsaXRpZXMKICAgICAgICAuYm9ycm93PCZ7VG9wU2hvdC5Nb21lbnRDb2xsZWN0aW9uUHVibGljfT4oL3B1YmxpYy9Nb21lbnRDb2xsZWN0aW9uKSA/PyBwYW5pYygiVW5hYmxlIHRvIGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UiKQogICAgICAgIAogICAgICAgIC8vIHdpdGhkcmF3IHRoZSBORlQgZnJvbSB0aGUgb3duZXInJ3MgY29sbGVjdGlvbgogICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiB3aXRoZHJhd0lEKQogICAgICAgIC8vIERlcG9zaXQgdGhlIE5GVCBpbiB0aGUgcmVjaXBpZW50JydzIGNvbGxlY3Rpb24KICAgICAgICByZWNpcGllbnRSZWYhLmRlcG9zaXQodG9rZW46IDwtbmZ0KQogICAgfQp9",
                "sendNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKLy8gVGhpcyB0cmFuc2FjdGlvbiBpcyBmb3IgdHJhbnNmZXJyaW5nIGFuZCBORlQgZnJvbQovLyBvbmUgYWNjb3VudCB0byBhbm90aGVyCgp0cmFuc2FjdGlvbihyZWNpcGllbnQ6IEFkZHJlc3MsIHdpdGhkcmF3SUQ6IFVJbnQ2NCkgewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIC8vIGdldCB0aGUgcmVjaXBpZW50cyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgTkZUIGNvbGxlY3Rpb24KICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KGZyb206IDxDb2xsZWN0aW9uU3RvcmFnZVBhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gYm9ycm93IGEgcHVibGljIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXJzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgZGVwb3NpdFJlZiA9IHJlY2lwaWVudAogICAgICAgICAgICAuY2FwYWJpbGl0aWVzCiAgICAgICAgICAgIC5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259Pig8Q29sbGVjdGlvblB1YmxpY1BhdGg+KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXIncyBjb2xsZWN0aW9uIikKCiAgICAgICAgLy8gd2l0aGRyYXcgdGhlIE5GVCBmcm9tIHRoZSBvd25lcidzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogd2l0aGRyYXdJRCkKCiAgICAgICAgLy8gRGVwb3NpdCB0aGUgTkZUIGluIHRoZSByZWNpcGllbnQncyBjb2xsZWN0aW9uCiAgICAgICAgZGVwb3NpdFJlZi5kZXBvc2l0KHRva2VuOiA8LW5mdCkKICAgIH0KfQ=="
            },
            "contract": {
                "getContractByName": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDb250cmFjdEJ5TmFtZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBhY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBjb250cmFjdE5hbWU6IFN0cmluZyk6IFN0cmluZz8gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBkZXBsb3llZENvbnRyYWN0ID0gYWNjb3VudC5jb250cmFjdHMuZ2V0KG5hbWU6IGNvbnRyYWN0TmFtZSkKCiAgcmV0dXJuIFN0cmluZy5mcm9tVVRGOChkZXBsb3llZENvbnRyYWN0Py5jb2RlISkKfQ==",
                "getContractNames": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDb250cmFjdE5hbWVzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiAmW1N0cmluZ10gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIHJldHVybiBhY2NvdW50LmNvbnRyYWN0cy5uYW1lcwp9"
            },
            "evm": {
                "call": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjYWxsIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oaGV4RW5jb2RlZERhdGE6IFN0cmluZywgaGV4RW5jb2RlZEFkZHJlc3M6IFN0cmluZyk6IFN0cmluZyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KEFkZHJlc3MoMHhDT0EpKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICBsZXQgYWRkcmVzc0J5dGVzID0gaGV4RW5jb2RlZEFkZHJlc3MuZGVjb2RlSGV4KCkudG9Db25zdGFudFNpemVkPFtVSW50ODsgMjBdPigpIQoKICAgIGxldCB0eFJlc3VsdCA9IGNvYS5jYWxsKAogICAgICAgIHRvOiBFVk0uRVZNQWRkcmVzcyhieXRlczogYWRkcmVzc0J5dGVzKSwKICAgICAgICBkYXRhOiBoZXhFbmNvZGVkRGF0YS5kZWNvZGVIZXgoKSwKICAgICAgICBnYXNMaW1pdDogMTUwMDAwMDAsIC8vIHRvZG8gbWFrZSBpdCBjb25maWd1cmFibGUsIG1heCBmb3Igbm93CiAgICAgICAgdmFsdWU6IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgKQoKICAgIGFzc2VydCgKICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICApCgogICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoY2FsbFJlc3VsdC5kYXRhKQp9Cg==",
                "callContract": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjYWxsQ29udHJhY3QgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbih0b0VWTUFkZHJlc3NIZXg6IFN0cmluZywgYW1vdW50OiBVRml4NjQsIGRhdGE6IFtVSW50OF0sIGdhc0xpbWl0OiBVSW50NjQpIHsKCiAgICBsZXQgY29hOiBhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3M6IEVWTS5FVk1BZGRyZXNzCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiAvc3RvcmFnZS9ldm0pID09IG5pbCB7CiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoPC1FVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpLCB0bzogL3N0b3JhZ2UvZXZtKQogICAgICAgIH0KICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5XaXRoZHJhdywgRVZNLkNhbGwpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIHNpZ25lcidzIGJyaWRnZWQgYWNjb3VudCIpCgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyh0b0VWTUFkZHJlc3NIZXgpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgaWYgc2VsZi5yZWNpcGllbnRFVk1BZGRyZXNzLmJ5dGVzID09IHNlbGYuY29hLmFkZHJlc3MoKS5ieXRlcyB7CiAgICAgICAgICAgIHJldHVybgogICAgICAgIH0KICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgdmFsdWVCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgIGdhc0xpbWl0OiBnYXNMaW1pdCwKICAgICAgICAgICAgdmFsdWU6IHZhbHVlQmFsYW5jZQogICAgICAgICkKICAgICAgICBhc3NlcnQoCiAgICAgICAgICAgIHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLmZhaWxlZCB8fCB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5zdWNjZXNzZnVsLAogICAgICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICAgICAgKQogICAgfQp9",
                "checkCoaLink": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja0NvYUxpbmsgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgovLy8gUmV0dXJucyB3aGV0aGVyIGEgQ09BIGlzIHN0b3JlZCBhbmQgaXRzIHB1YmxpYyBjYXBhYmlsaXR5IGlzIHB1Ymxpc2hlZAovLy8KLy8vIEBwYXJhbSBmbG93QWRkcmVzczogVGhlIEZsb3cgYWRkcmVzcyB0byBjaGVjayBmb3IgYSBDT0EKLy8vCi8vLyBAcmV0dXJuIEJvb2w6IFdoZXRoZXIgYSBDT0EgaXMgc3RvcmVkIGFuZCBpdHMgcHVibGljIGNhcGFiaWxpdHkgaXMgcHVibGlzaGVkLCBuaWwgaWYgbm8gQ09BIGlzIHN0b3JlZAovLy8KYWNjZXNzKGFsbCkgZnVuIG1haW4oZmxvd0FkZHJlc3M6IEFkZHJlc3MpOiBCb29sPyB7CiAgICAvLyBCb3Jyb3cgdGhlIENPQSB0byBjaGVjayBpZiBvbmUgaXMgc3RvcmVkCiAgICBpZiBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oZmxvd0FkZHJlc3MpCiAgICAgICAgLnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKT8uYWRkcmVzcygpIHsKICAgICAgICAvLyBDT0EgZm91bmQgLSBjaGVjayBpZiB0aGUgcHVibGljIGNhcGFiaWxpdHkgaXMgcHVibGlzaGVkCiAgICAgICAgcmV0dXJuIGdldEFjY291bnQoZmxvd0FkZHJlc3MpLmNhcGFiaWxpdGllcy5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigvcHVibGljL2V2bSkgIT0gbmlsCiAgICB9CiAgICAvLyBObyBDT0EgZm91bmQgLSByZXR1cm4gbmlsCiAgICByZXR1cm4gbmlsCn0=",
                "coaLink": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjb2FMaW5rIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRoaXMgdHJhbnNhY3Rpb24gcHVibGlzaGVzIGEgcHVibGljICoqdW5lbnRpdGxlZCoqIGNhcGFiaWxpdHkgZm9yIHRoZSBDT0Egc3RvcmVkIGluIHRoZSBzaWduaW5nIGFjY291bnQncyBzdG9yYWdlCi8vLyB3aGVyZSBhIENPQSBoYXMgYWxyZWFkeSBiZWVuIHN0b3JlZC4KLy8vCnRyYW5zYWN0aW9uIHsKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgU3RvcmFnZUNhcGFiaWxpdGllcywgUHVibGlzaENhcGFiaWxpdHksIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLy8gRW5zdXJlIGEgQ09BIGlzIHN0b3JlZAogICAgICAgIGxldCBjb2FQYXRoID0gL3N0b3JhZ2UvZXZtCiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoCiAgICAgICAgICAgICAgICAiQ291bGQgbm90IGZpbmQgQ09BIGluIHN0b3JhZ2UgYXQgcGF0aCAiLmNvbmNhdChjb2FQYXRoLnRvU3RyaW5nKCkpCiAgICAgICAgICAgICAgICAuY29uY2F0KCIuIE1ha2Ugc3VyZSB0aGUgc2lnbmluZyBhY2NvdW50IGhhcyBpbml0aWFsaXplZCBhIENPQSBhdCB0aGUgZXhwZWN0ZWQgcGF0aC4iKQogICAgICAgICAgICApCgogICAgICAgIC8vIFB1Ymxpc2ggYSBwdWJsaWMgKip1bmVudGl0bGVkKiogY2FwYWJpbGl0eQogICAgICAgIGxldCBjb2FQdWJsaWNQYXRoID0gL3B1YmxpYy9ldm0KICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2FQdWJsaWNQYXRoKQogICAgICAgIGxldCBjb2FDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oY29hUGF0aCkKICAgICAgICBzaWduZXIuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY29hQ2FwYWJpbGl0eSwgYXQ6IGNvYVB1YmxpY1BhdGgpCiAgICB9Cn0=",
                "createCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVDb2EgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKCi8vLyBDcmVhdGVzIGEgQ09BIGFuZCBzYXZlcyBpdCBpbiB0aGUgc2lnbmVyJ3MgRmxvdyBhY2NvdW50ICYgcGFzc2luZyB0aGUgZ2l2ZW4gdmFsdWUgb2YgRmxvdyBpbnRvIEZsb3dFVk0KdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQpIHsKICAgIGxldCBzZW50VmF1bHQ6IEBGbG93VG9rZW4uVmF1bHQKICAgIGxldCBhdXRoOiBhdXRoKElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgICAgICBzZWxmLmF1dGggPSBzaWduZXIKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgY29hIDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBjb2EuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQoKICAgICAgICBsb2coY29hLmJhbGFuY2UoKS5pbkZMT1coKSkKICAgICAgICBsZXQgc3RvcmFnZVBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiAiZXZtIikhCiAgICAgICAgbGV0IHB1YmxpY1BhdGggPSBQdWJsaWNQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1jb2EsIHRvOiBzdG9yYWdlUGF0aCkKICAgICAgICBsZXQgYWRkcmVzc2FibGVDYXAgPSBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PihzdG9yYWdlUGF0aCkKICAgICAgICBzZWxmLmF1dGguY2FwYWJpbGl0aWVzLnVucHVibGlzaChwdWJsaWNQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMucHVibGlzaChhZGRyZXNzYWJsZUNhcCwgYXQ6IHB1YmxpY1BhdGgpCiAgICB9Cn0=",
                "createCoaEmpty": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVDb2FFbXB0eSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgoKLy8vIENyZWF0ZXMgYSBDT0EgYW5kIHNhdmVzIGl0IGluIHRoZSBzaWduZXIncyBGbG93IGFjY291bnQgJiBwYXNzaW5nIHRoZSBnaXZlbiB2YWx1ZSBvZiBGbG93IGludG8gRmxvd0VWTQp0cmFuc2FjdGlvbigpIHsKICAgIGxldCBhdXRoOiBhdXRoKElzc3VlU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQogICAgICAgIHNlbGYuYXV0aCA9IHNpZ25lcgogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBjb2EgPC0gRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKQogICAgICAgIGxldCBzdG9yYWdlUGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6ICJldm0iKSEKICAgICAgICBsZXQgcHVibGljUGF0aCA9IFB1YmxpY1BhdGgoaWRlbnRpZmllcjogImV2bSIpIQogICAgICAgIHNlbGYuYXV0aC5zdG9yYWdlLnNhdmU8QEVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pig8LWNvYSwgdG86IHN0b3JhZ2VQYXRoKQogICAgICAgIGxldCBhZGRyZXNzYWJsZUNhcCA9IHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KHN0b3JhZ2VQYXRoKQogICAgICAgIHNlbGYuYXV0aC5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHB1YmxpY1BhdGgpCiAgICAgICAgc2VsZi5hdXRoLmNhcGFiaWxpdGllcy5wdWJsaXNoKGFkZHJlc3NhYmxlQ2FwLCBhdDogcHVibGljUGF0aCkKICAgIH0KfQ==",
                "deployContract": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBkZXBsb3lDb250cmFjdCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHg4YzUzMDNlYWEyNjIwMmQ2CgoKdHJhbnNhY3Rpb24oY29kZTogU3RyaW5nKSB7CiAgICBsZXQgY29hOiBhdXRoKEVWTS5EZXBsb3kpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uRGVwbG95KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgIGZyb206IC9zdG9yYWdlL2V2bSkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBDT0EhIikKCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgIHNlbGYuY29hLmRlcGxveShjb2RlOiBjb2RlLmRlY29kZUhleCgpLCAgZ2FzTGltaXQ6IDE1MDAwMDAwLCB2YWx1ZTogRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApKQogICAgfQp9Cg==",
                "estimateGas": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBlc3RpbWF0ZUdhcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRUeDogU3RyaW5nLCBhZGRyZXNzOiBBZGRyZXNzKTogW1VJbnQ2NDsgMl0gewogICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyZXNzKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICBsZXQgdHhSZXN1bHQgPSBFVk0ucnVuKHR4OiBoZXhFbmNvZGVkVHguZGVjb2RlSGV4KCksIGNvaW5iYXNlOiBjb2EuYWRkcmVzcygpKQoKICAgIGFzc2VydCgKICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICBtZXNzYWdlOiAiZXZtX2Vycm9yPSIuY29uY2F0KHR4UmVzdWx0LmVycm9yTWVzc2FnZSkuY29uY2F0KCJcbiIpCiAgICApCgogICAgcmV0dXJuIFt0eFJlc3VsdC5lcnJvckNvZGUsIHR4UmVzdWx0Lmdhc1VzZWRdCn0K",
                "fundCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBmdW5kQ29hIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CiAgICBsZXQgc2VudFZhdWx0OiBARmxvd1Rva2VuLlZhdWx0CiAgICBsZXQgYXV0aDogYXV0aChTdG9yYWdlKSAmQWNjb3VudAogICAgbGV0IGNvYTogJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigKICAgICAgICAgICAgZnJvbTogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQKICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgb3duZXIncyBWYXVsdCEiKQoKCiAgICAgICAgbGV0IGNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCgogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgICAgIHNlbGYuYXV0aCA9IHNpZ25lcgogICAgICAgIHNlbGYuY29hID0gY29hCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5jb2EuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg==",
                "fundEvmAddr": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBmdW5kRXZtQWRkciAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihldm1BZGRyOiBTdHJpbmcsIGFtb3VudDogVUZpeDY0KSB7CgogICAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcmVkCiAgICBsZXQgc2VudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJjxUb2tlbj4uVmF1bHQ+KGZyb206IDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICAgIGxldCByZWNpcGllbnRBY2NvdW50ID0gZ2V0QWNjb3VudChyZWNpcGllbnQpCgogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnRBY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oPFRva2VuUmVjZWl2ZXJQYXRoPikhCiAgICAgICAgICAgIAogICAgICAgIC8vIERlcG9zaXQgdGhlIHdpdGhkcmF3biB0b2tlbnMgaW4gdGhlIHJlY2lwaWVudCdzIHJlY2VpdmVyCiAgICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9",
                "getAddr": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBZGRyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweDhjNTMwM2VhYTI2MjAyZDYKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGZsb3dBZGRyZXNzOiBBZGRyZXNzKTogU3RyaW5nPyB7CiAgICBpZiBsZXQgYWRkcmVzczogRVZNLkVWTUFkZHJlc3MgPSBnZXRBdXRoQWNjb3VudDxhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudD4oZmxvd0FkZHJlc3MpCiAgICAgICAgLnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKT8uYWRkcmVzcygpIHsKICAgICAgICBsZXQgYnl0ZXM6IFtVSW50OF0gPSBbXQogICAgICAgIGZvciBieXRlIGluIGFkZHJlc3MuYnl0ZXMgewogICAgICAgICAgICBieXRlcy5hcHBlbmQoYnl0ZSkKICAgICAgICB9CiAgICAgICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoYnl0ZXMpCiAgICB9CiAgICByZXR1cm4gbmlsCn0=",
                "getBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oaGV4RW5jb2RlZEFkZHJlc3M6IFN0cmluZyk6IFVJbnQgewogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKICAgIGxldCBhZGRyZXNzID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcykKCiAgICByZXR1cm4gYWRkcmVzcy5iYWxhbmNlKCkuaW5BdHRvRkxPVygpCn0K",
                "getCoaAddr": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDb2FBZGRyIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFN0cmluZyB7CiAgICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHJlc3MpCgogICAgbGV0IGNvYSA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8JkVWTS5DYWRlbmNlT3duZWRBY2NvdW50PigKICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICkKCiAgICBpZiBjb2EgPT0gbmlsIHsgCiAgICAgICAgcmV0dXJuICIiCiAgICB9IGVsc2UgewogICAgICAgIGxldCBjb2FBZGRyID0gY29hPy5hZGRyZXNzKCkgCgogICAgICAgIGxldCBhZGRyQnl0ZTogW1VJbnQ4XSA9IFtdCgogICAgICAgIGZvciBieXRlIGluIGNvYUFkZHI/LmJ5dGVzISB7CiAgICAgICAgICAgIGFkZHJCeXRlLmFwcGVuZChieXRlKQogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIFN0cmluZy5lbmNvZGVIZXgoYWRkckJ5dGUpCiAgICB9Cn0K",
                "getCoaBalance": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDb2FCYWxhbmNlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFVGaXg2NCB7CiAgICAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyZXNzKQoKICAgIGxldCBjb2EgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgZnJvbTogL3N0b3JhZ2UvZXZtCiAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICAKICAgIHJldHVybiBjb2EuYmFsYW5jZSgpLmluRkxPVygpCn0K",
                "getCode": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDb2RlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBFVk0gZnJvbSAweEVWTQoKYWNjZXNzKGFsbCkKZnVuIG1haW4oaGV4RW5jb2RlZEFkZHJlc3M6IFN0cmluZyk6IFN0cmluZyB7CiAgICBsZXQgYWRkcmVzc0J5dGVzID0gaGV4RW5jb2RlZEFkZHJlc3MuZGVjb2RlSGV4KCkudG9Db25zdGFudFNpemVkPFtVSW50ODsgMjBdPigpIQogICAgbGV0IGFkZHJlc3MgPSBFVk0uRVZNQWRkcmVzcyhieXRlczogYWRkcmVzc0J5dGVzKQoKICAgIHJldHVybiBTdHJpbmcuZW5jb2RlSGV4KGFkZHJlc3MuY29kZSgpKQp9Cg==",
                "getNonce": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXROb25jZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRVZNIGZyb20gMHhFVk0KCmFjY2VzcyhhbGwpCmZ1biBtYWluKGhleEVuY29kZWRBZGRyZXNzOiBTdHJpbmcpOiBVSW50NjQgewogICAgbGV0IGFkZHJlc3NCeXRlcyA9IGhleEVuY29kZWRBZGRyZXNzLmRlY29kZUhleCgpLnRvQ29uc3RhbnRTaXplZDxbVUludDg7IDIwXT4oKSEKICAgIGxldCBhZGRyZXNzID0gRVZNLkVWTUFkZHJlc3MoYnl0ZXM6IGFkZHJlc3NCeXRlcykKCiAgICByZXR1cm4gYWRkcmVzcy5ub25jZSgpCn0K",
                "newAccountAndCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBuZXdBY2NvdW50QW5kQ29hIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKdHJhbnNhY3Rpb24ocHVibGljS2V5OiBTdHJpbmcsIHNpZ25hdHVyZUFsZ29yaXRobTogVUludDgsIGhhc2hBbGdvcml0aG06IFVJbnQ4LCB3ZWlnaHQ6IFVGaXg2NCkgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAogICAgbGV0IGF1dGg6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQKCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewoKICAgICAgICBsZXQgYWNjb3VudCA9IEFjY291bnQocGF5ZXI6IHNpZ25lcikKCiAgICAgICAgbGV0IGtleSA9IFB1YmxpY0tleSgKICAgICAgICAgICAgcHVibGljS2V5OiBwdWJsaWNLZXkuZGVjb2RlSGV4KCksCiAgICAgICAgICAgIHNpZ25hdHVyZUFsZ29yaXRobTogU2lnbmF0dXJlQWxnb3JpdGhtKHJhd1ZhbHVlOiBzaWduYXR1cmVBbGdvcml0aG0pIQogICAgICAgICkKCiAgICAgICAgYWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleSwgaGFzaEFsZ29yaXRobTogSGFzaEFsZ29yaXRobShyYXdWYWx1ZTogaGFzaEFsZ29yaXRobSkhLCB3ZWlnaHQ6IHdlaWdodCkKCQkKICAgICAgICBsZXQgdmF1bHRSZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oCiAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWZlcmVuY2UgdG8gdGhlIG93bmVyJ3MgVmF1bHQhIikKCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiAwLjApIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICAgICAgc2VsZi5hdXRoID0gYWNjb3VudAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBhY2NvdW50IDwtIEVWTS5jcmVhdGVDYWRlbmNlT3duZWRBY2NvdW50KCkKICAgICAgICBsb2coYWNjb3VudC5hZGRyZXNzKCkpCiAgICAgICAgYWNjb3VudC5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCgogICAgICAgIGxvZyhhY2NvdW50LmJhbGFuY2UoKSkKICAgICAgICBzZWxmLmF1dGguc3RvcmFnZS5zYXZlPEBFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oPC1hY2NvdW50LCB0bzogU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogImV2bSIpISkKICAgIH0KfQo=",
                "run": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBydW4gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihoZXhFbmNvZGVkVHg6IFN0cmluZykgewogICAgbGV0IGNvYTogJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IHR4UmVzdWx0ID0gRVZNLnJ1bih0eDogaGV4RW5jb2RlZFR4LmRlY29kZUhleCgpLCBjb2luYmFzZTogc2VsZi5jb2EuYWRkcmVzcygpKQogICAgICAgIC8vIHRvZG8gb25seSB0ZW1wb3JhcnkgdW50aWwgd2UgY29ycmVjdGx5IGhhbmRsZSBmYWlsdXJlIGV2ZW50cwogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuZmFpbGVkIHx8IHR4UmVzdWx0LnN0YXR1cyA9PSBFVk0uU3RhdHVzLnN1Y2Nlc3NmdWwsCiAgICAgICAgICAgIG1lc3NhZ2U6ICJldm1fZXJyb3I9Ii5jb25jYXQodHhSZXN1bHQuZXJyb3JNZXNzYWdlKS5jb25jYXQoIlxuIikKICAgICAgICApCiAgICB9Cn0K",
                "transferCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlckNvYSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgYWRkcmVzczogQWRkcmVzcykgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEVWTS5XaXRoZHJhdykgJkFjY291bnQpIHsKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCgogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIGNvYS53aXRoZHJhdyhiYWxhbmNlOiBFVk0uQmFsYW5jZShhdHRvZmxvdzogVUludChhbW91bnQpICogMTAwMDAwMDAwMDAwMDAwMDAwKSkgYXMhIEBGbG93VG9rZW4uVmF1bHQKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBsZXQgYWNjb3VudCA9IGdldEFjY291bnQoYWRkcmVzcykKICAgICAgICBsZXQgcmVjZWl2ZXIgPSBhY2NvdW50LmNhcGFiaWxpdGllcy5ib3Jyb3c8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oL3B1YmxpYy9mbG93VG9rZW5SZWNlaXZlcikhCiAgICAgICAgcmVjZWl2ZXIuZGVwb3NpdChmcm9tOiA8LXNlbGYuc2VudFZhdWx0KQogICAgfQp9Cg==",
                "transferFlowFromCoaToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlckZsb3dGcm9tQ29hVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0LCBhZGRyZXNzOiBBZGRyZXNzKSB7CiAgICBsZXQgc2VudFZhdWx0OiBARmxvd1Rva2VuLlZhdWx0CgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgRVZNLldpdGhkcmF3KSAmQWNjb3VudCkgewogICAgICAgIGxldCBjb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oCiAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2V2bQogICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBDT0EhIikKICAgICAgICBsZXQgd2l0aGRyYXdCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgd2l0aGRyYXdCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIHNlbGYuc2VudFZhdWx0IDwtIGNvYS53aXRoZHJhdyhiYWxhbmNlOiB3aXRoZHJhd0JhbGFuY2UpIGFzISBARmxvd1Rva2VuLlZhdWx0CiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgbGV0IGFjY291bnQgPSBnZXRBY2NvdW50KGFkZHJlc3MpCiAgICAgICAgbGV0IHJlY2VpdmVyID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuYm9ycm93PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KC9wdWJsaWMvZmxvd1Rva2VuUmVjZWl2ZXIpIQogICAgICAgIHJlY2VpdmVyLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgIH0KfQo=",
                "transferFlowToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlckZsb3dUb0V2bUFkZHJlc3MgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKLy8vIFRyYW5zZmVycyAkRkxPVyBmcm9tIHRoZSBzaWduZXIncyBhY2NvdW50IENhZGVuY2UgRmxvdyBiYWxhbmNlIHRvIHRoZSByZWNpcGllbnQncyBoZXgtZW5jb2RlZCBFVk0gYWRkcmVzcy4KLy8vIE5vdGUgdGhhdCBhIENPQSBtdXN0IGhhdmUgYSAkRkxPVyBiYWxhbmNlIGluIEVWTSBiZWZvcmUgdHJhbnNmZXJyaW5nIHZhbHVlIHRvIGFub3RoZXIgRVZNIGFkZHJlc3MuCi8vLwp0cmFuc2FjdGlvbihyZWNpcGllbnRFVk1BZGRyZXNzSGV4OiBTdHJpbmcsIGFtb3VudDogVUZpeDY0LCBnYXNMaW1pdDogVUludDY0KSB7CgogICAgbGV0IGNvYTogYXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCByZWNpcGllbnRFVk1BZGRyZXNzOiBFVk0uRVZNQWRkcmVzcwogICAgdmFyIHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlLCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogL3N0b3JhZ2UvZXZtKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtRVZNLmNyZWF0ZUNhZGVuY2VPd25lZEFjY291bnQoKSwgdG86IC9zdG9yYWdlL2V2bSkKICAgICAgICB9CiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uV2l0aGRyYXcsIEVWTS5DYWxsKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBicmlkZ2VkIGFjY291bnQiKQoKICAgICAgICBsZXQgdmF1bHRSZWYgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PigKICAgICAgICAgICAgICAgIGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVmZXJlbmNlIHRvIHRoZSBvd25lcidzIFZhdWx0ISIpCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpIGFzISBARmxvd1Rva2VuLlZhdWx0CgogICAgICAgIHNlbGYucmVjaXBpZW50RVZNQWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhyZWNpcGllbnRFVk1BZGRyZXNzSGV4KQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuY29hLmRlcG9zaXQoZnJvbTogPC1zZWxmLnNlbnRWYXVsdCkKICAgICAgICAKICAgICAgICBsZXQgdmFsdWVCYWxhbmNlID0gRVZNLkJhbGFuY2UoYXR0b2Zsb3c6IDApCiAgICAgICAgdmFsdWVCYWxhbmNlLnNldEZMT1coZmxvdzogYW1vdW50KQogICAgICAgIGxldCB0eFJlc3VsdCA9IHNlbGYuY29hLmNhbGwoCiAgICAgICAgICAgIHRvOiBzZWxmLnJlY2lwaWVudEVWTUFkZHJlc3MsCiAgICAgICAgICAgIGRhdGE6IFtdLAogICAgICAgICAgICBnYXNMaW1pdDogZ2FzTGltaXQsCiAgICAgICAgICAgIHZhbHVlOiB2YWx1ZUJhbGFuY2UKICAgICAgICApCiAgICAgICAgYXNzZXJ0KAogICAgICAgICAgICB0eFJlc3VsdC5zdGF0dXMgPT0gRVZNLlN0YXR1cy5mYWlsZWQgfHwgdHhSZXN1bHQuc3RhdHVzID09IEVWTS5TdGF0dXMuc3VjY2Vzc2Z1bCwKICAgICAgICAgICAgbWVzc2FnZTogImV2bV9lcnJvcj0iLmNvbmNhdCh0eFJlc3VsdC5lcnJvck1lc3NhZ2UpLmNvbmNhdCgiXG4iKQogICAgICAgICkKCiAgICB9Cn0=",
                "withdrawCoa": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB3aXRoZHJhd0NvYSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgp0cmFuc2FjdGlvbihhbW91bnQ6IFVGaXg2NCwgYWRkcmVzczogQWRkcmVzcykgewogICAgbGV0IHNlbnRWYXVsdDogQEZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIEVWTS5XaXRoZHJhdykgJkFjY291bnQpIHsKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLldpdGhkcmF3KSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KAogICAgICAgICAgICBmcm9tOiAvc3RvcmFnZS9ldm0KICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlZmVyZW5jZSB0byB0aGUgQ09BISIpCiAgICAgICAgbGV0IHdpdGhkcmF3QmFsYW5jZSA9IEVWTS5CYWxhbmNlKGF0dG9mbG93OiAwKQogICAgICAgIHdpdGhkcmF3QmFsYW5jZS5zZXRGTE9XKGZsb3c6IGFtb3VudCkKICAgICAgICBzZWxmLnNlbnRWYXVsdCA8LSBjb2Eud2l0aGRyYXcoYmFsYW5jZTogd2l0aGRyYXdCYWxhbmNlKSBhcyEgQEZsb3dUb2tlbi5WYXVsdAogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogICAgICAgIGxldCByZWNlaXZlciA9IGFjY291bnQuY2FwYWJpbGl0aWVzLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICByZWNlaXZlci5kZXBvc2l0KGZyb206IDwtc2VsZi5zZW50VmF1bHQpCiAgICB9Cn0K"
            },
            "hybridCustody": {
                "addNFTCollectionToDelegator": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhZGRORlRDb2xsZWN0aW9uVG9EZWxlZ2F0b3IgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCnRyYW5zYWN0aW9uKHBhcmVudDogQWRkcmVzcywgaXNQdWJsaWM6IEJvb2wpIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IG8gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIGxldCBjaGlsZDogJkh5YnJpZEN1c3RvZHkuQ2hpbGRBY2NvdW50ID0gby5ib3Jyb3dDaGlsZEFjY291bnQocGFyZW50OiBwYXJlbnQpCiAgICAgICAgICAgID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgICAgIGxldCBjYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFeGFtcGxlTkZULkNvbGxlY3Rpb24+KEV4YW1wbGVORlQuQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgIG8uYWRkQ2FwYWJpbGl0eVRvRGVsZWdhdG9yKHBhcmVudDogcGFyZW50LCBjYXA6IGNhcCwgaXNQdWJsaWM6IGlzUHVibGljKQogICAgfQp9",
                "batchBridgeChildNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaEJyaWRnZUNoaWxkTkZURnJvbUV2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZHM6IFtVSW50MjU2XSkgewogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gbGV0IHJlY2VpdmVyID0gZ2V0QWNjb3VudChjaGlsZCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKCgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwdWJsaWNDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgogICAgICAgIGFzc2VydChwdWJsaWNDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHVibGljIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHB1YmxpY0NhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQoKICAgICAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAgICAgbGV0IG5mdDogQHtOb25GdW5naWJsZVRva2VuLk5GVH0gPC0gY29hLndpdGhkcmF3TkZUKAogICAgICAgICAgICAgICAgdHlwZTogbmZ0VHlwZSwKICAgICAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGFzc2VydCgKICAgICAgICAgICAgICAgIG5mdC5nZXRUeXBlKCkgPT0gbmZ0VHlwZSwKICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICJCcmlkZ2VkIG5mdCB0eXBlIG1pc21hdGNoIC0gcmVxdWVzd3RlZDogIi5jb25jYXQobmZ0VHlwZS5pZGVudGlmaWVyKQogICAgICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgICAgICkKCiAgICAgICAgICAgIGNvbGxlY3Rpb25SZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgICAgIH0KICAgICAgCgogICAgICAgIAogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "batchBridgeChildNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaEJyaWRnZUNoaWxkTkZUVG9Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZHM6IFtVSW50NjRdKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgICAvLyBDb25zdHJ1Y3QgdGhlIE5GVCB0eXBlIGZyb20gdGhlIHByb3ZpZGVkIGlkZW50aWZpZXIKICAgICAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIAogICAgICAgIC8qIC0tLSBSZXRyaWV2ZSB0aGUgTkZUIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBORlQgY29sbGVjdGlvbiwgY29uZmlndXJpbmcgaWYgbmVjZXNzYXJ5CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICBsZXQgY29sbGVjdGlvbiA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9ufT4oCiAgICAgICAgICAgICAgICBmcm9tOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aAogICAgICAgICAgICApID8/IHBhbmljKCJDb3VsZCBub3QgYWNjZXNzIHNpZ25lcidzIE5GVCBDb2xsZWN0aW9uIikKCgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIGxldCBpZCA9IGlkc1swXQogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQogICAgICAgIGxldCBjaGlsZE5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGNvbGxlY3Rpb24uZGVwb3NpdCh0b2tlbjogPC1jaGlsZE5mdCkKICAgICAgICAvLyAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IGN1cnJlbnRTdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMCAqIFVGaXg2NChpZHMubGVuZ3RoKQogICAgICAgCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQoKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICBjb2EuZGVwb3NpdE5GVCgKICAgICAgICAgICAgbmZ0OiA8LSBuZnQsCiAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIHZhciBpZHggPSAwCiAgICAgICAgZm9yIG5mdElkIGluIGlkcyB7CiAgICAgICAgICAgIGlmIGlkeCA9PSAwIHsKICAgICAgICAgICAgICAgIGlkeCA9IGlkeCArIDEKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBuZnRJZCkKICAgICAgICAgICAgY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgICAgICBuZnQ6IDwtIG5mdCwKICAgICAgICAgICAgICAgIGZlZVByb3ZpZGVyOiAmc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQoKfQo=",
                "batchBridgeChildNFTToEvmAddress": "",
                "batchSendChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaFNlbmRDaGlsZE5GVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICBmb3IgaWQgaW4gaWRzIHsKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0=",
                "batchSendChildNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaFNlbmRDaGlsZE5GVFRvQ2hpbGQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgZm9yIGlkIGluIGlkcyB7CiAgICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
                "batchTransferChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaFRyYW5zZmVyQ2hpbGRORlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCAgaWRzOiBbVUludDY0XSApIHsKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7Tm9uRnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgZm9yIGlkIGluIGlkcyB7ICAgICAKICAgICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgIH0KICB9Cn0=",
                "batchTransferNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBiYXRjaFRyYW5zZmVyTkZUVG9DaGlsZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgPE5GVD4gZnJvbSA8TkZUQWRkcmVzcz4KCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZHM6IFtVSW50NjRdKSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBjaGlsZENhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+CiAgICBhc3NlcnQoY2hpbGRDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAKICAgIGxldCBwYXJlbnRSZWYgPSAgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oZnJvbSA6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSEKICAgIGxldCBjaGlsZFJlZiA9IGNoaWxkQ2FwLmJvcnJvdygpIQoKICAgIGZvciBpZCBpbiBpZHMgeyAgICAgCiAgICAgICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBuZnQgPC0gcGFyZW50UmVmIS53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkhCiAgICAgICAgY2hpbGRSZWYuZGVwb3NpdCh0b2tlbjogPC0gbmZ0KQogICAgfQogIH0KfQ==",
                "bridgeChildFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VDaGlsZEZURnJvbUV2bSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5Cgp0cmFuc2FjdGlvbih2YXVsdElkZW50aWZpZXI6IFN0cmluZywgY2hpbGQ6IEFkZHJlc3MsIGFtb3VudDogVUludDI1NikgewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIENvcHlWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUsIFVucHVibGlzaENhcGFiaWxpdHkpICZBY2NvdW50KSB7CiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICAvLyBQYXJzZSB0aGUgVmF1bHQgaWRlbnRpZmllciBpbnRvIGl0cyBjb21wb25lbnRzCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQoKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIGZ1bmRzIC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBGdW5naWJsZVRva2VuIFZhdWx0CiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgIAogICAgICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIGxldCBzY29wZWRQcm92aWRlciA8LSBTY29wZWRGVFByb3ZpZGVycy5jcmVhdGVTY29wZWRGVFByb3ZpZGVyKAogICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgIGV4cGlyYXRpb246IGdldEN1cnJlbnRCbG9jaygpLnRpbWVzdGFtcCArIDEuMAogICAgICAgICkKCiAgICAgICAgbGV0IHZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9IDwtIGNvYS53aXRoZHJhd1Rva2VucygKICAgICAgICAgICAgdHlwZTogdmF1bHRUeXBlLAogICAgICAgICAgICBhbW91bnQ6IGFtb3VudCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCgogICAgICAgIHZhdWx0UmVmLmRlcG9zaXQoZnJvbTogPC0gdmF1bHQpCiAgICAgICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQoKfQog",
                "bridgeChildFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VDaGlsZEZUVG9Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCgoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBhbW91bnQ6IFVGaXg2NCkgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICAgIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCBjb2E6IGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50CiAgICBsZXQgc2NvcGVkUHJvdmlkZXI6IEBTY29wZWRGVFByb3ZpZGVycy5TY29wZWRGVFByb3ZpZGVyCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSwgQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2YXVsdFR5cGUgPSBDb21wb3NpdGVUeXBlKHZhdWx0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgVmF1bHQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgLy8gUGFyc2UgdGhlIFZhdWx0IGlkZW50aWZpZXIgaW50byBpdHMgY29tcG9uZW50cwogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IHRva2VuQ29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogdmF1bHRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQogICAgICAgIGxldCB2YXVsdCA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5WYXVsdH0+KAogICAgICAgICAgICAgICAgZnJvbTogdmF1bHREYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgCiAgICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogdmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKCiAgICAgICAgdmF1bHQuZGVwb3NpdChmcm9tOiA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkpCiAgICAgICAgICAgLy8gV2l0aGRyYXcgdGhlIHJlcXVlc3RlZCBiYWxhbmNlICYgY2FsY3VsYXRlIHRoZSBhcHByb3hpbWF0ZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHN0b3JhZ2UgdXNhZ2UKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLnBheW1lbnRWYXVsdCA8LSB2YXVsdC53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgICAgICBsZXQgd2l0aGRyYXduU3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIC8vIEFwcHJveGltYXRlIHRoZSBicmlkZ2UgZmVlIGJhc2VkIG9uIHRoZSBkaWZmZXJlbmNlIGluIHN0b3JhZ2UgdXNhZ2Ugd2l0aCBzb21lIGJ1ZmZlcgogICAgICAgIGxldCBhcHByb3hGZWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuY2FsY3VsYXRlQnJpZGdlRmVlKAogICAgICAgICAgICAgICAgYnl0ZXM6IGN1cnJlbnRTdG9yYWdlVXNhZ2UgLSB3aXRoZHJhd25TdG9yYWdlVXNhZ2UKICAgICAgICAgICAgKSAqIDEuMTAKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQoKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgIHNlbGYuY29hLmRlcG9zaXRUb2tlbnMoCiAgICAgICAgICAgIHZhdWx0OiA8LXNlbGYucGF5bWVudFZhdWx0LAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgICAgIC8vIERlc3Ryb3kgdGhlIFNjb3BlZEZUUHJvdmlkZXIKICAgICAgICBkZXN0cm95IHNlbGYuc2NvcGVkUHJvdmlkZXIKICAgIH0KfQog",
                "bridgeChildFTToEvmAddress": "",
                "bridgeChildNFTFromEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VDaGlsZE5GVEZyb21Fdm0gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4Rmxvd1Rva2VuCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKaW1wb3J0IFNjb3BlZEZUUHJvdmlkZXJzIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgRVZNIGZyb20gMHhFVk0KCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweEZsb3dFVk1CcmlkZ2UKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5Cgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGNoaWxkOiBBZGRyZXNzLCBpZDogVUludDI1NikgewogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChCb3Jyb3dWYWx1ZSwgQ29weVZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSwgVW5wdWJsaXNoQ2FwYWJpbGl0eSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBsZXQgY29hID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoRVZNLkJyaWRnZSkgJkVWTS5DYWRlbmNlT3duZWRBY2NvdW50Pihmcm9tOiAvc3RvcmFnZS9ldm0pCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IENPQSBmcm9tIHByb3ZpZGVkIGdhdGV3YXkgYWRkcmVzcyIpCiAgICAgICAgCiAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAgLy8gbGV0IHJlY2VpdmVyID0gZ2V0QWNjb3VudChjaGlsZCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIC8vICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBSZWNlaXZlciBmcm9tIHJlY2lwaWVudCdzIHB1YmxpYyBjYXBhYmlsaXR5IHBhdGgiKQoKCgogICAgICAgIGxldCBjYXBUeXBlID0gVHlwZTwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgICAKICAgICAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgICAgIGxldCBwdWJsaWNDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgogICAgICAgIGFzc2VydChwdWJsaWNDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHVibGljIGNhcGFiaWxpdHkiKQogICAgICAgIAogICAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY29sbGVjdGlvblJlZiA9IHB1YmxpY0NhcC5ib3Jyb3coKSEKCiAgICAgIAogICAgICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZShieXRlczogMCkKCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBsZXQgc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQoKICAgICAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfSA8LSBjb2Eud2l0aGRyYXdORlQoCiAgICAgICAgICAgIHR5cGU6IG5mdFR5cGUsCiAgICAgICAgICAgIGlkOiBpZCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICApCgogICAgICAgIGFzc2VydCgKICAgICAgICAgICAgbmZ0LmdldFR5cGUoKSA9PSBuZnRUeXBlLAogICAgICAgICAgICBtZXNzYWdlOiAiQnJpZGdlZCBuZnQgdHlwZSBtaXNtYXRjaCAtIHJlcXVlc3d0ZWQ6ICIuY29uY2F0KG5mdFR5cGUuaWRlbnRpZmllcikKICAgICAgICAgICAgICAgIC5jb25jYXQoIiwgcmVjZWl2ZWQ6ICIpLmNvbmNhdChuZnQuZ2V0VHlwZSgpLmlkZW50aWZpZXIpCiAgICAgICAgKQoKICAgICAgICBjb2xsZWN0aW9uUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzY29wZWRQcm92aWRlcgogICAgfQp9Cg==",
                "bridgeChildNFTToEvm": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VDaGlsZE5GVFRvRXZtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEVWTSBmcm9tIDB4RVZNCgppbXBvcnQgRmxvd0VWTUJyaWRnZVV0aWxzIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlIGZyb20gMHhGbG93RVZNQnJpZGdlCmltcG9ydCBGbG93RVZNQnJpZGdlQ29uZmlnIGZyb20gMHhGbG93RVZNQnJpZGdlCgppbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Q2FwYWJpbGl0eUZpbHRlcgoKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIGlkOiBVSW50NjQsIGNoaWxkOiBBZGRyZXNzKSB7CiAgICAKICAgIGxldCBuZnQ6IEB7Tm9uRnVuZ2libGVUb2tlbi5ORlR9CiAgICBsZXQgY29hOiBhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudAogICAgbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgogICAgCiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChDb3B5VmFsdWUsIEJvcnJvd1ZhbHVlLCBJc3N1ZVN0b3JhZ2VDYXBhYmlsaXR5Q29udHJvbGxlciwgUHVibGlzaENhcGFiaWxpdHksIFNhdmVWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICAvKiAtLS0gUmVmZXJlbmNlIHRoZSBzaWduZXIncyBDYWRlbmNlT3duZWRBY2NvdW50IC0tLSAqLwogICAgICAgIC8vCiAgICAgICAgLy8gQm9ycm93IGEgcmVmZXJlbmNlIHRvIHRoZSBzaWduZXIncyBDT0EKICAgICAgICBzZWxmLmNvYSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEVWTS5CcmlkZ2UpICZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oZnJvbTogL3N0b3JhZ2UvZXZtKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBDT0EgZnJvbSBwcm92aWRlZCBnYXRld2F5IGFkZHJlc3MiKQogICAgICAgIAogICAgICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgICAKICAgICAgICAgLy8gQ29uc3RydWN0IHRoZSBORlQgdHlwZSBmcm9tIHRoZSBwcm92aWRlZCBpZGVudGlmaWVyCiAgICAgICAgbGV0IG5mdFR5cGUgPSBDb21wb3NpdGVUeXBlKG5mdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IE5GVCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0QWRkcmVzcyA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdEFkZHJlc3MoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3ROYW1lID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0TmFtZShmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQoKICAgICAgICAKICAgICAgICAvKiAtLS0gUmV0cmlldmUgdGhlIE5GVCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUIGNvbGxlY3Rpb24sIGNvbmZpZ3VyaW5nIGlmIG5lY2Vzc2FyeQogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KAogICAgICAgICAgICAgICAgZnJvbTogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBORlQgQ29sbGVjdGlvbiIpCgoKICAgICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKICAgICAgICBsZXQgY2hpbGROZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgICAgICBjb2xsZWN0aW9uLmRlcG9zaXQodG9rZW46IDwtY2hpbGROZnQpCiAgICAgICAgLy8gLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBjdXJyZW50U3RvcmFnZVVzYWdlID0gc2lnbmVyLnN0b3JhZ2UudXNlZAogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgbGV0IHdpdGhkcmF3blN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBsZXQgYXBwcm94RmVlID0gRmxvd0VWTUJyaWRnZVV0aWxzLmNhbGN1bGF0ZUJyaWRnZUZlZSgKICAgICAgICAgICAgICAgIGJ5dGVzOiBjdXJyZW50U3RvcmFnZVVzYWdlIC0gd2l0aGRyYXduU3RvcmFnZVVzYWdlCiAgICAgICAgICAgICkgKiAxLjEwCiAgICAgICAKICAgICAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIElzc3VlIGFuZCBzdG9yZSBicmlkZ2UtZGVkaWNhdGVkIFByb3ZpZGVyIENhcGFiaWxpdHkgaW4gc3RvcmFnZSBpZiBuZWNlc3NhcnkKICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigKICAgICAgICAgICAgICAgIC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0CiAgICAgICAgICAgICkKICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZShwcm92aWRlckNhcCwgdG86IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgpCiAgICAgICAgfQogICAgICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwQ29weSA9IHNpZ25lci5zdG9yYWdlLmNvcHk8Q2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigKICAgICAgICAgICAgICAgIGZyb206IEZsb3dFVk1CcmlkZ2VDb25maWcucHJvdmlkZXJDYXBhYmlsaXR5U3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgICAgICBsZXQgcHJvdmlkZXJGaWx0ZXIgPSBTY29wZWRGVFByb3ZpZGVycy5BbGxvd2FuY2VGaWx0ZXIoYXBwcm94RmVlKQogICAgICAgIHNlbGYuc2NvcGVkUHJvdmlkZXIgPC0gU2NvcGVkRlRQcm92aWRlcnMuY3JlYXRlU2NvcGVkRlRQcm92aWRlcigKICAgICAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgICAgICBmaWx0ZXJzOiBbIHByb3ZpZGVyRmlsdGVyIF0sCiAgICAgICAgICAgICAgICBleHBpcmF0aW9uOiBnZXRDdXJyZW50QmxvY2soKS50aW1lc3RhbXAgKyAxLjAKICAgICAgICAgICAgKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIC8vIEV4ZWN1dGUgdGhlIGJyaWRnZQogICAgICAgIHNlbGYuY29hLmRlcG9zaXRORlQoCiAgICAgICAgICAgIG5mdDogPC1zZWxmLm5mdCwKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "bridgeChildNFTToEvmAddress": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBicmlkZ2VDaGlsZE5GVFRvRXZtQWRkcmVzcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCgppbXBvcnQgU2NvcGVkRlRQcm92aWRlcnMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCmltcG9ydCBFVk0gZnJvbSAweEVWTQoKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZSBmcm9tIDB4Rmxvd0VWTUJyaWRnZQppbXBvcnQgRmxvd0VWTUJyaWRnZUNvbmZpZyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKCgoKdHJhbnNhY3Rpb24obmZ0SWRlbnRpZmllcjogU3RyaW5nLCBjaGlsZDogQWRkcmVzcywgaWQ6IFVJbnQ2NCwgcmVjaXBpZW50OlN0cmluZykgewogICAgCiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgLy8gbGV0IGNvYTogYXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQKICAgIGxldCBzY29wZWRQcm92aWRlcjogQFNjb3BlZEZUUHJvdmlkZXJzLlNjb3BlZEZUUHJvdmlkZXIKICAgIAogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgLyogLS0tIFJlZmVyZW5jZSB0aGUgc2lnbmVyJ3MgQ2FkZW5jZU93bmVkQWNjb3VudCAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgc2lnbmVyJ3MgQ09BCiAgICAgICAgLy8gc2VsZi5jb2EgPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChFVk0uQnJpZGdlKSAmRVZNLkNhZGVuY2VPd25lZEFjY291bnQ+KGZyb206IC9zdG9yYWdlL2V2bSkKICAgICAgICAvLyAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgQ09BIGZyb20gcHJvdmlkZWQgZ2F0ZXdheSBhZGRyZXNzIikKICAgICAgICAKICAgICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAgICAgCiAgICAgICAgIC8vIENvbnN0cnVjdCB0aGUgTkZUIHR5cGUgZnJvbSB0aGUgcHJvdmlkZWQgaWRlbnRpZmllcgogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBORlQgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBCb3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIE5GVCBjb2xsZWN0aW9uLCBjb25maWd1cmluZyBpZiBuZWNlc3NhcnkKICAgICAgICBsZXQgdmlld1Jlc29sdmVyID0gZ2V0QWNjb3VudChuZnRDb250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiBuZnRDb250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIE5GVCBjb250cmFjdCIpCiAgICAgICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gdmlld1Jlc29sdmVyLnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIGxldCBjb2xsZWN0aW9uID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgTkZUIENvbGxlY3Rpb24iKQoKCiAgICAgICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAgIAogICAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgICAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICAgICAgCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCiAgICAgICAgbGV0IGNoaWxkTmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICAgICAgY29sbGVjdGlvbi5kZXBvc2l0KHRva2VuOiA8LWNoaWxkTmZ0KQogICAgICAgIC8vIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBsZXQgY3VycmVudFN0b3JhZ2VVc2FnZSA9IHNpZ25lci5zdG9yYWdlLnVzZWQKICAgICAgICBzZWxmLm5mdCA8LSBjb2xsZWN0aW9uLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgICAgIGxldCB3aXRoZHJhd25TdG9yYWdlVXNhZ2UgPSBzaWduZXIuc3RvcmFnZS51c2VkCiAgICAgICAgbGV0IGFwcHJveEZlZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5jYWxjdWxhdGVCcmlkZ2VGZWUoCiAgICAgICAgICAgICAgICBieXRlczogY3VycmVudFN0b3JhZ2VVc2FnZSAtIHdpdGhkcmF3blN0b3JhZ2VVc2FnZQogICAgICAgICAgICApICogMS4xMAogICAgICAgCiAgICAgICAgLyogLS0tIENvbmZpZ3VyZSBhIFNjb3BlZEZUUHJvdmlkZXIgLS0tICovCiAgICAgICAgLy8KICAgICAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UudHlwZShhdDogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oCiAgICAgICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICAgICApCiAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUocHJvdmlkZXJDYXAsIHRvOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKQogICAgICAgIH0KICAgICAgICAvLyBDb3B5IHRoZSBzdG9yZWQgUHJvdmlkZXIgY2FwYWJpbGl0eSBhbmQgY3JlYXRlIGEgU2NvcGVkRlRQcm92aWRlcgogICAgICAgIGxldCBwcm92aWRlckNhcENvcHkgPSBzaWduZXIuc3RvcmFnZS5jb3B5PENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oCiAgICAgICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkludmFsaWQgUHJvdmlkZXIgQ2FwYWJpbGl0eSBmb3VuZCBpbiBzdG9yYWdlLiIpCiAgICAgICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKGFwcHJveEZlZSkKICAgICAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgICAgICBwcm92aWRlcjogcHJvdmlkZXJDYXBDb3B5LAogICAgICAgICAgICAgICAgZmlsdGVyczogWyBwcm92aWRlckZpbHRlciBdLAogICAgICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgICAgICkKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAvLyBFeGVjdXRlIHRoZSBicmlkZ2UKICAgICAgICAvLyBzZWxmLmNvYS5kZXBvc2l0TkZUKAogICAgICAgIC8vICAgICBuZnQ6IDwtc2VsZi5uZnQsCiAgICAgICAgLy8gICAgIGZlZVByb3ZpZGVyOiAmc2VsZi5zY29wZWRQcm92aWRlciBhcyBhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0KICAgICAgICAvLyApCiAgICAgICAgbGV0IHJlY2lwaWVudEVWTUFkZHJlc3MgPSBFVk0uYWRkcmVzc0Zyb21TdHJpbmcocmVjaXBpZW50KQogICAgICAgIEZsb3dFVk1CcmlkZ2UuYnJpZGdlTkZUVG9FVk0oCiAgICAgICAgICAgIHRva2VuOiA8LXNlbGYubmZ0LAogICAgICAgICAgICB0bzogcmVjaXBpZW50RVZNQWRkcmVzcywKICAgICAgICAgICAgZmVlUHJvdmlkZXI6ICZzZWxmLnNjb3BlZFByb3ZpZGVyIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfQogICAgICAgICkKICAgICAgICAvLyBEZXN0cm95IHRoZSBTY29wZWRGVFByb3ZpZGVyCiAgICAgICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCiAgICB9Cn0K",
                "checkChildLinkedCollections": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja0NoaWxkTGlua2VkQ29sbGVjdGlvbnMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZyk6IEJvb2wgewogICAgbGV0IG1nciA9IGdldEF1dGhBY2NvdW50KHBhcmVudCkuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IG1hbmFnZXIgZnJvbSBwYXJlbnQiKQogICAgbGV0IGNoaWxkID0gbWdyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJDaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgbGV0IGNhcCA9IGNoaWxkLmdldENhcGFiaWxpdHkoCiAgICAgICAgICAgIHBhdGg6IFByaXZhdGVQYXRoKGlkZW50aWZpZXI6IGlkZW50aWZpZXIpISBhcyBDYXBhYmlsaXR5UGF0aCwKICAgICAgICAgICAgdHlwZTogVHlwZTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXIsIE5vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KCkKICAgICAgICApIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlciwgTm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4/CgogICAgCiAgICByZXR1cm4gY2FwICE9IG5pbAp9ICAgCiAgICA=",
                "checkChildLinkedVaults": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja0NoaWxkTGlua2VkVmF1bHRzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhDYXBhYmlsaXR5RmlsdGVyCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MsIGNoaWxkOiBBZGRyZXNzLCBwYXRoOiBTdHJpbmcpOiBCb29sIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpID8/IHBhbmljICgibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCgogIGxldCBhZGRyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihjaGlsZCkKICAKICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQoKICBsZXQgY29udHJvbGxlcnMgPSBhZGRyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IHBhdGgpISkKICB2YXIgZmxhZyA9IGZhbHNlCgogIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgY29udGludWUKICAgIH0KCiAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgIGNvbnRpbnVlCiAgICAgIH0KCiAgICAgIGZsYWcgPSB0cnVlCiAgICAgIGJyZWFrCiAgICB9CiAgfQoKICByZXR1cm4gZmxhZwp9IAogICAg",
                "checkChildRecieveVaults": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja0NoaWxkUmVjaWV2ZVZhdWx0cyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcywgcGF0aDogU3RyaW5nKTogQm9vbCB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpCiAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogIAogIGxldCByZWNlaXZlclR5cGUgPSBUeXBlPCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KCkKCiAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGNoaWxkKQogIAogIGxldCBjaGlsZEFjY3QgPSBtYW5hZ2VyLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogIGxldCBjb250cm9sbGVycyA9IGFkZHIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aCkhKQogIHZhciBmbGFnID0gZmFsc2UKCiAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHJlY2VpdmVyVHlwZSkgewogICAgICBjb250aW51ZQogICAgfQoKICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiByZWNlaXZlclR5cGUpIHsKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+IAoKICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgY29udGludWUKICAgICAgfQoKICAgICAgZmxhZyA9IHRydWUKICAgICAgYnJlYWsKICAgIH0KICB9CgogIHJldHVybiBmbGFnCn0gCiAgICA=",
                "editChildAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBlZGl0Q2hpbGRBY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCgp0cmFuc2FjdGlvbihjaGlsZEFkZHJlc3M6IEFkZHJlc3MsIG5hbWU6IFN0cmluZywgZGVzY3JpcHRpb246IFN0cmluZywgdGh1bWJuYWlsOiBTdHJpbmcpIHsKICAgIHByZXBhcmUoYWNjdDogQXV0aEFjY291bnQpIHsKICAgICAgICBsZXQgbSA9IGFjY3QuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIGxldCBkID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KAogICAgICAgICAgICBuYW1lOiBuYW1lLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24sCiAgICAgICAgICAgIHRodW1ibmFpbDogTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbCkKICAgICAgICApCgogICAgICAgIG0uc2V0Q2hpbGRBY2NvdW50RGlzcGxheShhZGRyZXNzOiBjaGlsZEFkZHJlc3MsIGQpCiAgICB9Cn0=",
                "getAccessibleChildAccountNFTs": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2Nlc3NpYmxlQ2hpbGRBY2NvdW50TkZUcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgVmlld1Jlc29sdmVyIGZyb20gMHhNZXRhZGF0YVZpZXdzCgovLyBUaGlzIHNjcmlwdCBpdGVyYXRlcyB0aHJvdWdoIGEgcGFyZW50J3MgY2hpbGQgYWNjb3VudHMsIAovLyBpZGVudGlmaWVzIHByaXZhdGUgcGF0aHMgd2l0aCBhbiBhY2Nlc3NpYmxlIE5vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXIsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHR5cGVJZHMKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcyk6IEFueVN0cnVjdCB7CiAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgdmFyIHR5cGVJZHNXaXRoUHJvdmlkZXIgPSB7fSBhcyB7QWRkcmVzczogW1N0cmluZ119CgogIC8vIEFkZHJlc3MgLT4gbmZ0IFVVSUQgLT4gRGlzcGxheQogIHZhciBuZnRWaWV3cyA9IHt9IGFzIHtBZGRyZXNzOiB7VUludDY0OiBNZXRhZGF0YVZpZXdzLkRpc3BsYXl9fSAKCiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pj4oKQogIGxldCBjb2xsZWN0aW9uVHlwZTogVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigpCgogIC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBhY2NvdW50cwogIGZvciBhZGRyZXNzIGluIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKSB7CiAgICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIGxldCBmb3VuZFR5cGVzOiBbU3RyaW5nXSA9IFtdCiAgICBsZXQgdmlld3M6IHtVSW50NjQ6IE1ldGFkYXRhVmlld3MuRGlzcGxheX0gPSB7fQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgIAogICAgLy8gdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9IGZvdW5kVHlwZXMKCiAgICBhY2N0LnN0b3JhZ2UuZm9yRWFjaFN0b3JlZChmdW4gKHBhdGg6IFN0b3JhZ2VQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CgogICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGghKQogICAgICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICAgICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSkgewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGlmIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGMuY2FwYWJpbGl0eUlELCB0eXBlOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWUKICAgIH0pCgogICAgdHlwZUlkc1dpdGhQcm92aWRlclthZGRyZXNzXSA9IGZvdW5kVHlwZXMKICAgIAoKICAgIC8vIGl0ZXJhdGUgc3RvcmFnZSwgY2hlY2sgaWYgdHlwZUlkc1dpdGhQcm92aWRlciBjb250YWlucyB0aGUgdHlwZUlkLCBpZiBzbywgYWRkIHRvIHZpZXdzCiAgICBhY2N0LnN0b3JhZ2UuZm9yRWFjaFN0b3JlZChmdW4gKHBhdGg6IFN0b3JhZ2VQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICAgIAogICAgICBpZiB0eXBlSWRzV2l0aFByb3ZpZGVyW2FkZHJlc3NdID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQoKICAgICAgZm9yIGtleSBpbiB0eXBlSWRzV2l0aFByb3ZpZGVyLmtleXMgewogICAgICAgIGZvciBpZHgsIHZhbHVlIGluIHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEgewogICAgICAgICAgbGV0IHZhbHVlID0gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldIQoKICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZS5pZGVudGlmaWVyIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGlmIHR5cGUuaXNJbnN0YW5jZShjb2xsZWN0aW9uVHlwZSkgewogICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb24gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9ufT4oZnJvbTogcGF0aCkgeyAKICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgSURzICYgcmVzb2x2ZSB0aGUgdmlldwogICAgICAgICAgICAgIGZvciBpZCBpbiBjb2xsZWN0aW9uLmdldElEcygpIHsKICAgICAgICAgICAgICAgIGxldCBuZnQgPSBjb2xsZWN0aW9uLmJvcnJvd05GVChpZCkhCiAgICAgICAgICAgICAgICBsZXQgcmVzb2x2ZXIgPSBjb2xsZWN0aW9uLmJvcnJvd1ZpZXdSZXNvbHZlcihpZDogaWQpIQogICAgICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSByZXNvbHZlci5yZXNvbHZlVmlldyhUeXBlPE1ldGFkYXRhVmlld3MuRGlzcGxheT4oKSkhIGFzPyBNZXRhZGF0YVZpZXdzLkRpc3BsYXkgewogICAgICAgICAgICAgICAgICB2aWV3cy5pbnNlcnQoa2V5OiBuZnQudXVpZCwgZGlzcGxheSkKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWUKICAgIH0pCiAgICBuZnRWaWV3c1thZGRyZXNzXSA9IHZpZXdzCiAgfQogIHJldHVybiBuZnRWaWV3cwp9",
                "getAccessibleCoinInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2Nlc3NpYmxlQ29pbkluZm8gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgVG9rZW5JbmZvIHsKYWNjZXNzKGFsbCkgbGV0IGlkOiBTdHJpbmcKYWNjZXNzKGFsbCkgbGV0IGJhbGFuY2U6IFVGaXg2NAoKaW5pdChpZDogU3RyaW5nLCBiYWxhbmNlOiBVRml4NjQpIHsKICAgIHNlbGYuaWQgPSBpZAogICAgc2VsZi5iYWxhbmNlID0gYmFsYW5jZQp9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGRBZGRyZXNzOiBBZGRyZXNzKTogW1Rva2VuSW5mb10gewogICAgbGV0IG1hbmFnZXIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihwYXJlbnQpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKICAgIHZhciB0eXBlSWRzV2l0aFByb3ZpZGVyOiB7QWRkcmVzczogW1N0cmluZ119ID0ge30KCiAgICB2YXIgY29pbkluZm9MaXN0OiBbVG9rZW5JbmZvXSA9IFtdCiAgICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigpCiAgICBsZXQgdmF1bHRUeXBlOiBUeXBlID0gVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpCgogICAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCgogICAgbGV0IGFjY3QgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+IChjaGlsZEFkZHJlc3MpCiAgICBsZXQgZm91bmRUeXBlczogW1N0cmluZ10gPSBbXQogICAgbGV0IHZhdWx0QmFsYW5jZXM6IHtTdHJpbmc6IFVGaXg2NH0gPSB7fQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgICAgICAvLyBDaGVjayB3aGljaCBwcml2YXRlIHBhdGhzIGhhdmUgTkZUIFByb3ZpZGVyIEFORCBjYW4gYmUgYm9ycm93ZWQKICAgICAgICBpZiAhdHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQoKICAgICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGgpCgogICAgICAgIC8vIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgZm9yIGMgaW4gY29udHJvbGxlcnMgewogICAgICAgICAgICBpZiAhYy5ib3Jyb3dUeXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CgogICAgICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgICAgICAgICAgaWYgIXByb3ZpZGVyQ2FwLmNoZWNrKCl7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gdHJ1ZQogICAgfSkKICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbY2hpbGRBZGRyZXNzXSA9IGZvdW5kVHlwZXMKCiAgICAKICAgIGFjY3Quc3RvcmFnZS5mb3JFYWNoU3RvcmVkKGZ1biAocGF0aDogU3RvcmFnZVBhdGgsIHR5cGU6IFR5cGUpOiBCb29sIHsKICAgIAogICAgaWYgdHlwZUlkc1dpdGhQcm92aWRlcltjaGlsZEFkZHJlc3NdID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICBmb3Iga2V5IGluIHR5cGVJZHNXaXRoUHJvdmlkZXIua2V5cyB7CiAgICAgICAgZm9yIGlkeCwgdmFsdWUgaW4gdHlwZUlkc1dpdGhQcm92aWRlcltrZXldISB7CiAgICAgICAgICAgIGxldCB2YWx1ZSA9IHR5cGVJZHNXaXRoUHJvdmlkZXJba2V5XSEKCiAgICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZS5pZGVudGlmaWVyIHsKICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBpZiB0eXBlLmlzSW5zdGFuY2UodmF1bHRUeXBlKSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgbGV0IHZhdWx0ID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgSURzICYgcmVzb2x2ZSB0aGUgdmlldwogICAgICAgICAgICAgICAgICAgIGNvaW5JbmZvTGlzdC5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgVG9rZW5JbmZvKGlkOiB0eXBlLmlkZW50aWZpZXIsIGJhbGFuY2U6IHZhdWx0LmJhbGFuY2UpKQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB9CiAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIAogICAgcmV0dXJuIGNvaW5JbmZvTGlzdAp9",
                "getAccessibleCollectionAndIdsDisplay": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBY2Nlc3NpYmxlQ29sbGVjdGlvbkFuZElkc0Rpc3BsYXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgoKCmFjY2VzcyhhbGwpIHN0cnVjdCBDb2xsZWN0aW9uRGlzcGxheSB7CiAgYWNjZXNzKGFsbCkgbGV0IG5hbWU6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCBzcXVhcmVJbWFnZTogTWV0YWRhdGFWaWV3cy5NZWRpYQoKICBpbml0KG5hbWU6IFN0cmluZywgc3F1YXJlSW1hZ2U6IE1ldGFkYXRhVmlld3MuTWVkaWEpIHsKICAgIHNlbGYubmFtZSA9IG5hbWUKICAgIHNlbGYuc3F1YXJlSW1hZ2UgPSBzcXVhcmVJbWFnZQogIH0KfQoKYWNjZXNzKGFsbCkgc3RydWN0IE5GVENvbGxlY3Rpb24gewogIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogIGFjY2VzcyhhbGwpIGxldCBpZExpc3Q6IFtVSW50NjRdCgogIGluaXQoaWQ6U3RyaW5nLCBkaXNwbGF5OiBDb2xsZWN0aW9uRGlzcGxheT8sIGlkTGlzdDogW1VJbnQ2NF0pIHsKICAgIHNlbGYuaWQgPSBpZAogICAgc2VsZi5kaXNwbGF5ID0gZGlzcGxheQogICAgc2VsZi5pZExpc3QgPSBpZExpc3QKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBnZXREaXNwbGF5KGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0b3JhZ2VQYXRoKTogQ29sbGVjdGlvbkRpc3BsYXk/IHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oYWRkcmVzcykKCiAgbGV0IHJlc291cmNlVHlwZSA9IFR5cGU8QEFueVJlc291cmNlPigpCiAgLy8gbGV0IHZhdWx0VHlwZSA9IFR5cGU8QHtGdW5naWJsZVRva2VuLlZhdWx0fT4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8QHtOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPCZ7Vmlld1Jlc29sdmVyLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICB2YXIgaXRlbTogQ29sbGVjdGlvbkRpc3BsYXk/ID0gIG5pbAoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC5zdG9yYWdlLnR5cGUoYXQ6IHBhdGgpIHsKICAgICAgbGV0IGlzUmVzb3VyY2UgPSB0eXBlLmlzU3VidHlwZShvZjogcmVzb3VyY2VUeXBlKQogICAgICBsZXQgaXNORlRDb2xsZWN0aW9uID0gdHlwZS5pc1N1YnR5cGUob2Y6IGNvbGxlY3Rpb25UeXBlKQogICAgICBsZXQgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBtZXRhZGF0YVZpZXdUeXBlKQoKICAgICAgdmFyIHRva2VuSURzOiBbVUludDY0XSA9IFtdCiAgICAgIGlmIGlzTkZUQ29sbGVjdGlvbiAmJiBjb25mb3JtZWRNZXRhZGF0YVZpZXdzIHsKICAgICAgICBpZiBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8JntWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihmcm9tOiBwYXRoKSB7CiAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKCiAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIGEgbGlzdAogICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZi5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSURzWzBdKSEKICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgICAgICAgICAgaXRlbSA9IENvbGxlY3Rpb25EaXNwbGF5KAogICAgICAgICAgICAgICAgbmFtZTogZGlzcGxheS5uYW1lLAogICAgICAgICAgICAgICAgc3F1YXJlSW1hZ2U6IGRpc3BsYXkuc3F1YXJlSW1hZ2UKICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgcmV0dXJuIGl0ZW0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzLCBjaGlsZEFjY291bnQ6IEFkZHJlc3MpOiBbTkZUQ29sbGVjdGlvbl0gewogICAgbGV0IG1hbmFnZXIgPSAgZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KS5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPz8gcGFuaWMgKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKCiAgICAvLyBBZGRyZXNzIC0+IENvbGxlY3Rpb24gVHlwZSAtPiBvd25lZE5GVHMKCiAgICBsZXQgcHJvdmlkZXJUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+PigpCiAgICBsZXQgY29sbGVjdGlvblR5cGU6IFR5cGUgPSBUeXBlPEB7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4oKQoKICAgIC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBhY2NvdW50cwoKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PihjaGlsZEFjY291bnQpCiAgICBsZXQgZm91bmRUeXBlczogW1R5cGVdID0gW10KICAgIGxldCBuZnRzOiB7U3RyaW5nOiBbVUludDY0XX0gPSB7fQogICAgbGV0IGNvbGxlY3Rpb25MaXN0OiBbTkZUQ29sbGVjdGlvbl0gPSBbXQogICAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFjY291bnQpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIC8vIGdldCBhbGwgcHJpdmF0ZSBwYXRocwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgICAgIC8vIENoZWNrIHdoaWNoIHByaXZhdGUgcGF0aHMgaGF2ZSBORlQgUHJvdmlkZXIgQU5EIGNhbiBiZSBib3Jyb3dlZAogICAgICAgIC8vIGlmICF0eXBlLmlzU3VidHlwZShvZjogcHJvdmlkZXJUeXBlKXsKICAgICAgICAvLyAgICAgcmV0dXJuIHRydWUKICAgICAgICAvLyB9CiAgICAgICAgLy8gaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KHBhdGg6IHBhdGgsIHR5cGU6IFR5cGU8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKSkgewogICAgICAgIC8vICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgIC8vICAgICBpZiAhcHJvdmlkZXJDYXAuY2hlY2soKXsKICAgICAgICAvLyAgICAgICAgIC8vIGlmIHRoaXMgaXNuJ3QgYSBwcm92aWRlciBjYXBhYmlsaXR5LCBleGl0IHRoZSBhY2NvdW50IGl0ZXJhdGlvbiBmdW5jdGlvbiBmb3IgdGhpcyBwYXRoCiAgICAgICAgLy8gICAgICAgICByZXR1cm4gdHJ1ZQogICAgICAgIC8vICAgICB9CiAgICAgICAgLy8gICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkpCiAgICAgICAgLy8gfQoKICAgICAgICBsZXQgY29udHJvbGxlcnMgPSBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHBhdGghKQogICAgICAgIGZvciBjIGluIGNvbnRyb2xsZXJzIHsKICAgICAgICAgIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgICAgICAgY29udGludWUKICAgICAgICAgIH0KCiAgICAgICAgICBpZiBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogcHJvdmlkZXJUeXBlKSB7CiAgICAgICAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTwme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PiAKCiAgICAgICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm91bmRUeXBlcy5hcHBlbmQoY2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKSkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuIHRydWUKICAgIH0pCgogICAgLy8gaXRlcmF0ZSBzdG9yYWdlLCBjaGVjayBpZiB0eXBlSWRzV2l0aFByb3ZpZGVyIGNvbnRhaW5zIHRoZSB0eXBlSWQsIGlmIHNvLCBhZGQgdG8gbmZ0cwogICAgYWNjdC5zdG9yYWdlLmZvckVhY2hTdG9yZWQoZnVuIChwYXRoOiBTdG9yYWdlUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewoKICAgICAgICBpZiBmb3VuZFR5cGVzID09IG5pbCB7CiAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgfQoKICAgICAgICBmb3IgaWR4LCB2YWx1ZSBpbiBmb3VuZFR5cGVzIHsKICAgICAgICAgICAgbGV0IHZhbHVlID0gZm91bmRUeXBlcyEKCiAgICAgICAgICAgIGlmIHZhbHVlW2lkeF0gIT0gdHlwZSB7CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgdHlwZS5pc0luc3RhbmNlKGNvbGxlY3Rpb25UeXBlKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIGxldCBjb2xsZWN0aW9uID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGZyb206IHBhdGgpIHsgCiAgICAgICAgICAgICAgICAgICAgbmZ0cy5pbnNlcnQoa2V5OiB0eXBlLmlkZW50aWZpZXIsIGNvbGxlY3Rpb24uZ2V0SURzKCkpCiAgICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbkxpc3QuYXBwZW5kKAogICAgICAgICAgICAgICAgICAgICAgTkZUQ29sbGVjdGlvbigKICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHR5cGUuaWRlbnRpZmllciwKICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogZ2V0RGlzcGxheShhZGRyZXNzOiBjaGlsZEFjY291bnQsIHBhdGg6IHBhdGgpLAogICAgICAgICAgICAgICAgICAgICAgICBpZExpc3Q6IGNvbGxlY3Rpb24uZ2V0SURzKCkKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiB0cnVlCiAgICB9KQoKICAgIHJldHVybiBjb2xsZWN0aW9uTGlzdAp9",
                "getChildAccountAllowTypes": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDaGlsZEFjY291bnRBbGxvd1R5cGVzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCgovLyBUaGlzIHNjcmlwdCBpdGVyYXRlcyB0aHJvdWdoIGEgcGFyZW50J3MgY2hpbGQgYWNjb3VudHMsIAovLyBpZGVudGlmaWVzIHByaXZhdGUgcGF0aHMgd2l0aCBhbiBhY2Nlc3NpYmxlIE5vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXIsIGFuZCByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHR5cGVJZHMKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWRkcjogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MpOiBbU3RyaW5nXT8gewogIGxldCBhY2NvdW50ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikKICBsZXQgbWFuYWdlciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KGFkZHIpLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKCiAgCiAgbGV0IG5mdFByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgbGV0IGZ0UHJvdmlkZXJUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKCiAgLy8gSXRlcmF0ZSB0aHJvdWdoIGNoaWxkIGFjY291bnRzCiAgbGV0IGFkZHIgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQ+KGNoaWxkKQogIGxldCBmb3VuZFR5cGVzOiBbU3RyaW5nXSA9IFtdCiAgbGV0IGNoaWxkQWNjdCA9IG1hbmFnZXIuYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZCkgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKCiAgZm9yIHMgaW4gYWRkci5zdG9yYWdlLnN0b3JhZ2VQYXRocyB7CiAgICBsZXQgY29udHJvbGxlcnMgPSBhZGRyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IHMpCiAgICBmb3IgYyBpbiBjb250cm9sbGVycyB7CiAgICAgIC8vIGlmICFjLmJvcnJvd1R5cGUuaXNTdWJ0eXBlKG9mOiBwcm92aWRlclR5cGUpIHsKICAgICAgLy8gICBjb250aW51ZQogICAgICAvLyB9CgogICAgICBpZiBsZXQgbmZ0Q2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjLmNhcGFiaWxpdHlJRCwgdHlwZTogbmZ0UHJvdmlkZXJUeXBlKSB7CiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gbmZ0Q2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKG5mdENhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICBicmVhawogICAgICB9CiAgICAgIGlmIGxldCBmdENhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IGZ0UHJvdmlkZXJUeXBlKSB7CiAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gZnRDYXAgYXMhIENhcGFiaWxpdHk8JntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4gCgogICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgY29udGludWUKICAgICAgICB9CgogICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGZ0Q2FwLmJvcnJvdzwmQW55UmVzb3VyY2U+KCkhLmdldFR5cGUoKS5pZGVudGlmaWVyKQogICAgICAgIGJyZWFrCiAgICAgIH0KICAgIH0KICB9CgogIHJldHVybiBmb3VuZFR5cGVzCn0=",
                "getChildAccountFTCapabilities": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDaGlsZEFjY291bnRGVENhcGFiaWxpdGllcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgoKLy8gVGhpcyBzY3JpcHQgaXRlcmF0ZXMgdGhyb3VnaCBhIHBhcmVudCdzIGNoaWxkIGFjY291bnRzLCAKLy8gaWRlbnRpZmllcyBwcml2YXRlIHBhdGhzIHdpdGggYW4gYWNjZXNzaWJsZSBGdW5naWJsZVRva2VuLlByb3ZpZGVyLCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZyB0eXBlSWRzCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOkFueVN0cnVjdCB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudDxhdXRoKFN0b3JhZ2UpICZBY2NvdW50PihhZGRyKQogIGxldCBtYW5hZ2VyID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4oYWRkcikuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICA/PyBwYW5pYyAoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQoKICB2YXIgdHlwZUlkc1dpdGhQcm92aWRlcjoge0FkZHJlc3M6IFtTdHJpbmddfSA9IHt9CiAgCiAgbGV0IHByb3ZpZGVyVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCgogIC8vIEl0ZXJhdGUgdGhyb3VnaCBjaGlsZCBhY2NvdW50cwogIGZvciBhZGRyZXNzIGluIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKSB7CiAgICBsZXQgYWRkciA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oYWRkcmVzcykKICAgIGxldCBmb3VuZFR5cGVzOiBbU3RyaW5nXSA9IFtdCiAgICBsZXQgY2hpbGRBY2N0ID0gbWFuYWdlci5ib3Jyb3dBY2NvdW50KGFkZHI6IGFkZHJlc3MpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAvLyBnZXQgYWxsIHByaXZhdGUgcGF0aHMKCiAgICBmb3IgcyBpbiBhZGRyLnN0b3JhZ2Uuc3RvcmFnZVBhdGhzIHsKICAgICAgZm9yIGMgaW4gYWRkci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBzKSB7CiAgICAgICAgaWYgIWMuYm9ycm93VHlwZS5pc1N1YnR5cGUob2Y6IHByb3ZpZGVyVHlwZSl7CiAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KCiAgICAgICAgaWYgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogYy5jYXBhYmlsaXR5SUQsIHR5cGU6IHByb3ZpZGVyVHlwZSkgewogICAgICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+IAoKICAgICAgICAgIGlmICFwcm92aWRlckNhcC5jaGVjaygpewogICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgfQoKICAgICAgICAgIGZvdW5kVHlwZXMuYXBwZW5kKGNhcC5ib3Jyb3c8JkFueVJlc291cmNlPigpIS5nZXRUeXBlKCkuaWRlbnRpZmllcikKICAgICAgICAgIHR5cGVJZHNXaXRoUHJvdmlkZXJbYWRkcmVzc10gPSBmb3VuZFR5cGVzCiAgICAgICAgICBicmVhawogICAgICAgIH0KICAgICAgfQogICAgfSAgICAgIAogIH0KCiAgcmV0dXJuIHR5cGVJZHNXaXRoUHJvdmlkZXIKfQog",
                "getChildAccountMeta": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDaGlsZEFjY291bnRNZXRhIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihwYXJlbnQ6IEFkZHJlc3MpOiB7QWRkcmVzczogQW55U3RydWN0fSB7CiAgICBsZXQgYWNjdCA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkKICAgIGxldCBtID0gYWNjdC5zdG9yYWdlLmJvcnJvdzwmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKCiAgICBpZiBtID09IG5pbCB7CiAgICAgICAgcmV0dXJuIHt9CiAgICB9IGVsc2UgewogICAgICAgIHZhciBkYXRhOiB7QWRkcmVzczogQW55U3RydWN0fSA9IHt9CiAgICAgICAgZm9yIGFkZHJlc3MgaW4gbT8uZ2V0Q2hpbGRBZGRyZXNzZXMoKSEgewogICAgICAgICAgICBsZXQgYyA9IG0/LmdldENoaWxkQWNjb3VudERpc3BsYXkoYWRkcmVzczogYWRkcmVzcykgCiAgICAgICAgICAgIGRhdGEuaW5zZXJ0KGtleTogYWRkcmVzcywgYykKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGRhdGEKICAgIH0KfQ==",
                "getChildAddresses": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRDaGlsZEFkZHJlc3NlcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQoKYWNjZXNzKGFsbCkgZnVuIG1haW4ocGFyZW50OiBBZGRyZXNzKTogW0FkZHJlc3NdIHsKICAgIGxldCBhY2N0ID0gZ2V0QXV0aEFjY291bnQ8YXV0aChTdG9yYWdlKSAmQWNjb3VudD4ocGFyZW50KQogICAgbGV0IG1hbmFnZXIgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICByZXR1cm4gIG1hbmFnZXIuZ2V0Q2hpbGRBZGRyZXNzZXMoKQp9",
                "getExamplenftCollectionFromDelegator": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRFeGFtcGxlbmZ0Q29sbGVjdGlvbkZyb21EZWxlZ2F0b3IgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweDI4YjgxZjU4ODBkNTU1NGUKCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKHBhcmVudDogQWRkcmVzcywgY2hpbGQ6IEFkZHJlc3MsIGlzUHVibGljOiBCb29sKSB7CiAgICBsZXQgbSA9IGdldEF1dGhBY2NvdW50PGF1dGgoU3RvcmFnZSkgJkFjY291bnQ+KHBhcmVudCkuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgbm90IGZvdW5kIikKICAgIGxldCBhY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKQogICAgICAgID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCBpbiBtYW5hZ2VyIikKCiAgICBsZXQgdCA9IFR5cGU8Q2FwYWJpbGl0eTwmRXhhbXBsZU5GVC5Db2xsZWN0aW9uPj4oKQoKICAgIGxldCBjYXAgPSAoaXNQdWJsaWMgPyBhY2N0LmdldFB1YmxpY0NhcEZyb21EZWxlZ2F0b3IodHlwZTogdCkgOiBhY2N0LmdldFByaXZhdGVDYXBGcm9tRGVsZWdhdG9yKHR5cGU6IHQpKQogICAgICAgID8/IHBhbmljKCJjYXBhYmlsaXR5IG5vdCBmb3VuZCIpCiAgICAKICAgIGFzc2VydChjYXAuZ2V0VHlwZSgpID09IHQsIG1lc3NhZ2U6ICJtaXNtYXRjaGVkIGNhcGFiaWxpdHkgdHlwZXMiKQp9",
                "publishToParent": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBwdWJsaXNoVG9QYXJlbnQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgI2FsbG93QWNjb3VudExpbmtpbmcKCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmFjdG9yeSBmcm9tIDB4Q2FwYWJpbGl0eUZhY3RvcnkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKaW1wb3J0IENhcGFiaWxpdHlEZWxlZ2F0b3IgZnJvbSAweENhcGFiaWxpdHlEZWxlZ2F0b3IKCnRyYW5zYWN0aW9uKHBhcmVudDogQWRkcmVzcywgZmFjdG9yeUFkZHJlc3M6IEFkZHJlc3MsIGZpbHRlckFkZHJlc3M6IEFkZHJlc3MpIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAgIGxldCBvd25lZCA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk93bmVyKSAmSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnQ+KGZyb206IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJvd25lZCBhY2NvdW50IG5vdCBmb3VuZCIpCgogICAgICAgIGxldCBmYWN0b3J5ID0gZ2V0QWNjb3VudChmYWN0b3J5QWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwmQ2FwYWJpbGl0eUZhY3RvcnkuTWFuYWdlcj4oQ2FwYWJpbGl0eUZhY3RvcnkuUHVibGljUGF0aCkKICAgICAgICBhc3NlcnQoZmFjdG9yeS5jaGVjaygpLCBtZXNzYWdlOiAiZmFjdG9yeSBhZGRyZXNzIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgbGV0IGZpbHRlciA9IGdldEFjY291bnQoZmlsdGVyQWRkcmVzcykuY2FwYWJpbGl0aWVzLmdldDwme0NhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyfT4oQ2FwYWJpbGl0eUZpbHRlci5QdWJsaWNQYXRoKQogICAgICAgIGFzc2VydChmaWx0ZXIuY2hlY2soKSwgbWVzc2FnZTogImNhcGFiaWxpdHkgZmlsdGVyIGlzIG5vdCBjb25maWd1cmVkIHByb3Blcmx5IikKCiAgICAgICAgb3duZWQucHVibGlzaFRvUGFyZW50KHBhcmVudEFkZHJlc3M6IHBhcmVudCwgZmFjdG9yeTogZmFjdG9yeSwgZmlsdGVyOiBmaWx0ZXIpCiAgICB9Cn0=",
                "redeemAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICByZWRlZW1BY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweFZpZXdSZXNvbHZlcgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweENhcGFiaWxpdHlGaWx0ZXIKCnRyYW5zYWN0aW9uKGNoaWxkQWRkcmVzczogQWRkcmVzcywgZmlsdGVyQWRkcmVzczogQWRkcmVzcz8sIGZpbHRlclBhdGg6IFB1YmxpY1BhdGg/KSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzLCBJbmJveCkgJkFjY291bnQpIHsKICAgICAgICB2YXIgZmlsdGVyOiBDYXBhYmlsaXR5PCZ7Q2FwYWJpbGl0eUZpbHRlci5GaWx0ZXJ9Pj8gPSBuaWwKICAgICAgICBpZiBmaWx0ZXJBZGRyZXNzICE9IG5pbCAmJiBmaWx0ZXJQYXRoICE9IG5pbCB7CiAgICAgICAgICAgIGZpbHRlciA9IGdldEFjY291bnQoZmlsdGVyQWRkcmVzcyEpLmNhcGFiaWxpdGllcy5nZXQ8JntDYXBhYmlsaXR5RmlsdGVyLkZpbHRlcn0+KGZpbHRlclBhdGghKQogICAgICAgIH0KCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IG0gPC0gSHlicmlkQ3VzdG9keS5jcmVhdGVNYW5hZ2VyKGZpbHRlcjogZmlsdGVyKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LSBtLCB0bzogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCgogICAgICAgICAgICBmb3IgYyBpbiBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmdldENvbnRyb2xsZXJzKGZvclBhdGg6IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKSB7CiAgICAgICAgICAgICAgICBjLmRlbGV0ZSgpCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaChIeWJyaWRDdXN0b2R5Lk1hbmFnZXJQdWJsaWNQYXRoKQoKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntIeWJyaWRDdXN0b2R5Lk1hbmFnZXJQdWJsaWN9PihIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCksCiAgICAgICAgICAgICAgICBhdDogSHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljUGF0aAogICAgICAgICAgICApCgogICAgICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZ7SHlicmlkQ3VzdG9keS5NYW5hZ2VyUHJpdmF0ZSwgSHlicmlkQ3VzdG9keS5NYW5hZ2VyUHVibGljfT4oSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBsZXQgaW5ib3hOYW1lID0gSHlicmlkQ3VzdG9keS5nZXRDaGlsZEFjY291bnRJZGVudGlmaWVyKGFjY3QuYWRkcmVzcykKICAgICAgICBsZXQgY2FwID0gYWNjdC5pbmJveC5jbGFpbTxhdXRoKEh5YnJpZEN1c3RvZHkuQ2hpbGQpICZ7SHlicmlkQ3VzdG9keS5BY2NvdW50UHJpdmF0ZSwgSHlicmlkQ3VzdG9keS5BY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihpbmJveE5hbWUsIHByb3ZpZGVyOiBjaGlsZEFkZHJlc3MpCiAgICAgICAgICAgID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IGNhcCBub3QgZm91bmQiKQoKICAgICAgICBsZXQgbWFuYWdlciA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vIGZvdW5kIikKCiAgICAgICAgbWFuYWdlci5hZGRBY2NvdW50KGNhcDogY2FwKQogICAgfQp9",
                "sendChildFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kQ2hpbGRGVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgSHlicmlkQ3VzdG9keSBmcm9tIDB4SHlicmlkQ3VzdG9keQoKLy8gSEMtb3duZWQgaW1wb3J0cwppbXBvcnQgQ2FwYWJpbGl0eUZhY3RvcnkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCgp0cmFuc2FjdGlvbihhZGRyZXNzOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgcGF0aDogU3RyaW5nLCBhbW91bnQ6IFVGaXg2NCApIHsKCiAgLy8gVGhlIFZhdWx0IHJlc291cmNlIHRoYXQgaG9sZHMgdGhlIHRva2VucyB0aGF0IGFyZSBiZWluZyB0cmFuc2ZlcnJlZAogIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICBsZXQgdmF1bHREYXRhOiBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YQoKICBwcmVwYXJlKHNpZ25lcjogYXV0aChTdG9yYWdlKSAmQWNjb3VudCkgewogICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgICBsZXQgbSA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuTWFuYWdlKSAmSHlicmlkQ3VzdG9keS5NYW5hZ2VyPihmcm9tOiBIeWJyaWRDdXN0b2R5Lk1hbmFnZXJTdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBhZGRyZXNzKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAKICAgICAgc2VsZi52YXVsdERhdGEgPSA8VG9rZW4+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHNlbGYudmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgICAKICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgICAKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgc2VsZi5wYXltZW50VmF1bHQgPC0gdmF1bHRSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCiAgfQoKICBleGVjdXRlIHsKCiAgICAgIC8vIEdldCB0aGUgcmVjaXBpZW50J3MgcHVibGljIGFjY291bnQgb2JqZWN0CiAgICAgIGxldCByZWNpcGllbnQgPSBnZXRBY2NvdW50KHJlY2VpdmVyKQoKICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICBsZXQgcmVjZWl2ZXJSZWYgPSByZWNpcGllbnQuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PihzZWxmLnZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCgogICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5wYXltZW50VmF1bHQpCiAgfQp9CiA=",
                "sendChildFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kQ2hpbGRGVFRvQ2hpbGQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKdHJhbnNhY3Rpb24oYWRkcmVzczogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICBsZXQgcGF5bWVudFZhdWx0OiBAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9CiAgbGV0IHZhdWx0RGF0YTogRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGEKCiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgLy8gc2lnbmVyIGlzIHRoZSBwYXJlbnQgYWNjb3VudAogICAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICA/PyBwYW5pYygibWFuYWdlciBkb2VzIG5vdCBleGlzdCIpCiAgICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgCiAgICAgIHNlbGYudmF1bHREYXRhID0gPFRva2VuPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKSkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPwogICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPFRva2VuPiAiKQoKICAgICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBzZWxmLnZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgICAgCiAgICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgY2hpbGQncyBzdG9yZWQgdmF1bHQKICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICAgIHNlbGYucGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogIH0KCiAgZXhlY3V0ZSB7CgogICAgICAvLyBHZXQgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBhY2NvdW50IG9iamVjdAogICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudChyZWNlaXZlcikKCiAgICAgIC8vIEdldCBhIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgUmVjZWl2ZXIKICAgICAgbGV0IHJlY2VpdmVyUmVmID0gcmVjaXBpZW50LmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oc2VsZi52YXVsdERhdGEucmVjZWl2ZXJQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgLy8gRGVwb3NpdCB0aGUgd2l0aGRyYXduIHRva2VucyBpbiB0aGUgcmVjaXBpZW50J3MgcmVjZWl2ZXIKICAgICAgcmVjZWl2ZXJSZWYuZGVwb3NpdChmcm9tOiA8LXNlbGYucGF5bWVudFZhdWx0KQogIH0KfQog",
                "sendChildFTWithParent": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kQ2hpbGRGVFdpdGhQYXJlbnQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgoKdHJhbnNhY3Rpb24oYW1vdW50OiBVRml4NjQsIHRvOiBBZGRyZXNzLCBjaGlsZDogQWRkcmVzcykgewoKICAgIC8vIFRoZSBWYXVsdCByZXNvdXJjZSB0aGF0IGhvbGRzIHRoZSB0b2tlbnMgdGhhdCBhcmUgYmVpbmcgdHJhbnNmZXJyZWQKICAgIGxldCBwYXltZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCB2YXVsdERhdGE6IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhCgogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgICAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAgICAgLy8gZ2V0IHRoZSBtYW5hZ2VyIHJlc291cmNlIGFuZCBib3Jyb3cgY2hpbGRBY2NvdW50CiAgICAgICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgICAgICBsZXQgY2hpbGRBY2N0ID0gbS5ib3Jyb3dBY2NvdW50KGFkZHI6IGNoaWxkKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIHNlbGYudmF1bHREYXRhID0gRXhhbXBsZVRva2VuLnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZUVmF1bHREYXRhPigpKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/CiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIEV4YW1wbGVUb2tlbiIpCgogICAgICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgICAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICAgICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHNlbGYudmF1bHREYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgICAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgICAgICAKICAgICAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICAgICAgbGV0IHZhdWx0UmVmID0gcHJvdmlkZXJDYXAuYm9ycm93KCkhCgogICAgICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgICAgICBzZWxmLnBheW1lbnRWYXVsdCA8LSB2YXVsdFJlZi53aXRoZHJhdyhhbW91bnQ6IGFtb3VudCkKICAgIH0KCiAgICBleGVjdXRlIHsKCiAgICAgICAgLy8gR2V0IHRoZSByZWNpcGllbnQncyBwdWJsaWMgYWNjb3VudCBvYmplY3QKICAgICAgICBsZXQgcmVjaXBpZW50ID0gZ2V0QWNjb3VudCh0bykKCiAgICAgICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBSZWNlaXZlcgogICAgICAgIGxldCByZWNlaXZlclJlZiA9IHJlY2lwaWVudC5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHNlbGYudmF1bHREYXRhLnJlY2VpdmVyUGF0aCkhLmJvcnJvdygpCgkJCT8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQoKICAgICAgICAvLyBEZXBvc2l0IHRoZSB3aXRoZHJhd24gdG9rZW5zIGluIHRoZSByZWNpcGllbnQncyByZWNlaXZlcgogICAgICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQoZnJvbTogPC1zZWxmLnBheW1lbnRWYXVsdCkKICAgIH0KfQog",
                "sendChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kQ2hpbGRORlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGNoaWxkQWRkcjogQWRkcmVzcywgcmVjZWl2ZXI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPi5yZXNvbHZlQ29udHJhY3RWaWV3KHJlc291cmNlVHlwZTogbmlsLCB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8TkZUPiAiKQoKICAgIC8vZ2V0IEZ0IGNhcCBmcm9tIGNoaWxkIGFjY291bnQKICAgIGxldCBjYXBUeXBlID0gVHlwZTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KCkKICAgIGxldCBjb250cm9sbGVySUQgPSBjaGlsZEFjY3QuZ2V0Q29udHJvbGxlcklERm9yVHlwZSh0eXBlOiBjYXBUeXBlLCBmb3JQYXRoOiBjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKICAgIC8vIFdpdGhkcmF3IHRva2VucyBmcm9tIHRoZSBzaWduZXIncyBzdG9yZWQgdmF1bHQKICAgIGxldCBuZnQgPC0gY29sbGVjdGlvblJlZi53aXRoZHJhdyh3aXRoZHJhd0lEOiBpZCkKICAgIGxldCByZWNlaXZlckFjYyA9IGdldEFjY291bnQocmVjZWl2ZXIpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgcmVjZWl2ZXJBY2MuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEuYm9ycm93KCkKICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IHJlY2VpdmVyIHJlZmVyZW5jZSB0byB0aGUgcmVjaXBpZW50J3MgVmF1bHQiKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
                "sendChildNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kQ2hpbGRORlRUb0NoaWxkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKdHJhbnNhY3Rpb24oY2hpbGRBZGRyOiBBZGRyZXNzLCByZWNlaXZlcjogQWRkcmVzcywgaWRlbnRpZmllcjogU3RyaW5nLCBpZDogVUludDY0KSB7CiAgcHJlcGFyZShzaWduZXI6IGF1dGgoU3RvcmFnZSkgJkFjY291bnQpIHsKICAgIC8vIHNpZ25lciBpcyB0aGUgcGFyZW50IGFjY291bnQKICAgIC8vIGdldCB0aGUgbWFuYWdlciByZXNvdXJjZSBhbmQgYm9ycm93IGNoaWxkQWNjb3VudAogICAgbGV0IG0gPSBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChIeWJyaWRDdXN0b2R5Lk1hbmFnZSkgJkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm1hbmFnZXIgZG9lcyBub3QgZXhpc3QiKQogICAgbGV0IGNoaWxkQWNjdCA9IG0uYm9ycm93QWNjb3VudChhZGRyOiBjaGlsZEFkZHIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICAKICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IDxORlQ+LnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPwogICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IHRoZSB2YXVsdCBkYXRhIHZpZXcgZm9yIDxORlQ+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIAogICAgbGV0IGNhcCA9IGNoaWxkQWNjdC5nZXRDYXBhYmlsaXR5KGNvbnRyb2xsZXJJRDogY29udHJvbGxlcklELCB0eXBlOiBjYXBUeXBlKSA/PyBwYW5pYygibm8gY2FwIGZvdW5kIikKICAgIGxldCBwcm92aWRlckNhcCA9IGNhcCBhcyEgQ2FwYWJpbGl0eTxhdXRoKE5vbkZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7Tm9uRnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+CiAgICBhc3NlcnQocHJvdmlkZXJDYXAuY2hlY2soKSwgbWVzc2FnZTogImludmFsaWQgcHJvdmlkZXIgY2FwYWJpbGl0eSIpCiAgICBsZXQgY29sbGVjdGlvblJlZiA9IHByb3ZpZGVyQ2FwLmJvcnJvdygpIQoKCiAgICBsZXQgcmVjZWl2ZXJDaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogcmVjZWl2ZXIpID8/IHBhbmljKCJjaGlsZCBhY2NvdW50IG5vdCBmb3VuZCIpCiAgICBsZXQgcmVjZWl2ZXJDb250cm9sbGVySWQgPSByZWNlaXZlckNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJubyBjb250cm9sbGVyIGZvdW5kIGZvciBjYXBUeXBlIikKICAgIGxldCByZWNlaXZlckNhcCA9IHJlY2VpdmVyQ2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiByZWNlaXZlckNvbnRyb2xsZXJJZCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpIAogICAgbGV0IHB1YmxpY0NhcCA9IHJlY2VpdmVyQ2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGxldCByZWNlaXZlclJlZiA9ICBwdWJsaWNDYXAuYm9ycm93KCkhCgogICAgLy8gV2l0aGRyYXcgdG9rZW5zIGZyb20gdGhlIHNpZ25lcidzIHN0b3JlZCB2YXVsdAogICAgbGV0IG5mdCA8LSBjb2xsZWN0aW9uUmVmLndpdGhkcmF3KHdpdGhkcmF3SUQ6IGlkKQogICAgCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
                "setupOwnedAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZXR1cE93bmVkQWNjb3VudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAjYWxsb3dBY2NvdW50TGlua2luZwoKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4Vmlld1Jlc29sdmVyCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5Ci8vLyBUaGlzIHRyYW5zYWN0aW9uIGNvbmZpZ3VyZXMgYW4gT3duZWRBY2NvdW50IGluIHRoZSBzaWduZXIgaWYgbmVlZGVkIGFuZCBjb25maWd1cmVzIGl0cyBDYXBhYmlsaXRpZXMgcGVyCi8vLyBIeWJyaWRDdXN0b2R5J3MgaW50ZW5kZWQgZGVzaWduLiBJZiBEaXNwbGF5IHZhbHVlcyBhcmUgc3BlY2lmaWVkIChhcyByZWNvbW1lbmRlZCksIHRoZXkgd2lsbCBiZSBzZXQgb24gdGhlCi8vLyBzaWduZXIncyBPd25lZEFjY291bnQuCi8vLwp0cmFuc2FjdGlvbihuYW1lOiBTdHJpbmc/LCBkZXNjOiBTdHJpbmc/LCB0aHVtYm5haWxVUkw6IFN0cmluZz8pIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGFjY3RDYXAgPSBhY2N0LmNhcGFiaWxpdGllcy5hY2NvdW50Lmlzc3VlPGF1dGgoU3RvcmFnZSwgQ29udHJhY3RzLCBLZXlzLCBJbmJveCwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudD4oKQoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgPT0gbmlsIHsKICAgICAgICAgICAgbGV0IG93bmVkQWNjb3VudCA8LSBIeWJyaWRDdXN0b2R5LmNyZWF0ZU93bmVkQWNjb3VudChhY2N0OiBhY2N0Q2FwKQogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSg8LW93bmVkQWNjb3VudCwgdG86IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgfQoKICAgICAgICBsZXQgb3duZWQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5Pd25lcikgJkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygib3duZWQgYWNjb3VudCBub3QgZm91bmQiKQogICAgICAgIAogICAgICAgIC8vIFNldCB0aGUgZGlzcGxheSBtZXRhZGF0YSBmb3IgdGhlIE93bmVkQWNjb3VudAogICAgICAgIGlmIG5hbWUgIT0gbmlsICYmIGRlc2MgIT0gbmlsICYmIHRodW1ibmFpbFVSTCAhPSBuaWwgewogICAgICAgICAgICBsZXQgdGh1bWJuYWlsID0gTWV0YWRhdGFWaWV3cy5IVFRQRmlsZSh1cmw6IHRodW1ibmFpbFVSTCEpCiAgICAgICAgICAgIGxldCBkaXNwbGF5ID0gTWV0YWRhdGFWaWV3cy5EaXNwbGF5KG5hbWU6IG5hbWUhLCBkZXNjcmlwdGlvbjogZGVzYyEsIHRodW1ibmFpbDogdGh1bWJuYWlsKQogICAgICAgICAgICBvd25lZC5zZXREaXNwbGF5KGRpc3BsYXkpCiAgICAgICAgfQoKICAgICAgICAvLyBjaGVjayB0aGF0IHBhdGhzIGFyZSBhbGwgY29uZmlndXJlZCBwcm9wZXJseQogICAgICAgIGZvciBjIGluIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZ2V0Q29udHJvbGxlcnMoZm9yUGF0aDogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkgewogICAgICAgICAgICBjLmRlbGV0ZSgpCiAgICAgICAgfQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Cb3Jyb3dhYmxlQWNjb3VudCwgSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0h5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljUGF0aAogICAgICAgICkKICAgIH0KfQog",
                "setupOwnedAccountAndPublishToParent": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZXR1cE93bmVkQWNjb3VudEFuZFB1Ymxpc2hUb1BhcmVudCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAjYWxsb3dBY2NvdW50TGlua2luZwoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4Vmlld1Jlc29sdmVyCgoKaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhDYXBhYmlsaXR5RmFjdG9yeQppbXBvcnQgQ2FwYWJpbGl0eUZpbHRlciBmcm9tIDB4Q2FwYWJpbGl0eUZpbHRlcgppbXBvcnQgQ2FwYWJpbGl0eURlbGVnYXRvciBmcm9tIDB4Q2FwYWJpbGl0eURlbGVnYXRvcgovLy8gVGhpcyB0cmFuc2FjdGlvbiBjb25maWd1cmVzIGFuIE93bmVkQWNjb3VudCBpbiB0aGUgc2lnbmVyIGlmIG5lZWRlZCwgYW5kIHByb2NlZWRzIHRvIGNyZWF0ZSBhIENoaWxkQWNjb3VudCAKLy8vIHVzaW5nIENhcGFiaWxpdHlGYWN0b3J5Lk1hbmFnZXIgYW5kIENhcGFiaWxpdHlGaWx0ZXIuRmlsdGVyIENhcGFiaWxpdGllcyBmcm9tIHRoZSBnaXZlbiBhZGRyZXNzZXMuIEEKLy8vIENhcGFiaWxpdHkgb24gdGhlIENoaWxkQWNjb3VudCBpcyB0aGVuIHB1Ymxpc2hlZCB0byB0aGUgc3BlY2lmaWVkIHBhcmVudCBhY2NvdW50LiAKLy8vCnRyYW5zYWN0aW9uKAogICAgcGFyZW50OiBBZGRyZXNzLAogICAgZmFjdG9yeUFkZHJlc3M6IEFkZHJlc3MsCiAgICBmaWx0ZXJBZGRyZXNzOiBBZGRyZXNzLAogICAgbmFtZTogU3RyaW5nLAogICAgZGVzYzogU3RyaW5nLAogICAgdGh1bWJuYWlsVVJMOiBTdHJpbmcKKSB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIC8vIENvbmZpZ3VyZSBPd25lZEFjY291bnQgaWYgaXQgZG9lc24ndCBleGlzdAogICAgICAgIGlmIGFjY3Quc3RvcmFnZS5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50Pihmcm9tOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICB2YXIgYWNjdENhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLmFjY291bnQuaXNzdWU8YXV0aChTdG9yYWdlLCBDb250cmFjdHMsIEtleXMsIEluYm94LCBDYXBhYmlsaXRpZXMpICZBY2NvdW50PigpCiAgICAgICAgICAgIGxldCBvd25lZEFjY291bnQgPC0gSHlicmlkQ3VzdG9keS5jcmVhdGVPd25lZEFjY291bnQoYWNjdDogYWNjdENhcCkKICAgICAgICAgICAgYWNjdC5zdG9yYWdlLnNhdmUoPC1vd25lZEFjY291bnQsIHRvOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKQogICAgICAgIH0KCiAgICAgICAgZm9yIGMgaW4gYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVycyhmb3JQYXRoOiBIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSB7CiAgICAgICAgICAgIGMuZGVsZXRlKCkKICAgICAgICB9CgoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZ7SHlicmlkQ3VzdG9keS5Cb3Jyb3dhYmxlQWNjb3VudCwgSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRQdWJsaWMsIFZpZXdSZXNvbHZlci5SZXNvbHZlcn0+KEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50U3RvcmFnZVBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0h5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljLCBWaWV3UmVzb2x2ZXIuUmVzb2x2ZXJ9PihIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IEh5YnJpZEN1c3RvZHkuT3duZWRBY2NvdW50UHVibGljUGF0aAogICAgICAgICkKCiAgICAgICAgbGV0IG93bmVkID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKEh5YnJpZEN1c3RvZHkuT3duZXIpICZIeWJyaWRDdXN0b2R5Lk93bmVkQWNjb3VudD4oZnJvbTogSHlicmlkQ3VzdG9keS5Pd25lZEFjY291bnRTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIm93bmVkIGFjY291bnQgbm90IGZvdW5kIikKICAgICAgICAKICAgICAgICAvLyBTZXQgdGhlIGRpc3BsYXkgbWV0YWRhdGEgZm9yIHRoZSBPd25lZEFjY291bnQKICAgICAgICBpZiBuYW1lICE9IG5pbCAmJiBkZXNjICE9IG5pbCAmJiB0aHVtYm5haWxVUkwgIT0gbmlsIHsKICAgICAgICAgICAgbGV0IHRodW1ibmFpbCA9IE1ldGFkYXRhVmlld3MuSFRUUEZpbGUodXJsOiB0aHVtYm5haWxVUkwhKQogICAgICAgICAgICBsZXQgZGlzcGxheSA9IE1ldGFkYXRhVmlld3MuRGlzcGxheShuYW1lOiBuYW1lISwgZGVzY3JpcHRpb246IGRlc2MhLCB0aHVtYm5haWw6IHRodW1ibmFpbCkKICAgICAgICAgICAgb3duZWQuc2V0RGlzcGxheShkaXNwbGF5KQogICAgICAgIH0KCiAgICAgICAgLy8gR2V0IENhcGFiaWxpdHlGYWN0b3J5ICYgQ2FwYWJpbGl0eUZpbHRlciBDYXBhYmlsaXRpZXMKICAgICAgICBsZXQgZmFjdG9yeSA9IGdldEFjY291bnQoZmFjdG9yeUFkZHJlc3MpLmNhcGFiaWxpdGllcy5nZXQ8JkNhcGFiaWxpdHlGYWN0b3J5Lk1hbmFnZXI+KENhcGFiaWxpdHlGYWN0b3J5LlB1YmxpY1BhdGgpCiAgICAgICAgYXNzZXJ0KGZhY3RvcnkuY2hlY2soKSwgbWVzc2FnZTogImZhY3RvcnkgYWRkcmVzcyBpcyBub3QgY29uZmlndXJlZCBwcm9wZXJseSIpCgogICAgICAgIGxldCBmaWx0ZXIgPSBnZXRBY2NvdW50KGZpbHRlckFkZHJlc3MpLmNhcGFiaWxpdGllcy5nZXQ8JntDYXBhYmlsaXR5RmlsdGVyLkZpbHRlcn0+KENhcGFiaWxpdHlGaWx0ZXIuUHVibGljUGF0aCkKICAgICAgICBhc3NlcnQoZmlsdGVyLmNoZWNrKCksIG1lc3NhZ2U6ICJjYXBhYmlsaXR5IGZpbHRlciBpcyBub3QgY29uZmlndXJlZCBwcm9wZXJseSIpCgogICAgICAgIC8vIEZpbmFsbHkgcHVibGlzaCBhIENoaWxkQWNjb3VudCBjYXBhYmlsaXR5IG9uIHRoZSBzaWduaW5nIGFjY291bnQgdG8gdGhlIHNwZWNpZmllZCBwYXJlbnQKICAgICAgICBvd25lZC5wdWJsaXNoVG9QYXJlbnQocGFyZW50QWRkcmVzczogcGFyZW50LCBmYWN0b3J5OiBmYWN0b3J5LCBmaWx0ZXI6IGZpbHRlcikKICAgIH0KfQ==",
                "transferChildFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlckNoaWxkRlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCi8vIEhDLW93bmVkIGltcG9ydHMKaW1wb3J0IENhcGFiaWxpdHlGYWN0b3J5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+CgoKCnRyYW5zYWN0aW9uKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgYW1vdW50OiBVRml4NjQgKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IHZhdWx0RGF0YSA9IDxUb2tlbj4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCB0aGUgdmF1bHQgZGF0YSB2aWV3IGZvciA8VG9rZW4+ICIpCgogICAgLy9nZXQgRnQgY2FwIGZyb20gY2hpbGQgYWNjb3VudAogICAgbGV0IGNhcFR5cGUgPSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4oKQogICAgbGV0IGNvbnRyb2xsZXJJRCA9IGNoaWxkQWNjdC5nZXRDb250cm9sbGVySURGb3JUeXBlKHR5cGU6IGNhcFR5cGUsIGZvclBhdGg6IHZhdWx0RGF0YS5zdG9yYWdlUGF0aCkKICAgICAgICA/PyBwYW5pYygibm8gY29udHJvbGxlciBmb3VuZCBmb3IgY2FwVHlwZSIpCiAgICAKICAgIGxldCBjYXAgPSBjaGlsZEFjY3QuZ2V0Q2FwYWJpbGl0eShjb250cm9sbGVySUQ6IGNvbnRyb2xsZXJJRCwgdHlwZTogY2FwVHlwZSkgPz8gcGFuaWMoIm5vIGNhcCBmb3VuZCIpCiAgICBsZXQgcHJvdmlkZXJDYXAgPSBjYXAgYXMhIENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PgogICAgYXNzZXJ0KHByb3ZpZGVyQ2FwLmNoZWNrKCksIG1lc3NhZ2U6ICJpbnZhbGlkIHByb3ZpZGVyIGNhcGFiaWxpdHkiKQogICAgCiAgICAvLyBHZXQgYSByZWZlcmVuY2UgdG8gdGhlIGNoaWxkJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgdmF1bHRSZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgcGF5bWVudFZhdWx0IDwtIHZhdWx0UmVmLndpdGhkcmF3KGFtb3VudDogYW1vdW50KQogICAgbGV0IHJlY2VpdmVyUmVmID0gIHNpZ25lci5jYXBhYmlsaXRpZXMuZ2V0PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+KHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpIS5ib3Jyb3coKQogICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgcmVjZWl2ZXIgcmVmZXJlbmNlIHRvIHRoZSByZWNpcGllbnQncyBWYXVsdCIpCiAgICByZWNlaXZlclJlZi5kZXBvc2l0KGZyb206IDwtcGF5bWVudFZhdWx0KQogIH0KfQ==",
                "transferChildNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2ZlckNoaWxkTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBIeWJyaWRDdXN0b2R5IGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBDYXBhYmlsaXR5RmlsdGVyIGZyb20gMHhIeWJyaWRDdXN0b2R5CmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCA8TkZUPiBmcm9tIDxORlRBZGRyZXNzPgoKCnRyYW5zYWN0aW9uKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGg6IFN0cmluZywgIGlkOiBVSW50NjQgKSB7CgogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogYWRkcmVzcykgPz8gcGFuaWMoImNoaWxkIGFjY291bnQgbm90IGZvdW5kIikKICAgIAogICAgbGV0IGNvbGxlY3Rpb25EYXRhID0gPE5GVD4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IHByb3ZpZGVyQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLlByb3ZpZGVyfT4KICAgIGFzc2VydChwcm92aWRlckNhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgLy8gR2V0IGEgcmVmZXJlbmNlIHRvIHRoZSBjaGlsZCdzIHN0b3JlZCB2YXVsdAogICAgbGV0IGNvbGxlY3Rpb25SZWYgPSBwcm92aWRlckNhcC5ib3Jyb3coKSEKCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgbmZ0IDwtIGNvbGxlY3Rpb25SZWYud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCiAgICBsZXQgcmVjZWl2ZXJSZWYgPSAgc2lnbmVyLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfT4oY29sbGVjdGlvbkRhdGEucHVibGljUGF0aCkhLmJvcnJvdygpCiAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyByZWNlaXZlciByZWZlcmVuY2UgdG8gdGhlIHJlY2lwaWVudCdzIFZhdWx0IikKICAgIHJlY2VpdmVyUmVmLmRlcG9zaXQodG9rZW46IDwtIG5mdCkKICB9Cn0=",
                "transferNFTToChild": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0cmFuc2Zlck5GVFRvQ2hpbGQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IENhcGFiaWxpdHlGaWx0ZXIgZnJvbSAweEh5YnJpZEN1c3RvZHkKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IDxORlQ+IGZyb20gPE5GVEFkZHJlc3M+Cgp0cmFuc2FjdGlvbihjaGlsZEFkZHI6IEFkZHJlc3MsIGlkZW50aWZpZXI6IFN0cmluZywgaWQ6IFVJbnQ2NCkgewogIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UpICZBY2NvdW50KSB7CiAgICAvLyBzaWduZXIgaXMgdGhlIHBhcmVudCBhY2NvdW50CiAgICAvLyBnZXQgdGhlIG1hbmFnZXIgcmVzb3VyY2UgYW5kIGJvcnJvdyBjaGlsZEFjY291bnQKICAgIGxldCBtID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PGF1dGgoSHlicmlkQ3VzdG9keS5NYW5hZ2UpICZIeWJyaWRDdXN0b2R5Lk1hbmFnZXI+KGZyb206IEh5YnJpZEN1c3RvZHkuTWFuYWdlclN0b3JhZ2VQYXRoKQogICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIGRvZXMgbm90IGV4aXN0IikKICAgIGxldCBjaGlsZEFjY3QgPSBtLmJvcnJvd0FjY291bnQoYWRkcjogY2hpbGRBZGRyKSA/PyBwYW5pYygiY2hpbGQgYWNjb3VudCBub3QgZm91bmQiKQogICAgCiAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSA8TkZUPiAucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKSkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/CiAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgPE5GVD4gIikKCiAgICAvL2dldCBGdCBjYXAgZnJvbSBjaGlsZCBhY2NvdW50CiAgICBsZXQgY2FwVHlwZSA9IFR5cGU8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PigpCiAgICBsZXQgY29udHJvbGxlcklEID0gY2hpbGRBY2N0LmdldENvbnRyb2xsZXJJREZvclR5cGUodHlwZTogY2FwVHlwZSwgZm9yUGF0aDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpCiAgICAgICAgPz8gcGFuaWMoIm5vIGNvbnRyb2xsZXIgZm91bmQgZm9yIGNhcFR5cGUiKQogICAgCiAgICBsZXQgY2FwID0gY2hpbGRBY2N0LmdldENhcGFiaWxpdHkoY29udHJvbGxlcklEOiBjb250cm9sbGVySUQsIHR5cGU6IGNhcFR5cGUpID8/IHBhbmljKCJubyBjYXAgZm91bmQiKQogICAgbGV0IGNoaWxkQ2FwID0gY2FwIGFzISBDYXBhYmlsaXR5PCZ7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4KICAgIGFzc2VydChjaGlsZENhcC5jaGVjaygpLCBtZXNzYWdlOiAiaW52YWxpZCBwcm92aWRlciBjYXBhYmlsaXR5IikKICAgIAogICAgbGV0IHBhcmVudFJlZiA9ICBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8YXV0aChOb25GdW5naWJsZVRva2VuLldpdGhkcmF3KSAme05vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pihmcm9tIDogY29sbGVjdGlvbkRhdGEuc3RvcmFnZVBhdGgpIQogICAgbGV0IGNoaWxkUmVmID0gY2hpbGRDYXAuYm9ycm93KCkhCiAgICAvLyBXaXRoZHJhdyB0b2tlbnMgZnJvbSB0aGUgc2lnbmVyJ3Mgc3RvcmVkIHZhdWx0CiAgICBsZXQgbmZ0IDwtIHBhcmVudFJlZiEud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpIQogICAgCiAgICBjaGlsZFJlZi5kZXBvc2l0KHRva2VuOiA8LSBuZnQpCiAgfQp9",
                "unlinkChildAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB1bmxpbmtDaGlsZEFjY291bnQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEh5YnJpZEN1c3RvZHkgZnJvbSAweEh5YnJpZEN1c3RvZHkKCnRyYW5zYWN0aW9uKGNoaWxkOiBBZGRyZXNzKSB7CiAgICBwcmVwYXJlIChhY2N0OiBBdXRoQWNjb3VudCkgewogICAgICAgIGxldCBtYW5hZ2VyID0gYWNjdC5ib3Jyb3c8Jkh5YnJpZEN1c3RvZHkuTWFuYWdlcj4oZnJvbTogSHlicmlkQ3VzdG9keS5NYW5hZ2VyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJtYW5hZ2VyIG5vdCBmb3VuZCIpCiAgICAgICAgbWFuYWdlci5yZW1vdmVDaGlsZChhZGRyOiBjaGlsZCkKICAgIH0KfQ=="
            },
            "lostAndFound": {
                "claimFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjbGFpbUZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAoKCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKdHJhbnNhY3Rpb24odmF1bHRJZGVudGlmaWVyOiBTdHJpbmcpIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IHZhdWx0VHlwZSA9IENvbXBvc2l0ZVR5cGUodmF1bHRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBWYXVsdCB0eXBlIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQodmF1bHRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQodG9rZW5Db250cmFjdEFkZHJlc3MpLmNvbnRyYWN0cy5ib3Jyb3c8JntWaWV3UmVzb2x2ZXJ9PihuYW1lOiB0b2tlbkNvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gRnVuZ2libGVUb2tlbiBjb250cmFjdCIpCiAgICAgICAgbGV0IHZhdWx0RGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT4oKQogICAgICAgICAgICApIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKCiAgICAgICAKCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwme0Z1bmdpYmxlVG9rZW4uVmF1bHR9Pihmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGFjY3Quc3RvcmFnZS5zYXZlKAogICAgICAgICAgICAgICAgPC0gdmF1bHREYXRhLmNyZWF0ZUVtcHR5VmF1bHQoKSwKICAgICAgICAgICAgICAgIHRvOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKQogICAgICAgIH0KCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMudW5wdWJsaXNoKHZhdWx0RGF0YS5yZWNlaXZlclBhdGgpCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHZhdWx0RGF0YS5zdG9yYWdlUGF0aCksCiAgICAgICAgICAgIGF0OiB2YXVsdERhdGEucmVjZWl2ZXJQYXRoCiAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9Pih2YXVsdERhdGEucmVjZWl2ZXJQYXRoKQoKICAgICAgICBMb3N0QW5kRm91bmQucmVkZWVtQWxsKHR5cGU6IHZhdWx0VHlwZSwgbWF4OiBuaWwsIHJlY2VpdmVyOiBjYXApCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVyKGJ5Q2FwYWJpbGl0eUlEOiBjYXAuaWQpIS5kZWxldGUoKQogICAgfQp9",
                "claimNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjbGFpbU5GVCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICAKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4TG9zdEFuZEZvdW5kCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKG5mdElkZW50aWZpZXI6IFN0cmluZykgewogICAgcHJlcGFyZShhY2N0OiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKICAgICAgICBsZXQgbmZ0VHlwZSA9IENvbXBvc2l0ZVR5cGUobmZ0SWRlbnRpZmllcikKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBjb25zdHJ1Y3QgTkZUIHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKICAgICAgICBsZXQgbmZ0Q29udHJhY3RBZGRyZXNzID0gRmxvd0VWTUJyaWRnZVV0aWxzLmdldENvbnRyYWN0QWRkcmVzcyhmcm9tVHlwZTogbmZ0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgYWRkcmVzcyBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdE5hbWUgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3ROYW1lKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBuYW1lIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCgogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KG5mdENvbnRyYWN0QWRkcmVzcykuY29udHJhY3RzLmJvcnJvdzwme1ZpZXdSZXNvbHZlcn0+KG5hbWU6IG5mdENvbnRyYWN0TmFtZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgVmlld1Jlc29sdmVyIGZyb20gTkZUIGNvbnRyYWN0IikKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8TWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT4oKQogICAgICAgICAgICApIGFzISBNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPyA/PyBwYW5pYygiQ291bGQgbm90IHJlc29sdmUgTkZUQ29sbGVjdGlvbkRhdGEgdmlldyIpCiAgICAgICAgCiAgICAgICAKCiAgICAgICAgaWYgYWNjdC5zdG9yYWdlLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvbn0+KGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgICAgICBhY2N0LnN0b3JhZ2Uuc2F2ZSgKICAgICAgICAgICAgICAgIDwtIGNvbGxlY3Rpb25EYXRhLmNyZWF0ZUVtcHR5Q29sbGVjdGlvbigpLAogICAgICAgICAgICAgICAgdG86IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkKICAgICAgICB9CgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaChjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihjb2xsZWN0aW9uRGF0YS5zdG9yYWdlUGF0aCksCiAgICAgICAgICAgIGF0OiBjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoCiAgICAgICAgKQogICAgICAgICAgICAgICAgCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwme05vbkZ1bmdpYmxlVG9rZW4uQ29sbGVjdGlvblB1YmxpY30+KGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgpCgogICAgICAgIExvc3RBbmRGb3VuZC5yZWRlZW1BbGwodHlwZTogbmZ0VHlwZSwgbWF4OiBuaWwsIHJlY2VpdmVyOiBjYXApCiAgICAgICAgYWNjdC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5nZXRDb250cm9sbGVyKGJ5Q2FwYWJpbGl0eUlEOiBjYXAuaWQpIS5kZWxldGUoKQogICAgfQp9",
                "queryUnclaimedFTs": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBxdWVyeVVuY2xhaW1lZEZUcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBbQW55U3RydWN0P10gewogICAgbGV0IHRpY2tldHMgPSBMb3N0QW5kRm91bmQuYm9ycm93QWxsVGlja2V0cyhhZGRyOiBhZGRyKQogICAgCiAgICBsZXQgZGlzcGxheUFycjogW0FueVN0cnVjdD9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe0Z1bmdpYmxlVG9rZW4uVmF1bHR9PigpKSB7IAogICAgICAgICAgICBkaXNwbGF5QXJyLmFwcGVuZCh7ImRpc3BsYXkiOiB0aWNrZXQuZGlzcGxheSwgImJhbGFuY2UiOiB0aWNrZXQuZ2V0RnVuZ2libGVUb2tlbkJhbGFuY2UoKX0pCiAgICAgICAgfQogICAgfQogICAgcmV0dXJuIGRpc3BsYXlBcnIKfQ==",
                "queryUnclaimedNFTs": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBxdWVyeVVuY2xhaW1lZE5GVHMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4TG9zdEFuZEZvdW5kCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBOb25GdW5naWJsZVRva2VuIGZyb20gMHhOb25GdW5naWJsZVRva2VuCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyOiBBZGRyZXNzKTogWyZNZXRhZGF0YVZpZXdzLkRpc3BsYXk/XSB7CiAgICBsZXQgdGlja2V0cyA9IExvc3RBbmRGb3VuZC5ib3Jyb3dBbGxUaWNrZXRzKGFkZHI6IGFkZHIpCiAgICAKICAgIGxldCBkaXNwbGF5QXJyOiBbJk1ldGFkYXRhVmlld3MuRGlzcGxheT9dICA9IFtdCiAgICBmb3IgdGlja2V0IGluIHRpY2tldHMgewogICAgICAgIGlmIHRpY2tldC50eXBlLmlzU3VidHlwZShvZjogVHlwZTxAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfT4oKSkgeyAKICAgICAgICAgICAgZGlzcGxheUFyci5hcHBlbmQodGlja2V0LmRpc3BsYXkpCiAgICAgICAgfQogICAgfQogICAgCiAgICByZXR1cm4gZGlzcGxheUFycgp9",
                "queryUnclaimedNumber": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBxdWVyeVVuY2xhaW1lZE51bWJlciAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHI6IEFkZHJlc3MpOiBJbnQgewogICAgbGV0IHNoZWxmTWFuYWdlciA9IExvc3RBbmRGb3VuZC5ib3Jyb3dTaGVsZk1hbmFnZXIoKQogICAgbGV0IHNoZWxmID0gc2hlbGZNYW5hZ2VyLmJvcnJvd1NoZWxmKHJlZGVlbWVyOiBhZGRyKQogICAgaWYgc2hlbGYgPT0gbmlsIHsKICAgICAgICByZXR1cm4gMAogICAgfQogICAgCiAgICByZXR1cm4gc2hlbGYhLmdldFJlZGVlbWFibGVUeXBlcygpLmxlbmd0aAp9",
                "sendFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kRlQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweEZsb3dUb2tlbgppbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTG9zdEFuZEZvdW5kIGZyb20gMHhMb3N0QW5kRm91bmQKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IFZpZXdSZXNvbHZlciBmcm9tIDB4TWV0YWRhdGFWaWV3cwppbXBvcnQgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MgZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZsb3dFVk1CcmlkZ2VVdGlscyBmcm9tIDB4Rmxvd0VWTUJyaWRnZQoKCnRyYW5zYWN0aW9uKHZhdWx0SWRlbnRpZmllcjogU3RyaW5nLCByZWNpcGllbnQ6IEFkZHJlc3MsIGFtb3VudDogVUZpeDY0LCBtZW1vOiBTdHJpbmcpIHsKICAgIGxldCBzZW50VmF1bHQ6IEB7RnVuZ2libGVUb2tlbi5WYXVsdH0KICAgIGxldCBmbG93UHJvdmlkZXI6IENhcGFiaWxpdHk8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0PgogICAgbGV0IGZsb3dSZWNlaXZlcjogQ2FwYWJpbGl0eTwmRmxvd1Rva2VuLlZhdWx0PgogICAgbGV0IHJlY2VpdmVyQ2FwOiBDYXBhYmlsaXR5PCZ7RnVuZ2libGVUb2tlbi5SZWNlaXZlcn0+CiAgICBsZXQgZGlzcGxheTogTWV0YWRhdGFWaWV3cy5EaXNwbGF5PwoKCiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgICBsZXQgdmF1bHRUeXBlID0gQ29tcG9zaXRlVHlwZSh2YXVsdElkZW50aWZpZXIpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgY29uc3RydWN0IFZhdWx0IHR5cGUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIC8vIFBhcnNlIHRoZSBWYXVsdCBpZGVudGlmaWVyIGludG8gaXRzIGNvbXBvbmVudHMKICAgICAgICBsZXQgdG9rZW5Db250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiB2YXVsdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IGFkZHJlc3MgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdCh2YXVsdElkZW50aWZpZXIpKQogICAgICAgIGxldCB0b2tlbkNvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IHZhdWx0VHlwZSkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgY29udHJhY3QgbmFtZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KHZhdWx0SWRlbnRpZmllcikpCiAgICAgICAgCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgIGxldCB2aWV3UmVzb2x2ZXIgPSBnZXRBY2NvdW50KHRva2VuQ29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogdG9rZW5Db250cmFjdE5hbWUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IFZpZXdSZXNvbHZlciBmcm9tIEZ1bmdpYmxlVG9rZW4gY29udHJhY3QiKQogICAgICAgIGxldCB2YXVsdERhdGEgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkKICAgICAgICAgICAgKSBhcyEgRnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBGVFZhdWx0RGF0YSB2aWV3IikKCgogICAgICAgIGxldCB2YXVsdERpc3BsYXkgPSB2aWV3UmVzb2x2ZXIucmVzb2x2ZUNvbnRyYWN0VmlldygKICAgICAgICAgICAgICAgIHJlc291cmNlVHlwZTogbmlsLAogICAgICAgICAgICAgICAgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlREaXNwbGF5PigpCiAgICAgICAgICAgICkgYXMhIEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzLkZURGlzcGxheT8gPz8gcGFuaWMoIkNvdWxkIG5vdCByZXNvbHZlIEZUVmF1bHREYXRhIHZpZXciKQoKICAgICAgICBzZWxmLmRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLkRpc3BsYXkoCiAgICAgICAgICAgIG5hbWU6IHZhdWx0RGlzcGxheS5uYW1lLAogICAgICAgICAgICBkZXNjcmlwdGlvbjogdmF1bHREaXNwbGF5LmRlc2NyaXB0aW9uLAogICAgICAgICAgICB0aHVtYm5haWw6IHZhdWx0RGlzcGxheS5sb2dvcy5pdGVtc1swXS5maWxlCiAgICAgICAgKQoKICAgICAgICBsZXQgdmF1bHQgPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fT4oCiAgICAgICAgICAgICAgICBmcm9tOiB2YXVsdERhdGEuc3RvcmFnZVBhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGFjY2VzcyBzaWduZXIncyBGdW5naWJsZVRva2VuIFZhdWx0IikKCiAgICAgICAgc2VsZi5zZW50VmF1bHQgPC0gdmF1bHQud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpCgogICAgICAgIHZhciBwcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+PyA9IG5pbAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZm9yRWFjaENvbnRyb2xsZXIoZm9yUGF0aDogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQsIGZ1bihjOiAmU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyKTogQm9vbCB7CiAgICAgICAgICAgIGlmIGMuYm9ycm93VHlwZSA9PSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oKSB7CiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGMuY2FwYWJpbGl0eSBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICB9KQoKICAgICAgICBpZiBwcm92aWRlciA9PSBuaWwgewogICAgICAgICAgICBwcm92aWRlciA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICB9CiAgICAgICAgc2VsZi5mbG93UHJvdmlkZXIgPSBwcm92aWRlciEKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlciA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwmRmxvd1Rva2VuLlZhdWx0PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICBzZWxmLnJlY2VpdmVyQ2FwID0gZ2V0QWNjb3VudChyZWNpcGllbnQpLmNhcGFiaWxpdGllcy5nZXQ8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyfT4odmF1bHREYXRhLnJlY2VpdmVyUGF0aCkhCiAgICB9CgogICAgZXhlY3V0ZSB7CgogICAgICAgIAogICAgICAgIGxldCBkZXBvc2l0RXN0aW1hdGUgPC0gTG9zdEFuZEZvdW5kLmVzdGltYXRlRGVwb3NpdChyZWRlZW1lcjogcmVjaXBpZW50LCBpdGVtOiA8LXNlbGYuc2VudFZhdWx0LCBtZW1vOiBtZW1vLCBkaXNwbGF5OiBzZWxmLmRpc3BsYXkpCiAgICAgICAgbGV0IHN0b3JhZ2VGZWUgPC0gc2VsZi5mbG93UHJvdmlkZXIuYm9ycm93KCkhLndpdGhkcmF3KGFtb3VudDogZGVwb3NpdEVzdGltYXRlLnN0b3JhZ2VGZWUpCiAgICAgICAgbGV0IGl0ZW0gPC0gZGVwb3NpdEVzdGltYXRlLndpdGhkcmF3KCkKCiAgICAgICAgTG9zdEFuZEZvdW5kLnRyeVNlbmRSZXNvdXJjZSgKICAgICAgICAgICAgaXRlbTogPC1pdGVtLAogICAgICAgICAgICBjYXA6IHNlbGYucmVjZWl2ZXJDYXAsCiAgICAgICAgICAgIG1lbW86IG1lbW8sCiAgICAgICAgICAgIGRpc3BsYXk6IHNlbGYuZGlzcGxheSwKICAgICAgICAgICAgc3RvcmFnZVBheW1lbnQ6ICZzdG9yYWdlRmVlIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fSwKICAgICAgICAgICAgZmxvd1Rva2VuUmVwYXltZW50OiBzZWxmLmZsb3dSZWNlaXZlcgogICAgICAgICkKCiAgICAgICAgc2VsZi5mbG93UmVjZWl2ZXIuYm9ycm93KCkhLmRlcG9zaXQoZnJvbTogPC1zdG9yYWdlRmVlKQogICAgICAgIGRlc3Ryb3kgZGVwb3NpdEVzdGltYXRlCiAgICB9Cn0=",
                "sendNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZW5kTkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHhGbG93VG9rZW4KaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IExvc3RBbmRGb3VuZCBmcm9tIDB4TG9zdEFuZEZvdW5kCmltcG9ydCBNZXRhZGF0YVZpZXdzIGZyb20gMHhNZXRhZGF0YVZpZXdzCmltcG9ydCBWaWV3UmVzb2x2ZXIgZnJvbSAweE1ldGFkYXRhVmlld3MKaW1wb3J0IEZ1bmdpYmxlVG9rZW5NZXRhZGF0YVZpZXdzIGZyb20gMHhGdW5naWJsZVRva2VuCmltcG9ydCBGbG93RVZNQnJpZGdlVXRpbHMgZnJvbSAweEZsb3dFVk1CcmlkZ2UKCgp0cmFuc2FjdGlvbihuZnRJZGVudGlmaWVyOiBTdHJpbmcsIHJlY2lwaWVudDogQWRkcmVzcywgaWQ6IFVJbnQ2NCwgbWVtbzogU3RyaW5nKSB7CiAgICBsZXQgbmZ0OiBAe05vbkZ1bmdpYmxlVG9rZW4uTkZUfQogICAgbGV0IGZsb3dQcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgZmxvd1JlY2VpdmVyOiBDYXBhYmlsaXR5PCZGbG93VG9rZW4uVmF1bHQ+CiAgICBsZXQgcmVjZWl2ZXJDYXA6IENhcGFiaWxpdHk8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PgoKCiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoU3RvcmFnZSwgQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBuZnRUeXBlID0gQ29tcG9zaXRlVHlwZShuZnRJZGVudGlmaWVyKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGNvbnN0cnVjdCBORlQgdHlwZSBmcm9tIGlkZW50aWZpZXI6ICIuY29uY2F0KG5mdElkZW50aWZpZXIpKQogICAgICAgIGxldCBuZnRDb250cmFjdEFkZHJlc3MgPSBGbG93RVZNQnJpZGdlVXRpbHMuZ2V0Q29udHJhY3RBZGRyZXNzKGZyb21UeXBlOiBuZnRUeXBlKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGdldCBjb250cmFjdCBhZGRyZXNzIGZyb20gaWRlbnRpZmllcjogIi5jb25jYXQobmZ0SWRlbnRpZmllcikpCiAgICAgICAgbGV0IG5mdENvbnRyYWN0TmFtZSA9IEZsb3dFVk1CcmlkZ2VVdGlscy5nZXRDb250cmFjdE5hbWUoZnJvbVR5cGU6IG5mdFR5cGUpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgZ2V0IGNvbnRyYWN0IG5hbWUgZnJvbSBpZGVudGlmaWVyOiAiLmNvbmNhdChuZnRJZGVudGlmaWVyKSkKCiAgICAgICAgLyogLS0tIFJldHJpZXZlIHRoZSBmdW5kcyAtLS0gKi8KICAgICAgICAvLwogICAgICAgIC8vIEJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgRnVuZ2libGVUb2tlbiBWYXVsdAogICAgICAgCiAgICAgICAgbGV0IHZpZXdSZXNvbHZlciA9IGdldEFjY291bnQobmZ0Q29udHJhY3RBZGRyZXNzKS5jb250cmFjdHMuYm9ycm93PCZ7Vmlld1Jlc29sdmVyfT4obmFtZTogbmZ0Q29udHJhY3ROYW1lKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBWaWV3UmVzb2x2ZXIgZnJvbSBORlQgY29udHJhY3QiKQogICAgICAgIGxldCBjb2xsZWN0aW9uRGF0YSA9IHZpZXdSZXNvbHZlci5yZXNvbHZlQ29udHJhY3RWaWV3KAogICAgICAgICAgICAgICAgcmVzb3VyY2VUeXBlOiBuaWwsCiAgICAgICAgICAgICAgICB2aWV3VHlwZTogVHlwZTxNZXRhZGF0YVZpZXdzLk5GVENvbGxlY3Rpb25EYXRhPigpCiAgICAgICAgICAgICkgYXMhIE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE/ID8/IHBhbmljKCJDb3VsZCBub3QgcmVzb2x2ZSBORlRDb2xsZWN0aW9uRGF0YSB2aWV3IikKICAgICAgICAKICAgICAgICAKCiAgICAgICAgbGV0IGNvbGxlY3Rpb24gPSBhY2N0LnN0b3JhZ2UuYm9ycm93PGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb259PigKICAgICAgICAgICAgICAgIGZyb206IGNvbGxlY3Rpb25EYXRhLnN0b3JhZ2VQYXRoCiAgICAgICAgICAgICkgPz8gcGFuaWMoIkNvdWxkIG5vdCBhY2Nlc3Mgc2lnbmVyJ3MgRnVuZ2libGVUb2tlbiBWYXVsdCIpCgogICAgICAgIHNlbGYubmZ0IDwtIGNvbGxlY3Rpb24ud2l0aGRyYXcod2l0aGRyYXdJRDogaWQpCgogICAgICAgIHZhciBwcm92aWRlcjogQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+PyA9IG5pbAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuZm9yRWFjaENvbnRyb2xsZXIoZm9yUGF0aDogL3N0b3JhZ2UvZmxvd1Rva2VuVmF1bHQsIGZ1bihjOiAmU3RvcmFnZUNhcGFiaWxpdHlDb250cm9sbGVyKTogQm9vbCB7CiAgICAgICAgICAgIGlmIGMuYm9ycm93VHlwZSA9PSBUeXBlPGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdD4oKSB7CiAgICAgICAgICAgICAgICBwcm92aWRlciA9IGMuY2FwYWJpbGl0eSBhcyEgQ2FwYWJpbGl0eTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRydWUKICAgICAgICB9KQoKICAgICAgICBpZiBwcm92aWRlciA9PSBuaWwgewogICAgICAgICAgICBwcm92aWRlciA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmRmxvd1Rva2VuLlZhdWx0Pigvc3RvcmFnZS9mbG93VG9rZW5WYXVsdCkKICAgICAgICB9CiAgICAgICAgc2VsZi5mbG93UHJvdmlkZXIgPSBwcm92aWRlciEKICAgICAgICBzZWxmLmZsb3dSZWNlaXZlciA9IGFjY3QuY2FwYWJpbGl0aWVzLmdldDwmRmxvd1Rva2VuLlZhdWx0PigvcHVibGljL2Zsb3dUb2tlblJlY2VpdmVyKSEKICAgICAgICBzZWxmLnJlY2VpdmVyQ2FwID0gZ2V0QWNjb3VudChyZWNpcGllbnQpLmNhcGFiaWxpdGllcy5nZXQ8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihjb2xsZWN0aW9uRGF0YS5wdWJsaWNQYXRoKSEKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICAKICAgICAgICBsZXQgZGlzcGxheSA9IHNlbGYubmZ0LnJlc29sdmVWaWV3KFR5cGU8TWV0YWRhdGFWaWV3cy5EaXNwbGF5PigpKSBhcyEgTWV0YWRhdGFWaWV3cy5EaXNwbGF5PwoKICAgICAgICBsZXQgZGVwb3NpdEVzdGltYXRlIDwtIExvc3RBbmRGb3VuZC5lc3RpbWF0ZURlcG9zaXQocmVkZWVtZXI6IHJlY2lwaWVudCwgaXRlbTogPC1zZWxmLm5mdCwgbWVtbzogbWVtbywgZGlzcGxheTogZGlzcGxheSkKICAgICAgICBsZXQgc3RvcmFnZUZlZSA8LSBzZWxmLmZsb3dQcm92aWRlci5ib3Jyb3coKSEud2l0aGRyYXcoYW1vdW50OiBkZXBvc2l0RXN0aW1hdGUuc3RvcmFnZUZlZSkKICAgICAgICBsZXQgaXRlbSA8LSBkZXBvc2l0RXN0aW1hdGUud2l0aGRyYXcoKQoKICAgICAgICBMb3N0QW5kRm91bmQudHJ5U2VuZFJlc291cmNlKAogICAgICAgICAgICBpdGVtOiA8LWl0ZW0sCiAgICAgICAgICAgIGNhcDogc2VsZi5yZWNlaXZlckNhcCwKICAgICAgICAgICAgbWVtbzogbWVtbywKICAgICAgICAgICAgZGlzcGxheTogZGlzcGxheSwKICAgICAgICAgICAgc3RvcmFnZVBheW1lbnQ6ICZzdG9yYWdlRmVlIGFzIGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlZhdWx0fSwKICAgICAgICAgICAgZmxvd1Rva2VuUmVwYXltZW50OiBzZWxmLmZsb3dSZWNlaXZlcgogICAgICAgICkKCiAgICAgICAgc2VsZi5mbG93UmVjZWl2ZXIuYm9ycm93KCkhLmRlcG9zaXQoZnJvbTogPC1zdG9yYWdlRmVlKQogICAgICAgIGRlc3Ryb3kgZGVwb3NpdEVzdGltYXRlCiAgICB9Cn0="
            },
            "staking": {
                "checkSetup": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja1NldHVwIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKCi8vLyBEZXRlcm1pbmVzIGlmIGFuIGFjY291bnQgaXMgc2V0IHVwIHdpdGggYSBTdGFraW5nIENvbGxlY3Rpb24KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBCb29sIHsKICAgIHJldHVybiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWRkcmVzcykKfQ==",
                "checkStakingEnabled": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjaGVja1N0YWtpbmdFbmFibGVkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmFjY2VzcyhhbGwpIGZ1biBtYWluKCk6Qm9vbCB7CiAgICByZXR1cm4gRmxvd0lEVGFibGVTdGFraW5nLnN0YWtpbmdFbmFibGVkKCkKfQ==",
                "closeStake": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjbG9zZVN0YWtlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweEZsb3dTdGFraW5nQ29sbGVjdGlvbgoKLy8gQ2xvc2VzIG91dCBhIHN0YWtpbmcgb2JqZWN0IGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KLy8gVGhpcyBkb2VzIG5vdCByZW1vdmUgdGhlIHJlY29yZCBmcm9tIHRoZSBpZGVudGl0eSB0YWJsZSwKLy8gYnV0IGl0IGRvZXMgbWVhbiB0aGF0IHRoZSBhY2NvdW50IHRoYXQgY2xvc2VzIGl0IGNhbm5vdCBldmVyIGFjY2VzcyBpdCBhZ2FpbgoKdHJhbnNhY3Rpb24obm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzI/KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYuY2xvc2VTdGFrZShub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQogICAgfQp9",
                "createDelegator": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVEZWxlZ2F0b3IgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKLy8vIFJlZ2lzdGVycyBhIGRlbGVnYXRvciBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uIHJlc291cmNlCi8vLyBmb3IgdGhlIHNwZWNpZmllZCBub2RlSUQgYW5kIHRoZSBhbW91bnQgb2YgdG9rZW5zIHRvIGNvbW1pdAoKdHJhbnNhY3Rpb24oaWQ6IFN0cmluZywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZWdpc3RlckRlbGVnYXRvcihub2RlSUQ6IGlkLCBhbW91bnQ6IGFtb3VudCkgICAgICAKICAgIH0KfQ==",
                "createStake": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVTdGFrZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gQ29tbWl0cyBuZXcgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KLy8vIFRoZSB0b2tlbnMgZnJvbSB0aGUgbG9ja2VkIHZhdWx0IGFyZSB1c2VkIGZpcnN0LCBpZiBpdCBleGlzdHMKLy8vIGZvbGxvd2VkIGJ5IHRoZSB0b2tlbnMgZnJvbSB0aGUgdW5sb2NrZWQgdmF1bHQKCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZU5ld1Rva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
                "getApr": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBcHIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgLyA3LjAgKiAzNjUuMCAqICgxLjAgLSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0UmV3YXJkQ3V0UGVyY2VudGFnZSgpKQogICAgcmV0dXJuIGFwcgp9",
                "getApyWeekly": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRBcHlXZWVrbHkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oKTogVUZpeDY0IHsKICAgIGxldCBhcHIgPSBGbG93SURUYWJsZVN0YWtpbmcuZ2V0RXBvY2hUb2tlblBheW91dCgpIC8gRmxvd0lEVGFibGVTdGFraW5nLmdldFRvdGFsU3Rha2VkKCkgKiA1NC4wICogKDEuMCAtIEZsb3dJRFRhYmxlU3Rha2luZy5nZXRSZXdhcmRDdXRQZXJjZW50YWdlKCkpCiAgICByZXR1cm4gYXByCn0=",
                "getDelegatesIndo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXREZWxlZ2F0ZXNJbmRvIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKYWNjZXNzKGFsbCkgc3RydWN0IERlbGVnYXRlSW5mbyB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9ySUQ6IFVJbnQzMgogICAgYWNjZXNzKGFsbCkgbGV0IG5vZGVJRDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKCiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHJvbGU6IFVJbnQ4CiAgICBhY2Nlc3MoYWxsKSBsZXQgdW5zdGFrYWJsZVRva2VuczogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdGVkTm9kZUluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbwogICAgYWNjZXNzKGFsbCkgbGV0IHJlc3Rha2FibGVVbnN0YWtlZFRva2VuczogVUZpeDY0CgogICAgaW5pdChkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbykgewogICAgICAgIHNlbGYuZGVsZWdhdG9ySUQgPSBkZWxlZ2F0b3JJbmZvLmlkCiAgICAgICAgc2VsZi5ub2RlSUQgPSBkZWxlZ2F0b3JJbmZvLm5vZGVJRAogICAgICAgIHNlbGYudG9rZW5zQ29tbWl0dGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IGRlbGVnYXRvckluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCgogICAgICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgICAgICBsZXQgbm9kZUluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8obm9kZUlEOiBkZWxlZ2F0b3JJbmZvLm5vZGVJRCkKICAgICAgICBzZWxmLmRlbGVnYXRlZE5vZGVJbmZvID0gbm9kZUluZm8KICAgICAgICBzZWxmLmlkID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICAgICAgc2VsZi51bnN0YWthYmxlVG9rZW5zID0gc2VsZi50b2tlbnNTdGFrZWQgKyBzZWxmLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYucmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zID0gc2VsZi50b2tlbnNVbnN0YWtlZCArIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fT8gewogICAgbGV0IGRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFjY291bnQpCiAgICBpZiAoIWRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIGxldCBkZWxlZ2F0b3JJRHM6IFtGbG93U3Rha2luZ0NvbGxlY3Rpb24uRGVsZWdhdG9ySURzXSA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXREZWxlZ2F0b3JJRHMoYWRkcmVzczogYWNjb3VudCkKCiAgICBsZXQgZm9ybWF0dGVkRGVsZWdhdG9ySW5mbzoge1N0cmluZzoge1VJbnQzMjogRGVsZWdhdGVJbmZvfX0gPSB7fQoKICAgIGZvciBkZWxlZ2F0b3JJRCBpbiBkZWxlZ2F0b3JJRHMgewogICAgICAgIGlmIGxldCBfZm9ybWF0dGVkRGVsZWdhdG9ySW5mbyA9IGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvW2RlbGVnYXRvcklELmRlbGVnYXRvcklEXSA9IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSA9IHsgZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQ6IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKX0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZvcm1hdHRlZERlbGVnYXRvckluZm8KfQo=",
                "getDelegatesInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXREZWxlZ2F0ZXNJbmZvIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIAppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKaW1wb3J0IExvY2tlZFRva2VucyBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKYWNjZXNzKGFsbCkgc3RydWN0IERlbGVnYXRlSW5mbyB7CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdG9ySUQ6IFVJbnQzMgogICAgYWNjZXNzKGFsbCkgbGV0IG5vZGVJRDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKCiAgICBhY2Nlc3MoYWxsKSBsZXQgaWQ6IFN0cmluZwogICAgYWNjZXNzKGFsbCkgbGV0IHJvbGU6IFVJbnQ4CiAgICBhY2Nlc3MoYWxsKSBsZXQgdW5zdGFrYWJsZVRva2VuczogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgZGVsZWdhdGVkTm9kZUluZm86IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbwogICAgYWNjZXNzKGFsbCkgbGV0IHJlc3Rha2FibGVVbnN0YWtlZFRva2VuczogVUZpeDY0CgogICAgaW5pdChkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbykgewogICAgICAgIHNlbGYuZGVsZWdhdG9ySUQgPSBkZWxlZ2F0b3JJbmZvLmlkCiAgICAgICAgc2VsZi5ub2RlSUQgPSBkZWxlZ2F0b3JJbmZvLm5vZGVJRAogICAgICAgIHNlbGYudG9rZW5zQ29tbWl0dGVkID0gZGVsZWdhdG9ySW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IGRlbGVnYXRvckluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCgogICAgICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgICAgICBsZXQgbm9kZUluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8obm9kZUlEOiBkZWxlZ2F0b3JJbmZvLm5vZGVJRCkKICAgICAgICBzZWxmLmRlbGVnYXRlZE5vZGVJbmZvID0gbm9kZUluZm8KICAgICAgICBzZWxmLmlkID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICAgICAgc2VsZi51bnN0YWthYmxlVG9rZW5zID0gc2VsZi50b2tlbnNTdGFrZWQgKyBzZWxmLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYucmVzdGFrYWJsZVVuc3Rha2VkVG9rZW5zID0gc2VsZi50b2tlbnNVbnN0YWtlZCArIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiB7U3RyaW5nOiB7VUludDMyOiBEZWxlZ2F0ZUluZm99fT8gewogICAgbGV0IGRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFjY291bnQpCiAgICBpZiAoIWRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIGxldCBkZWxlZ2F0b3JJRHM6IFtGbG93U3Rha2luZ0NvbGxlY3Rpb24uRGVsZWdhdG9ySURzXSA9IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5nZXREZWxlZ2F0b3JJRHMoYWRkcmVzczogYWNjb3VudCkKCiAgICBsZXQgZm9ybWF0dGVkRGVsZWdhdG9ySW5mbzoge1N0cmluZzoge1VJbnQzMjogRGVsZWdhdGVJbmZvfX0gPSB7fQoKICAgIGZvciBkZWxlZ2F0b3JJRCBpbiBkZWxlZ2F0b3JJRHMgewogICAgICAgIGlmIGxldCBfZm9ybWF0dGVkRGVsZWdhdG9ySW5mbyA9IGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIF9mb3JtYXR0ZWREZWxlZ2F0b3JJbmZvW2RlbGVnYXRvcklELmRlbGVnYXRvcklEXSA9IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3JJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyA9IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JJbmZvKG5vZGVJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQpCiAgICAgICAgICAgIGZvcm1hdHRlZERlbGVnYXRvckluZm9bZGVsZWdhdG9ySUQuZGVsZWdhdG9yTm9kZUlEXSA9IHsgZGVsZWdhdG9ySUQuZGVsZWdhdG9ySUQ6IERlbGVnYXRlSW5mbyhkZWxlZ2F0b3JJbmZvOiBkZWxlZ2F0b3JJbmZvKX0KICAgICAgICB9CiAgICB9CgogICAgcmV0dXJuIGZvcm1hdHRlZERlbGVnYXRvckluZm8KfQ==",
                "getDelegatesInfoArray": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXREZWxlZ2F0ZXNJbmZvQXJyYXkgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCiAgICAgICAgCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm9dIHsKICAgIHJldHVybiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsRGVsZWdhdG9ySW5mbyhhZGRyZXNzOiBhZGRyZXNzKQp9",
                "getDelegatorInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXREZWxlZ2F0b3JJbmZvIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmFjY2VzcyhhbGwpIGZ1biBtYWluKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyKTogRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8gewogIHJldHVybiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mbyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQp9",
                "getEpochMetadata": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRFcG9jaE1ldGFkYXRhIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGbG93RXBvY2ggZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKCmFjY2VzcyhhbGwpIGZ1biBtYWluKGVwb2NoQ291bnRlcjogVUludDY0KTogRmxvd0Vwb2NoLkVwb2NoTWV0YWRhdGEgewogICAgcmV0dXJuIEZsb3dFcG9jaC5nZXRFcG9jaE1ldGFkYXRhKGVwb2NoQ291bnRlcikhCn0=",
                "getNodeInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXROb2RlSW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgphY2Nlc3MoYWxsKSBmdW4gbWFpbihub2RlSUQ6IFN0cmluZyk6IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyB7CiAgcmV0dXJuIEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mbyhub2RlSUQ6IG5vZGVJRCkKfQ==",
                "getNodesInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXROb2Rlc0luZm8gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwppbXBvcnQgRmxvd0lEVGFibGVTdGFraW5nIGZyb20gMHg4NjI0YjUyZjlkZGNkMDRhCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgU3VtbWFyeVN0YWtlRGVsZWdhdGVJbmZvIHsKCiAgICBhY2Nlc3MoYWxsKSB2YXIgbm9kZUNvdW50OiBVSW50NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZUNvdW50OiBVSW50NjQKCiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNTdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHRvdGFsVG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciB0b3RhbFRva2Vuc1Vuc3Rha2luZzogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNVbnN0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgdG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAoKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgc3Rha2VUb2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIHN0YWtlVG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1Jld2FyZGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBzdGFrZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIHZhciBkZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSB2YXIgZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zUmV3YXJkZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgdmFyIGRlbGVnYXRlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKCiAgICBpbml0KGFsbE5vZGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLk5vZGVJbmZvXSwgYWxsRGVsZWdhdGVJbmZvOiBbRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm9dKSB7CgogICAgICAgIHNlbGYubm9kZUNvdW50ID0gVUludDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZUNvdW50ID0gVUludDY0KDApCgogICAgICAgIHNlbGYudG90YWxUb2tlbnNTdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNVbnN0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNSZXdhcmRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYudG90YWxUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBVRml4NjQoMCkKCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1N0YWtlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuc3Rha2VUb2tlbnNDb21taXR0ZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLnN0YWtlVG9rZW5zVW5zdGFraW5nID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Jld2FyZGVkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IFVGaXg2NCgwKQoKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zU3Rha2VkID0gVUZpeDY0KDApCiAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZCA9IFVGaXg2NCgwKQogICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmcgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zVW5zdGFrZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zUmV3YXJkZWQgPSBVRml4NjQoMCkKICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gVUZpeDY0KDApCgogICAgICAgIGZvciBub2RlSW5mbyBpbiBhbGxOb2RlSW5mbyB7CiAgICAgICAgICAgIHNlbGYubm9kZUNvdW50ID0gc2VsZi5ub2RlQ291bnQgKyAxCgogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zU3Rha2VkID0gc2VsZi50b3RhbFRva2Vuc1N0YWtlZCArIG5vZGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkID0gc2VsZi50b3RhbFRva2Vuc0NvbW1pdHRlZCArIG5vZGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFraW5nID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyArIG5vZGVJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFrZWQgPSBzZWxmLnRvdGFsVG9rZW5zVW5zdGFrZWQgKyBub2RlSW5mby50b2tlbnNVbnN0YWtlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgPSBzZWxmLnRvdGFsVG9rZW5zUmV3YXJkZWQgKyBub2RlSW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSArIG5vZGVJbmZvLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZQoKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1N0YWtlZCA9IHNlbGYuc3Rha2VUb2tlbnNTdGFrZWQgKyBub2RlSW5mby50b2tlbnNTdGFrZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc0NvbW1pdHRlZCA9IHNlbGYuc3Rha2VUb2tlbnNDb21taXR0ZWQgKyBub2RlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2luZyA9IHNlbGYuc3Rha2VUb2tlbnNVbnN0YWtpbmcgKyBub2RlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2VkID0gc2VsZi5zdGFrZVRva2Vuc1Vuc3Rha2VkICsgbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1Jld2FyZGVkID0gc2VsZi5zdGFrZVRva2Vuc1Jld2FyZGVkICsgbm9kZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi5zdGFrZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYuc3Rha2VUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgICAgICB9CgogICAgICAgIGZvciBkZWxlZ2F0ZUluZm8gaW4gYWxsRGVsZWdhdGVJbmZvIHsKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZUNvdW50ID0gc2VsZi5kZWxlZ2F0ZUNvdW50ICsgMQoKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1N0YWtlZCA9IHNlbGYudG90YWxUb2tlbnNTdGFrZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNDb21taXR0ZWQgPSBzZWxmLnRvdGFsVG9rZW5zQ29tbWl0dGVkICsgZGVsZWdhdGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zVW5zdGFraW5nID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2luZyArIGRlbGVnYXRlSW5mby50b2tlbnNVbnN0YWtpbmcKICAgICAgICAgICAgc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkID0gc2VsZi50b3RhbFRva2Vuc1Vuc3Rha2VkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgICAgIHNlbGYudG90YWxUb2tlbnNSZXdhcmRlZCA9IHNlbGYudG90YWxUb2tlbnNSZXdhcmRlZCArIGRlbGVnYXRlSW5mby50b2tlbnNSZXdhcmRlZAogICAgICAgICAgICBzZWxmLnRvdGFsVG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gc2VsZi50b3RhbFRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSArIGRlbGVnYXRlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNTdGFrZWQgPSBzZWxmLmRlbGVnYXRlVG9rZW5zU3Rha2VkICsgZGVsZWdhdGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zQ29tbWl0dGVkID0gc2VsZi5kZWxlZ2F0ZVRva2Vuc0NvbW1pdHRlZCArIGRlbGVnYXRlSW5mby50b2tlbnNDb21taXR0ZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1Vuc3Rha2luZyA9IHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtpbmcgKyBkZWxlZ2F0ZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgICAgIHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtlZCA9IHNlbGYuZGVsZWdhdGVUb2tlbnNVbnN0YWtlZCArIGRlbGVnYXRlSW5mby50b2tlbnNVbnN0YWtlZAogICAgICAgICAgICBzZWxmLmRlbGVnYXRlVG9rZW5zUmV3YXJkZWQgPSBzZWxmLmRlbGVnYXRlVG9rZW5zUmV3YXJkZWQgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmV3YXJkZWQKICAgICAgICAgICAgc2VsZi5kZWxlZ2F0ZVRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IHNlbGYuZGVsZWdhdGVUb2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgKyBkZWxlZ2F0ZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICAgICAgfQoKICAgIH0KfQoKYWNjZXNzKGFsbCkgZnVuIG1haW4oYWNjb3VudDogQWRkcmVzcyk6IFN1bW1hcnlTdGFrZURlbGVnYXRlSW5mbz8gewogICAgbGV0IGRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKGFkZHJlc3M6IGFjY291bnQpCiAgICBpZiAoIWRvZXNBY2NvdW50SGF2ZVN0YWtpbmdDb2xsZWN0aW9uKSB7CiAgICAgICAgcmV0dXJuIG5pbAogICAgfQoKICAgIGxldCBhbGxOb2RlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mb10gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsTm9kZUluZm8oYWRkcmVzczogYWNjb3VudCkKICAgIGxldCBhbGxEZWxlZ2F0ZUluZm86IFtGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9ySW5mb10gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsRGVsZWdhdG9ySW5mbyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIHJldHVybiBTdW1tYXJ5U3Rha2VEZWxlZ2F0ZUluZm8oYWxsTm9kZUluZm86IGFsbE5vZGVJbmZvLCBhbGxEZWxlZ2F0ZUluZm86IGFsbERlbGVnYXRlSW5mbykKfQo=",
                "getStakeInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdGFrZUluZm8gLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgCmltcG9ydCBGbG93U3Rha2luZ0NvbGxlY3Rpb24gZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgphY2Nlc3MoYWxsKSBzdHJ1Y3QgU3Rha2VJbmZvIHsKICAgIGFjY2VzcyhhbGwpIGxldCBpZDogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgcm9sZTogVUludDgKICAgIGFjY2VzcyhhbGwpIGxldCBuZXR3b3JraW5nQWRkcmVzczogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgbmV0d29ya2luZ0tleTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgc3Rha2luZ0tleTogU3RyaW5nCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zU3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b3RhbFRva2Vuc1N0YWtlZDogVUZpeDY0CiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CgogICAgYWNjZXNzKGFsbCkgbGV0IGRlbGVnYXRvcnNDbnQ6IEludAogICAgYWNjZXNzKGFsbCkgbGV0IGRlbGVnYXRvcklEQ291bnRlcjogVUludDMyCiAgICBhY2Nlc3MoYWxsKSBsZXQgdG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCBpbml0aWFsV2VpZ2h0OiBVSW50NjQKCiAgICAvLyBQcm9qZWN0ZWQgVmFsdWVzCiAgICBhY2Nlc3MoYWxsKSBsZXQgbm9kZUlEOiBTdHJpbmcKICAgIGFjY2VzcyhhbGwpIGxldCB1bnN0YWthYmxlVG9rZW5zOiBVRml4NjQKICAgIGFjY2VzcyhhbGwpIGxldCB0b2tlbnNEZWxlZ2F0ZWQ6IFVGaXg2NAogICAgYWNjZXNzKGFsbCkgbGV0IHJlc3Rha2FibGVVbnN0YWtlZFRva2VuczogVUZpeDY0CgogICAgYWNjZXNzKGFsbCkgbGV0IG1hY2hpbmVBY2NvdW50QWRkcmVzczogQWRkcmVzcz8KICAgIGFjY2VzcyhhbGwpIGxldCBtYWNoaW5lQWNjb3VudEJhbGFuY2U6IFVGaXg2ND8KCiAgICBpbml0KG5vZGVJbmZvOiBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8sIG1hY2hpbmVBY2NvdW50SW5mbzogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLk1hY2hpbmVBY2NvdW50SW5mbz8pIHsKICAgICAgICBzZWxmLmlkID0gbm9kZUluZm8uaWQKICAgICAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICAgICAgc2VsZi5uZXR3b3JraW5nQWRkcmVzcyA9IG5vZGVJbmZvLm5ldHdvcmtpbmdBZGRyZXNzCiAgICAgICAgc2VsZi5uZXR3b3JraW5nS2V5ID0gbm9kZUluZm8ubmV0d29ya2luZ0tleQogICAgICAgIHNlbGYuc3Rha2luZ0tleSA9IG5vZGVJbmZvLnN0YWtpbmdLZXkKICAgICAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IG5vZGVJbmZvLnRva2Vuc1N0YWtlZAogICAgICAgIHNlbGYudG90YWxUb2tlbnNTdGFrZWQgPSBub2RlSW5mby50b3RhbFN0YWtlZFdpdGhEZWxlZ2F0b3JzKCkKICAgICAgICBzZWxmLnRva2Vuc0NvbW1pdHRlZCA9IG5vZGVJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIHNlbGYudG9rZW5zVW5zdGFraW5nID0gbm9kZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICAgICAgc2VsZi50b2tlbnNVbnN0YWtlZCA9IG5vZGVJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICAgICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IG5vZGVJbmZvLnRva2Vuc1Jld2FyZGVkCgogICAgICAgIHNlbGYuZGVsZWdhdG9yc0NudCA9IG5vZGVJbmZvLmRlbGVnYXRvcnMubGVuZ3RoIAogICAgICAgIHNlbGYuZGVsZWdhdG9ySURDb3VudGVyID0gbm9kZUluZm8uZGVsZWdhdG9ySURDb3VudGVyCiAgICAgICAgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UgPSBub2RlSW5mby50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKICAgICAgICBzZWxmLmluaXRpYWxXZWlnaHQgPSBub2RlSW5mby5pbml0aWFsV2VpZ2h0CgogICAgICAgIC8vIFByb2plY3RlZCBWYWx1ZXMKICAgICAgICBzZWxmLm5vZGVJRCA9IG5vZGVJbmZvLmlkCiAgICAgICAgc2VsZi51bnN0YWthYmxlVG9rZW5zID0gc2VsZi50b2tlbnNTdGFrZWQgKyBzZWxmLnRva2Vuc0NvbW1pdHRlZAogICAgICAgIGxldCBub2RlU3Rha2VkQmFsYW5jZVdpdGhEZWxlZ2F0b3JzID0gbm9kZUluZm8udG90YWxTdGFrZWRXaXRoRGVsZWdhdG9ycygpCiAgICAgICAgc2VsZi50b2tlbnNEZWxlZ2F0ZWQgPSBub2RlU3Rha2VkQmFsYW5jZVdpdGhEZWxlZ2F0b3JzIC0gbm9kZUluZm8udG9rZW5zU3Rha2VkCiAgICAgICAgc2VsZi5yZXN0YWthYmxlVW5zdGFrZWRUb2tlbnMgPSBzZWxmLnRva2Vuc1Vuc3Rha2VkICsgc2VsZi50b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2UKCiAgICAgICAgaWYgbGV0IF9tYWNoaW5lQWNjb3VudEluZm8gPSBtYWNoaW5lQWNjb3VudEluZm8gewogICAgICAgICAgICBsZXQgX21hY2hpbmVBY2NvdW50QWRkcmVzcyA9IF9tYWNoaW5lQWNjb3VudEluZm8uZ2V0QWRkcmVzcygpCgogICAgICAgICAgICBsZXQgbWFjaGluZUFjY291bnQgPSBnZXRBY2NvdW50KF9tYWNoaW5lQWNjb3VudEFkZHJlc3MpCgogICAgICAgICAgICBzZWxmLm1hY2hpbmVBY2NvdW50QWRkcmVzcyA9IF9tYWNoaW5lQWNjb3VudEFkZHJlc3MKICAgICAgICAgICAgc2VsZi5tYWNoaW5lQWNjb3VudEJhbGFuY2UgPSBtYWNoaW5lQWNjb3VudC5iYWxhbmNlCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2VsZi5tYWNoaW5lQWNjb3VudEFkZHJlc3MgPSBuaWwKICAgICAgICAgICAgc2VsZi5tYWNoaW5lQWNjb3VudEJhbGFuY2UgPSBuaWwKICAgICAgICB9CiAgICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFjY291bnQ6IEFkZHJlc3MpOiB7U3RyaW5nOiBTdGFrZUluZm99PyB7CiAgICBsZXQgZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24oYWRkcmVzczogYWNjb3VudCkKICAgIGlmICghZG9lc0FjY291bnRIYXZlU3Rha2luZ0NvbGxlY3Rpb24pIHsKICAgICAgICByZXR1cm4gbmlsCiAgICB9CgogICAgbGV0IGZvcm1hdHRlZE5vZGVJbmZvOiB7U3RyaW5nOiBTdGFrZUluZm99ID0ge30KICAgIGxldCBhbGxOb2RlSW5mbzogW0Zsb3dJRFRhYmxlU3Rha2luZy5Ob2RlSW5mb10gPSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uZ2V0QWxsTm9kZUluZm8oYWRkcmVzczogYWNjb3VudCkKICAgIGxldCBtYWNoaW5lQWNjb3VudHM6IHtTdHJpbmc6IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5NYWNoaW5lQWNjb3VudEluZm99ID0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmdldE1hY2hpbmVBY2NvdW50cyhhZGRyZXNzOiBhY2NvdW50KQoKICAgIGZvciBub2RlSW5mbyBpbiBhbGxOb2RlSW5mbyB7CiAgICAgICAgZm9ybWF0dGVkTm9kZUluZm9bbm9kZUluZm8uaWRdID0gU3Rha2VJbmZvKG5vZGVJbmZvOiBub2RlSW5mbywgbWFjaGluZUFjY291bnRJbmZvOiBtYWNoaW5lQWNjb3VudHNbbm9kZUluZm8uaWRdKQogICAgfQoKICAgIHJldHVybiBmb3JtYXR0ZWROb2RlSW5mbwp9Cg==",
                "getStakingInfo": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdGFraW5nSW5mbyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCmltcG9ydCBGbG93SURUYWJsZVN0YWtpbmcgZnJvbSAweDg2MjRiNTJmOWRkY2QwNGEKaW1wb3J0IEZsb3dFcG9jaCBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQoKYWNjZXNzKGFsbClzdHJ1Y3QgRXBvY2hJbmZvIHsKICBhY2Nlc3MoYWxsKWxldCBjdXJyZW50RXBvY2hDb3VudGVyOiBVSW50NjQKICBhY2Nlc3MoYWxsKWxldCBjdXJyZW50RXBvY2hQaGFzZTogVUludDgKCiAgaW5pdCgKICAgICAgY3VycmVudEVwb2NoQ291bnRlcjogVUludDY0LAogICAgICBjdXJyZW50RXBvY2hQaGFzZTogVUludDgKICApIHsKICAgICAgc2VsZi5jdXJyZW50RXBvY2hDb3VudGVyID0gY3VycmVudEVwb2NoQ291bnRlcgogICAgICBzZWxmLmN1cnJlbnRFcG9jaFBoYXNlID0gY3VycmVudEVwb2NoUGhhc2UKICB9Cn0KCmFjY2VzcyhhbGwpc3RydWN0IFJlc3VsdCB7CiAgYWNjZXNzKGFsbClsZXQgc3Rha2luZ0luZm86IFN0YWtpbmdJbmZvPwoKICBpbml0KHN0YWtpbmdJbmZvOiBTdGFraW5nSW5mbz8pIHsKICAgIHNlbGYuc3Rha2luZ0luZm8gPSBzdGFraW5nSW5mbwogIH0KfQoKYWNjZXNzKGFsbClzdHJ1Y3QgU3Rha2luZ0luZm8gewogIGFjY2VzcyhhbGwpbGV0IGVwb2NoSW5mbzogRXBvY2hJbmZvCiAgYWNjZXNzKGFsbClsZXQgbG9ja2VkQWRkcmVzczogQWRkcmVzcyAgIAogIGFjY2VzcyhhbGwpbGV0IGxvY2tlZEJhbGFuY2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHVubG9ja0xpbWl0OiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCBub2RlSW5mbzogTm9kZUluZm8/CiAgYWNjZXNzKGFsbClsZXQgZGVsZWdhdG9yTm9kZUluZm86IE5vZGVJbmZvPwogIGFjY2VzcyhhbGwpbGV0IGRlbGVnYXRvckluZm86IERlbGVnYXRvckluZm8/CgogIGluaXQoCiAgICBlcG9jaEluZm86IEVwb2NoSW5mbywKICAgIGxvY2tlZEFkZHJlc3M6IEFkZHJlc3MsCiAgICBsb2NrZWRCYWxhbmNlOiBVRml4NjQsCiAgICB1bmxvY2tMaW1pdDogVUZpeDY0LAogICAgbm9kZUluZm86IE5vZGVJbmZvPywKICAgIGRlbGVnYXRvck5vZGVJbmZvOiBOb2RlSW5mbz8sCiAgICBkZWxlZ2F0b3JJbmZvOiBEZWxlZ2F0b3JJbmZvPywKICApIHsKICAgIHNlbGYuZXBvY2hJbmZvID0gZXBvY2hJbmZvCiAgICBzZWxmLmxvY2tlZEFkZHJlc3MgPSBsb2NrZWRBZGRyZXNzCiAgICBzZWxmLmxvY2tlZEJhbGFuY2UgPSBsb2NrZWRCYWxhbmNlCiAgICBzZWxmLnVubG9ja0xpbWl0ID0gdW5sb2NrTGltaXQKICAgIHNlbGYubm9kZUluZm8gPSBub2RlSW5mbwogICAgc2VsZi5kZWxlZ2F0b3JOb2RlSW5mbyA9IGRlbGVnYXRvck5vZGVJbmZvCiAgICBzZWxmLmRlbGVnYXRvckluZm8gPSBkZWxlZ2F0b3JJbmZvCiAgfQp9CgphY2Nlc3MoYWxsKXN0cnVjdCBOb2RlSW5mbyB7CiAgYWNjZXNzKGFsbClsZXQgaWQ6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IG5ldHdvcmtpbmdBZGRyZXNzOiBTdHJpbmcKICBhY2Nlc3MoYWxsKWxldCByb2xlOiBVSW50OAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zQ29tbWl0dGVkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNVbnN0YWtpbmc6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1Vuc3Rha2VkOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgCiAgYWNjZXNzKGFsbClsZXQgZGVsZWdhdG9ySURDb3VudGVyOiBVSW50MzIKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNSZXF1ZXN0ZWRUb1Vuc3Rha2U6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IGluaXRpYWxXZWlnaHQ6IFVJbnQ2NAoKICBpbml0KG5vZGVJRDogU3RyaW5nKSB7CiAgICBsZXQgbm9kZUluZm8gPSBGbG93SURUYWJsZVN0YWtpbmcuTm9kZUluZm8obm9kZUlEOiBub2RlSUQpIAoKICAgIHNlbGYuaWQgPSBub2RlSW5mby5pZAogICAgc2VsZi5uZXR3b3JraW5nQWRkcmVzcyA9IG5vZGVJbmZvLm5ldHdvcmtpbmdBZGRyZXNzCiAgICBzZWxmLnJvbGUgPSBub2RlSW5mby5yb2xlCiAgICBzZWxmLnRva2Vuc1N0YWtlZCA9IG5vZGVJbmZvLnRva2Vuc1N0YWtlZAogICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBub2RlSW5mby50b2tlbnNDb21taXR0ZWQKICAgIHNlbGYudG9rZW5zVW5zdGFraW5nID0gbm9kZUluZm8udG9rZW5zVW5zdGFraW5nCiAgICBzZWxmLnRva2Vuc1Vuc3Rha2VkID0gbm9kZUluZm8udG9rZW5zVW5zdGFrZWQKICAgIHNlbGYudG9rZW5zUmV3YXJkZWQgPSBub2RlSW5mby50b2tlbnNSZXdhcmRlZAogICAgc2VsZi5kZWxlZ2F0b3JJRENvdW50ZXIgPSBub2RlSW5mby5kZWxlZ2F0b3JJRENvdW50ZXIKICAgIHNlbGYudG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlID0gbm9kZUluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgICBzZWxmLmluaXRpYWxXZWlnaHQgPSBub2RlSW5mby5pbml0aWFsV2VpZ2h0CiAgfQp9CgphY2Nlc3MoYWxsKXN0cnVjdCBEZWxlZ2F0b3JJbmZvIHsKICBhY2Nlc3MoYWxsKWxldCBpZDogVUludDMyCiAgYWNjZXNzKGFsbClsZXQgbm9kZUlEOiBTdHJpbmcKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNDb21taXR0ZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1N0YWtlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zVW5zdGFraW5nOiBVRml4NjQKICBhY2Nlc3MoYWxsKWxldCB0b2tlbnNSZXdhcmRlZDogVUZpeDY0CiAgYWNjZXNzKGFsbClsZXQgdG9rZW5zVW5zdGFrZWQ6IFVGaXg2NAogIGFjY2VzcyhhbGwpbGV0IHRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZTogVUZpeDY0CgogIGluaXQobm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzIpIHsKICAgIGxldCBkZWxlZ2F0b3JJbmZvID0gRmxvd0lEVGFibGVTdGFraW5nLkRlbGVnYXRvckluZm8obm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCkKCiAgICBzZWxmLmlkID0gZGVsZWdhdG9ySW5mby5pZAogICAgc2VsZi5ub2RlSUQgPSBkZWxlZ2F0b3JJbmZvLm5vZGVJRAogICAgc2VsZi50b2tlbnNDb21taXR0ZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc0NvbW1pdHRlZAogICAgc2VsZi50b2tlbnNTdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1N0YWtlZAogICAgc2VsZi50b2tlbnNVbnN0YWtpbmcgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2luZwogICAgc2VsZi50b2tlbnNSZXdhcmRlZCA9IGRlbGVnYXRvckluZm8udG9rZW5zUmV3YXJkZWQKICAgIHNlbGYudG9rZW5zVW5zdGFrZWQgPSBkZWxlZ2F0b3JJbmZvLnRva2Vuc1Vuc3Rha2VkCiAgICBzZWxmLnRva2Vuc1JlcXVlc3RlZFRvVW5zdGFrZSA9IGRlbGVnYXRvckluZm8udG9rZW5zUmVxdWVzdGVkVG9VbnN0YWtlCiAgfQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBSZXN1bHQgewogIGxldCB0b2tlbkhvbGRlclJlZiA9IAogICAgICBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogICAgICAgICAgLmJvcnJvdzwmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKCiAgdmFyIHN0YWtpbmdJbmZvOiBTdGFraW5nSW5mbz8gPSBuaWwKICBpZiBsZXQgdG9rZW5Ib2xkZXIgPSB0b2tlbkhvbGRlclJlZiB7CiAgICBsZXQgbG9ja2VkQWRkcmVzcyA9IHRva2VuSG9sZGVyLmdldExvY2tlZEFjY291bnRBZGRyZXNzKCkgICAgICAgCiAgICBsZXQgbG9ja2VkQmFsYW5jZSA9IHRva2VuSG9sZGVyLmdldExvY2tlZEFjY291bnRCYWxhbmNlKCkKICAgIGxldCB1bmxvY2tMaW1pdCA9IHRva2VuSG9sZGVyLmdldFVubG9ja0xpbWl0KCkKICAgIAogICAgdmFyIG5vZGVJbmZvOiBOb2RlSW5mbz8gPSBuaWwKICAgIGlmIGxldCBub2RlSUQgPSB0b2tlbkhvbGRlci5nZXROb2RlSUQoKSB7CiAgICAgIG5vZGVJbmZvID0gTm9kZUluZm8obm9kZUlEOiBub2RlSUQpCiAgICB9CgogICAgdmFyIGRlbGVnYXRvck5vZGVJbmZvOiBOb2RlSW5mbz8gPSBuaWwKICAgIHZhciBkZWxlZ2F0b3JJbmZvOiBEZWxlZ2F0b3JJbmZvPyA9IG5pbAogICAgaWYgbGV0IGRlbGVnYXRvck5vZGVJRCA9IHRva2VuSG9sZGVyLmdldERlbGVnYXRvck5vZGVJRCgpIHsKICAgICAgaWYgbGV0IGRlbGVnYXRvcklEID0gdG9rZW5Ib2xkZXIuZ2V0RGVsZWdhdG9ySUQoKSB7CiAgICAgICAgZGVsZWdhdG9yTm9kZUluZm8gPSBOb2RlSW5mbyhub2RlSUQ6IGRlbGVnYXRvck5vZGVJRCkKICAgICAgICBkZWxlZ2F0b3JJbmZvID0gRGVsZWdhdG9ySW5mbyhub2RlSUQ6IGRlbGVnYXRvck5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklEKQogICAgICB9IAogICAgfSAKCiAgICBsZXQgZXBvY2hJbmZvOiBFcG9jaEluZm8gPSBFcG9jaEluZm8oCiAgICAgIGN1cnJlbnRFcG9jaENvdW50ZXI6IEZsb3dFcG9jaC5jdXJyZW50RXBvY2hDb3VudGVyLAogICAgICBjdXJyZW50RXBvY2hQaGFzZTogRmxvd0Vwb2NoLmN1cnJlbnRFcG9jaFBoYXNlLnJhd1ZhbHVlCiAgICApCgogICAgc3Rha2luZ0luZm8gPSBTdGFraW5nSW5mbygKICAgICAgZXBvY2hJbmZvOiBlcG9jaEluZm8sCiAgICAgIGxvY2tlZEFkZHJlc3M6IGxvY2tlZEFkZHJlc3MsCiAgICAgIGxvY2tlZEJhbGFuY2U6IGxvY2tlZEJhbGFuY2UsCiAgICAgIHVubG9ja0xpbWl0OiB1bmxvY2tMaW1pdCwKICAgICAgbm9kZUluZm86IG5vZGVJbmZvLAogICAgICBkZWxlZ2F0b3JOb2RlSW5mbzogZGVsZWdhdG9yTm9kZUluZm8sCiAgICAgIGRlbGVnYXRvckluZm86IGRlbGVnYXRvckluZm8gCiAgICApCiAgfQoKICByZXR1cm4gUmVzdWx0KHN0YWtpbmdJbmZvOiBzdGFraW5nSW5mbykKfQ==",
                "restakeReward": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICByZXN0YWtlUmV3YXJkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gQ29tbWl0cyByZXdhcmRlZCB0b2tlbnMgdG8gc3Rha2UgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgoKdHJhbnNhY3Rpb24obm9kZUlEOiBTdHJpbmcsIGRlbGVnYXRvcklEOiBVSW50MzI/LCBhbW91bnQ6IFVGaXg2NCkgewogICAgCiAgICBsZXQgc3Rha2luZ0NvbGxlY3Rpb25SZWY6IGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbgoKICAgIHByZXBhcmUoYWNjb3VudDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmID0gYWNjb3VudC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBhIHJlZmVyZW5jZSB0byBhIFN0YWtpbmdDb2xsZWN0aW9uIGluIHRoZSBwcmltYXJ5IHVzZXIncyBhY2NvdW50IikKICAgIH0KCiAgICBleGVjdXRlIHsKICAgICAgICBzZWxmLnN0YWtpbmdDb2xsZWN0aW9uUmVmLnN0YWtlUmV3YXJkZWRUb2tlbnMobm9kZUlEOiBub2RlSUQsIGRlbGVnYXRvcklEOiBkZWxlZ2F0b3JJRCwgYW1vdW50OiBhbW91bnQpCiAgICB9Cn0=",
                "restakeUnstaked": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICByZXN0YWtlVW5zdGFrZWQgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZsb3dTdGFraW5nQ29sbGVjdGlvbiBmcm9tIDB4OGQwZTg3YjY1MTU5YWU2MwoKLy8vIENvbW1pdHMgdW5zdGFrZWQgdG9rZW5zIHRvIHN0YWtlIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5zdGFrZVVuc3Rha2VkVG9rZW5zKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
                "setup": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZXR1cCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgRmxvd1Rva2VuIGZyb20gMHgxNjU0NjUzMzk5MDQwYTYxCmltcG9ydCBMb2NrZWRUb2tlbnMgZnJvbSAweDhkMGU4N2I2NTE1OWFlNjMKaW1wb3J0IEZsb3dJRFRhYmxlU3Rha2luZyBmcm9tIDB4ODYyNGI1MmY5ZGRjZDA0YQppbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gVGhpcyB0cmFuc2FjdGlvbiBzZXRzIHVwIGFuIGFjY291bnQgdG8gdXNlIGEgc3Rha2luZyBjb2xsZWN0aW9uCi8vLyBJdCB3aWxsIHdvcmsgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoZXkgaGF2ZSBhIHJlZ3VsYXIgYWNjb3VudCwgYSB0d28tYWNjb3VudCBsb2NrZWQgdG9rZW5zIHNldHVwLAovLy8gb3Igc3Rha2luZyBvYmplY3RzIHN0b3JlZCBpbiB0aGUgdW5sb2NrZWQgYWNjb3VudAoKdHJhbnNhY3Rpb24gewogICAgcHJlcGFyZShzaWduZXI6IGF1dGgoQm9ycm93VmFsdWUsIFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgLy8gSWYgdGhlcmUgaXNuJ3QgYWxyZWFkeSBhIHN0YWtpbmcgY29sbGVjdGlvbgogICAgICAgIGlmIHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkgPT0gbmlsIHsKCiAgICAgICAgICAgIC8vIENyZWF0ZSBwcml2YXRlIGNhcGFiaWxpdGllcyBmb3IgdGhlIHRva2VuIGhvbGRlciBhbmQgdW5sb2NrZWQgdmF1bHQKICAgICAgICAgICAgbGV0IGxvY2tlZEhvbGRlciA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcsIExvY2tlZFRva2Vucy5Ub2tlbk9wZXJhdGlvbnMpICZMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXI+KExvY2tlZFRva2Vucy5Ub2tlbkhvbGRlclN0b3JhZ2VQYXRoKSEKICAgICAgICAgICAgbGV0IGZsb3dUb2tlbiA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KSEKCiAgICAgICAgICAgIC8vIENyZWF0ZSBhIG5ldyBTdGFraW5nIENvbGxlY3Rpb24gYW5kIHB1dCBpdCBpbiBzdG9yYWdlCiAgICAgICAgICAgIGlmIGxvY2tlZEhvbGRlci5jaGVjaygpIHsKICAgICAgICAgICAgICAgIHNpZ25lci5zdG9yYWdlLnNhdmUoCiAgICAgICAgICAgICAgICAgICAgPC0gRmxvd1N0YWtpbmdDb2xsZWN0aW9uLmNyZWF0ZVN0YWtpbmdDb2xsZWN0aW9uKAogICAgICAgICAgICAgICAgICAgICAgICB1bmxvY2tlZFZhdWx0OiBmbG93VG9rZW4sCiAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuSG9sZGVyOiBsb2NrZWRIb2xkZXIKICAgICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICAgIHRvOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgc2lnbmVyLnN0b3JhZ2Uuc2F2ZSgKICAgICAgICAgICAgICAgICAgICA8LSBGbG93U3Rha2luZ0NvbGxlY3Rpb24uY3JlYXRlU3Rha2luZ0NvbGxlY3Rpb24oCiAgICAgICAgICAgICAgICAgICAgICAgIHVubG9ja2VkVmF1bHQ6IGZsb3dUb2tlbiwKICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5Ib2xkZXI6IG5pbAogICAgICAgICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgICAgICAgdG86IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFB1Ymxpc2ggYSBjYXBhYmlsaXR5IHRvIHRoZSBjcmVhdGVkIHN0YWtpbmcgY29sbGVjdGlvbi4KICAgICAgICAgICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uQ2FwID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KAogICAgICAgICAgICAgICAgRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgKICAgICAgICAgICAgKQoKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKAogICAgICAgICAgICAgICAgc3Rha2luZ0NvbGxlY3Rpb25DYXAsCiAgICAgICAgICAgICAgICBhdDogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uUHVibGljUGF0aAogICAgICAgICAgICApCiAgICAgICAgfQoKICAgICAgICAvLyBib3Jyb3cgYSByZWZlcmVuY2UgdG8gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgogICAgICAgIGxldCBjb2xsZWN0aW9uUmVmID0gc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24+KGZyb206IEZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvblN0b3JhZ2VQYXRoKQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBzdGFraW5nIGNvbGxlY3Rpb24gcmVmZXJlbmNlIikKCiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSBub2RlIHN0YWtlciBvYmplY3QgaW4gdGhlIGFjY291bnQsIHB1dCBpdCBpbiB0aGUgc3Rha2luZyBjb2xsZWN0aW9uCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCZGbG93SURUYWJsZVN0YWtpbmcuTm9kZVN0YWtlcj4oZnJvbTogRmxvd0lEVGFibGVTdGFraW5nLk5vZGVTdGFrZXJTdG9yYWdlUGF0aCkgIT0gbmlsIHsKICAgICAgICAgICAgbGV0IG5vZGUgPC0gc2lnbmVyLnN0b3JhZ2UubG9hZDxARmxvd0lEVGFibGVTdGFraW5nLk5vZGVTdGFrZXI+KGZyb206IEZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlU3Rha2VyU3RvcmFnZVBhdGgpIQogICAgICAgICAgICBjb2xsZWN0aW9uUmVmLmFkZE5vZGVPYmplY3QoPC1ub2RlLCBtYWNoaW5lQWNjb3VudEluZm86IG5pbCkKICAgICAgICB9CgogICAgICAgIC8vIElmIHRoZXJlIGlzIGEgZGVsZWdhdG9yIG9iamVjdCBpbiB0aGUgYWNjb3VudCwgcHV0IGl0IGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KICAgICAgICBpZiBzaWduZXIuc3RvcmFnZS5ib3Jyb3c8JkZsb3dJRFRhYmxlU3Rha2luZy5Ob2RlRGVsZWdhdG9yPihmcm9tOiBGbG93SURUYWJsZVN0YWtpbmcuRGVsZWdhdG9yU3RvcmFnZVBhdGgpICE9IG5pbCB7CiAgICAgICAgICAgIGxldCBkZWxlZ2F0b3IgPC0gc2lnbmVyLnN0b3JhZ2UubG9hZDxARmxvd0lEVGFibGVTdGFraW5nLk5vZGVEZWxlZ2F0b3I+KGZyb206IEZsb3dJRFRhYmxlU3Rha2luZy5EZWxlZ2F0b3JTdG9yYWdlUGF0aCkhCiAgICAgICAgICAgIGNvbGxlY3Rpb25SZWYuYWRkRGVsZWdhdG9yT2JqZWN0KDwtZGVsZWdhdG9yKQogICAgICAgIH0KICAgIH0KfQ==",
                "unstake": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB1bnN0YWtlIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gUmVxdWVzdHMgdW5zdGFraW5nIGZvciB0aGUgc3BlY2lmaWVkIG5vZGUgb3IgZGVsZWdhdG9yIGluIHRoZSBzdGFraW5nIGNvbGxlY3Rpb24KCnRyYW5zYWN0aW9uKG5vZGVJRDogU3RyaW5nLCBkZWxlZ2F0b3JJRDogVUludDMyPywgYW1vdW50OiBVRml4NjQpIHsKICAgIAogICAgbGV0IHN0YWtpbmdDb2xsZWN0aW9uUmVmOiBhdXRoKEZsb3dTdGFraW5nQ29sbGVjdGlvbi5Db2xsZWN0aW9uT3duZXIpICZGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb24KCiAgICBwcmVwYXJlKGFjY291bnQ6IGF1dGgoQm9ycm93VmFsdWUpICZBY2NvdW50KSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZiA9IGFjY291bnQuc3RvcmFnZS5ib3Jyb3c8YXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uPihmcm9tOiBGbG93U3Rha2luZ0NvbGxlY3Rpb24uU3Rha2luZ0NvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBib3Jyb3cgYSByZWZlcmVuY2UgdG8gYSBTdGFraW5nQ29sbGVjdGlvbiBpbiB0aGUgcHJpbWFyeSB1c2VyJ3MgYWNjb3VudCIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi5zdGFraW5nQ29sbGVjdGlvblJlZi5yZXF1ZXN0VW5zdGFraW5nKG5vZGVJRDogbm9kZUlELCBkZWxlZ2F0b3JJRDogZGVsZWdhdG9ySUQsIGFtb3VudDogYW1vdW50KQogICAgfQp9",
                "withdrawLocked": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB3aXRoZHJhd0xvY2tlZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RlVOR0lCTEVUT0tFTkFERFJFU1MKaW1wb3J0IEZsb3dUb2tlbiBmcm9tIDB4RkxPV1RPS0VOQUREUkVTUwppbXBvcnQgTG9ja2VkVG9rZW5zIGZyb20gMHhMT0NLRURUT0tFTkFERFJFU1MKCnRyYW5zYWN0aW9uKGFtb3VudDogVUZpeDY0KSB7CgogICAgbGV0IGhvbGRlclJlZjogYXV0aChMb2NrZWRUb2tlbnMuVG9rZW5PcGVyYXRpb25zLCBGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyCiAgICBsZXQgdmF1bHRSZWY6IGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJkZsb3dUb2tlbi5WYXVsdAoKICAgIHByZXBhcmUoYWNjdDogYXV0aChCb3Jyb3dWYWx1ZSkgJkFjY291bnQpIHsKICAgICAgICBzZWxmLmhvbGRlclJlZiA9IGFjY3Quc3RvcmFnZS5ib3Jyb3c8YXV0aChMb2NrZWRUb2tlbnMuVG9rZW5PcGVyYXRpb25zLCBGdW5naWJsZVRva2VuLldpdGhkcmF3KSAmTG9ja2VkVG9rZW5zLlRva2VuSG9sZGVyPihmcm9tOiBMb2NrZWRUb2tlbnMuVG9rZW5Ib2xkZXJTdG9yYWdlUGF0aCkKICAgICAgICAgICAgPz8gcGFuaWMoIlRoZSBwcmltYXJ5IHVzZXIgYWNjb3VudCBkb2VzIG5vdCBoYXZlIGFuIGFzc29jaWF0ZWQgbG9ja2VkIGFjY291bnQiKQoKICAgICAgICBzZWxmLnZhdWx0UmVmID0gYWNjdC5zdG9yYWdlLmJvcnJvdzxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZGbG93VG9rZW4uVmF1bHQ+KGZyb206IC9zdG9yYWdlL2Zsb3dUb2tlblZhdWx0KQogICAgICAgICAgICA/PyBwYW5pYygiQ291bGQgbm90IGJvcnJvdyBmbG93IHRva2VuIHZhdWx0IHJlZiIpCiAgICB9CgogICAgZXhlY3V0ZSB7CiAgICAgICAgc2VsZi52YXVsdFJlZi5kZXBvc2l0KGZyb206IDwtc2VsZi5ob2xkZXJSZWYud2l0aGRyYXcoYW1vdW50OiBhbW91bnQpKQogICAgfQp9",
                "withdrawReward": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB3aXRoZHJhd1Jld2FyZCAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyByZXdhcmRlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0Cgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdSZXdhcmRlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ==",
                "withdrawUnstaked": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB3aXRoZHJhd1Vuc3Rha2VkIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgICBpbXBvcnQgRmxvd1N0YWtpbmdDb2xsZWN0aW9uIGZyb20gMHg4ZDBlODdiNjUxNTlhZTYzCgovLy8gUmVxdWVzdCB0byB3aXRoZHJhdyB1bnN0YWtlZCB0b2tlbnMgZm9yIHRoZSBzcGVjaWZpZWQgbm9kZSBvciBkZWxlZ2F0b3IgaW4gdGhlIHN0YWtpbmcgY29sbGVjdGlvbgovLy8gVGhlIHRva2VucyBhcmUgYXV0b21hdGljYWxseSBkZXBvc2l0ZWQgdG8gdGhlIHVubG9ja2VkIGFjY291bnQgdmF1bHQgZmlyc3QsCi8vLyBBbmQgdGhlbiBhbnkgbG9ja2VkIHRva2VucyBhcmUgZGVwb3NpdGVkIGludG8gdGhlIGxvY2tlZCBhY2NvdW50IHZhdWx0IGlmIGl0IGlzIHRoZXJlCgp0cmFuc2FjdGlvbihub2RlSUQ6IFN0cmluZywgZGVsZWdhdG9ySUQ6IFVJbnQzMj8sIGFtb3VudDogVUZpeDY0KSB7CiAgICAKICAgIGxldCBzdGFraW5nQ29sbGVjdGlvblJlZjogYXV0aChGbG93U3Rha2luZ0NvbGxlY3Rpb24uQ29sbGVjdGlvbk93bmVyKSAmRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uCgogICAgcHJlcGFyZShhY2NvdW50OiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYgPSBhY2NvdW50LnN0b3JhZ2UuYm9ycm93PGF1dGgoRmxvd1N0YWtpbmdDb2xsZWN0aW9uLkNvbGxlY3Rpb25Pd25lcikgJkZsb3dTdGFraW5nQ29sbGVjdGlvbi5TdGFraW5nQ29sbGVjdGlvbj4oZnJvbTogRmxvd1N0YWtpbmdDb2xsZWN0aW9uLlN0YWtpbmdDb2xsZWN0aW9uU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJDb3VsZCBub3QgYm9ycm93IGEgcmVmZXJlbmNlIHRvIGEgU3Rha2luZ0NvbGxlY3Rpb24gaW4gdGhlIHByaW1hcnkgdXNlcidzIGFjY291bnQiKQogICAgfQoKICAgIGV4ZWN1dGUgewogICAgICAgIHNlbGYuc3Rha2luZ0NvbGxlY3Rpb25SZWYud2l0aGRyYXdVbnN0YWtlZFRva2Vucyhub2RlSUQ6IG5vZGVJRCwgZGVsZWdhdG9ySUQ6IGRlbGVnYXRvcklELCBhbW91bnQ6IGFtb3VudCkKICAgIH0KfQ=="
            },
            "storage": {
                "enableTokenStorage": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBlbmFibGVUb2tlblN0b3JhZ2UgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IDxUb2tlbj4gZnJvbSA8VG9rZW5BZGRyZXNzPgoKdHJhbnNhY3Rpb24gewoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKFN0b3JhZ2UsIENhcGFiaWxpdGllcykgJkFjY291bnQpIHsKCiAgICAgICAgaWYgc2lnbmVyLnN0b3JhZ2UuYm9ycm93PCY8VG9rZW4+LlZhdWx0Pihmcm9tOiA8VG9rZW5TdG9yYWdlUGF0aD4gKSA9PSBuaWwgewogICAgICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKDwtIDxUb2tlbj4uY3JlYXRlRW1wdHlWYXVsdCh2YXVsdFR5cGU6IFR5cGU8QDxUb2tlbj4uVmF1bHQ+KCkpLCB0bzogPFRva2VuU3RvcmFnZVBhdGg+KQogICAgICAgIH0KCiAgICAgICAgaWYgc2lnbmVyLmNhcGFiaWxpdGllcy5leGlzdHMoPFRva2VuUmVjZWl2ZXJQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgcmVjZWl2ZXJDYXBhYmlsaXR5ID0gc2lnbmVyLmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCY8VG9rZW4+LlZhdWx0Pig8VG9rZW5TdG9yYWdlUGF0aD4pCiAgICAgICAgICAgIHNpZ25lci5jYXBhYmlsaXRpZXMucHVibGlzaChyZWNlaXZlckNhcGFiaWxpdHksIGF0OiA8VG9rZW5SZWNlaXZlclBhdGg+KQogICAgICAgIAogICAgICAgIH0KICAgICAgIAogICAgICAgIGlmIHNpZ25lci5jYXBhYmlsaXRpZXMuZXhpc3RzKDxUb2tlbkJhbGFuY2VQYXRoPikgPT0gZmFsc2UgewogICAgICAgICAgICBsZXQgYmFsYW5jZUNhcGFiaWxpdHkgPSBzaWduZXIuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JjxUb2tlbj4uVmF1bHQ+KDxUb2tlblN0b3JhZ2VQYXRoPikKICAgICAgICAgICAgc2lnbmVyLmNhcGFiaWxpdGllcy5wdWJsaXNoKGJhbGFuY2VDYXBhYmlsaXR5LCBhdDogPFRva2VuQmFsYW5jZVBhdGg+KQogICAgICAgIH0KICAgIAogICAgfQp9",
                "getBasicPublicItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRCYXNpY1B1YmxpY0l0ZW1zIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGFjY2VzcyhhbGwpc3RydWN0IEl0ZW0gewogIGFjY2VzcyhhbGwpbGV0IGFkZHJlc3M6IEFkZHJlc3MKICBhY2Nlc3MoYWxsKWxldCBwYXRoOiBTdHJpbmcKICBhY2Nlc3MoYWxsKWxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGluaXQoYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCB0YXJnZXRQYXRoOiBTdHJpbmc/KSB7CiAgICBzZWxmLmFkZHJlc3MgPSBhZGRyZXNzCiAgICBzZWxmLnBhdGggPSBwYXRoCiAgICBzZWxmLnRhcmdldFBhdGggPSB0YXJnZXRQYXRoCiAgfQp9CgphY2Nlc3MoYWxsKWZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbSXRlbV0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQogIGxldCBpdGVtczogW0l0ZW1dID0gW10KCgogIGZ1biBlYWNoUGF0aChwYXRoOiBQdWJsaWNQYXRoLCBjYXBUeXBlOiBUeXBlKTogQm9vbCB7CiAgICAvLyB0b2RvCiAgICBsZXQgY2FwID0gYWNjb3VudC5jYXBhYmlsaXRpZXMuZ2V0PCZBbnlTdHJ1Y3Q+KHBhdGgpCiAgICB2YXIgdGFyZ2V0UGF0aCA9ICIiCgogICAgaWYgY2FwICE9IG5pbCB7CiAgICAgIHRhcmdldFBhdGggPSAiMTIiIAogICAgfQogICAgbGV0IGl0ZW0gPSBJdGVtKGFkZHJlc3M6IGFkZHJlc3MsIHBhdGg6IHBhdGgudG9TdHJpbmcoKSwgdGFyZ2V0UGF0aDogdGFyZ2V0UGF0aCkKICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgcmV0dXJuIHRydWUKICB9CiAgYWNjb3VudC5zdG9yYWdlLmZvckVhY2hQdWJsaWMoZWFjaFBhdGgpCgogIHJldHVybiBpdGVtcwp9",
                "getPrivateItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRQcml2YXRlSXRlbXMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgYWNjZXNzKGFsbClzdHJ1Y3QgSXRlbSB7CiAgYWNjZXNzKGFsbClsZXQgYWRkcmVzczogQWRkcmVzcwogIGFjY2VzcyhhbGwpbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpbGV0IHR5cGU6IFR5cGUKICBhY2Nlc3MoYWxsKWxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLCAKICAgIHBhdGg6IFN0cmluZywgCiAgICB0eXBlOiBUeXBlLCAKICAgIHRhcmdldFBhdGg6IFN0cmluZz8KICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudHlwZSA9IHR5cGUKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICB9Cn0KCmFjY2VzcyhhbGwpZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aE1hcDoge1N0cmluZzogQm9vbH0pOiBbSXRlbV0gewogIGxldCBhY2NvdW50ID0gZ2V0QWNjb3VudChhZGRyZXNzKQoKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCgogIGFjY291bnQuc3RvcmFnZS5mb3JFYWNoUHJpdmF0ZShmdW4gKHBhdGg6IFByaXZhdGVQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICBpZiAhcGF0aE1hcC5jb250YWluc0tleShwYXRoLnRvU3RyaW5nKCkpIHsKICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICB2YXIgdGFyZ2V0UGF0aDogU3RyaW5nPyA9IG5pbAogICAgaWYgbGV0IHRhcmdldCA9IGFjY291bnQuZ2V0TGlua1RhcmdldChwYXRoKSB7CiAgICAgIHRhcmdldFBhdGggPSB0YXJnZXQudG9TdHJpbmcoKQogICAgfQoKICAgIGxldCBpdGVtID0gSXRlbSgKICAgICAgYWRkcmVzczogYWRkcmVzcywKICAgICAgcGF0aDogcGF0aC50b1N0cmluZygpLAogICAgICB0eXBlOiB0eXBlLAogICAgICB0YXJnZXRQYXRoOiB0YXJnZXRQYXRoCiAgICApCgogICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICByZXR1cm4gdHJ1ZQogIH0pCgogIHJldHVybiBpdGVtcwp9",
                "getPrivatePaths": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRQcml2YXRlUGF0aHMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgYWNjZXNzKGFsbClmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzKTogW1ByaXZhdGVQYXRoXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCBjbGVhbmRQYXRoczogW1ByaXZhdGVQYXRoXSA9IFtdCiAgZm9yIHBhdGggaW4gYWNjb3VudC5wcml2YXRlUGF0aHMgewogICAgY2xlYW5kUGF0aHMuYXBwZW5kKHBhdGgpCiAgfQogIHJldHVybiBjbGVhbmRQYXRocwp9",
                "getPublicItem": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRQdWJsaWNJdGVtIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIC8vIEEgd29ya2Fyb3VuZCBtZXRob2QKaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KICAKYWNjZXNzKGFsbCkgc3RydWN0IEl0ZW0gewogIGFjY2VzcyhhbGwpIGxldCBhZGRyZXNzOiBBZGRyZXNzCiAgYWNjZXNzKGFsbCkgbGV0IHBhdGg6IFN0cmluZwogIGFjY2VzcyhhbGwpIGxldCB0eXBlOiBUeXBlCgogIGFjY2VzcyhhbGwpIGxldCB0YXJnZXRQYXRoOiBTdHJpbmc/CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLCAKICAgIHBhdGg6IFN0cmluZywgCiAgICB0eXBlOiBUeXBlLCAKICAgIHRhcmdldFBhdGg6IFN0cmluZz8KICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudHlwZSA9IHR5cGUKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICB9Cn0KCmFjY2VzcyhhbGwpIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhNYXA6IHtTdHJpbmc6IEJvb2x9KTogW0l0ZW1dIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCgogIGxldCBpdGVtczogW0l0ZW1dID0gW10KICBhY2NvdW50LmZvckVhY2hQdWJsaWMoZnVuIChwYXRoOiBQdWJsaWNQYXRoLCB0eXBlOiBUeXBlKTogQm9vbCB7CiAgICBpZiAhcGF0aE1hcC5jb250YWluc0tleShwYXRoLnRvU3RyaW5nKCkpIHsKICAgICAgcmV0dXJuIHRydWUKICAgIH0KCiAgICB2YXIgdGFyZ2V0UGF0aDogU3RyaW5nPyA9IG5pbAoKICAgIGlmIGxldCB0YXJnZXQgPSBhY2NvdW50LmdldExpbmtUYXJnZXQocGF0aCkgewogICAgICB0YXJnZXRQYXRoID0gdGFyZ2V0LnRvU3RyaW5nKCkKICAgIH0KCiAgICBsZXQgaXRlbSA9IEl0ZW0oCiAgICAgIGFkZHJlc3M6IGFkZHJlc3MsCiAgICAgIHBhdGg6IHBhdGgudG9TdHJpbmcoKSwKICAgICAgdHlwZTogdHlwZSwKICAgICAgdGFyZ2V0UGF0aDogdGFyZ2V0UGF0aAogICAgKQoKICAgIGl0ZW1zLmFwcGVuZChpdGVtKQogICAgcmV0dXJuIGZhbHNlCiAgfSkKCiAgcmV0dXJuIGl0ZW1zCn0=",
                "getPublicItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRQdWJsaWNJdGVtcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgogIAphY2Nlc3MoYWxsKSBzdHJ1Y3QgSXRlbSB7CiAgYWNjZXNzKGFsbCkgbGV0IGFkZHJlc3M6IEFkZHJlc3MKICBhY2Nlc3MoYWxsKSBsZXQgcGF0aDogU3RyaW5nCiAgYWNjZXNzKGFsbCkgbGV0IHR5cGU6IFR5cGUKCiAgYWNjZXNzKGFsbCkgbGV0IHRhcmdldFBhdGg6IFN0cmluZz8KCiAgYWNjZXNzKGFsbCkgbGV0IGlzQ29sbGVjdGlvbkNhcDogQm9vbAogIGFjY2VzcyhhbGwpIGxldCB0b2tlbklEczogW1VJbnQ2NF0KCiAgYWNjZXNzKGFsbCkgbGV0IGlzQmFsYW5jZUNhcDogQm9vbAogIGFjY2VzcyhhbGwpIGxldCBiYWxhbmNlOiBVRml4NjQ/CgogIGluaXQoCiAgICBhZGRyZXNzOiBBZGRyZXNzLCAKICAgIHBhdGg6IFN0cmluZywgCiAgICB0eXBlOiBUeXBlLCAKICAgIHRhcmdldFBhdGg6IFN0cmluZz8sIAogICAgaXNDb2xsZWN0aW9uQ2FwOiBCb29sLCAKICAgIHRva2VuSURzOiBbVUludDY0XSwKICAgIGlzQmFsYW5jZUNhcDogQm9vbCwKICAgIGJhbGFuY2U6IFVGaXg2ND8KICApIHsKICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgIHNlbGYucGF0aCA9IHBhdGgKICAgIHNlbGYudHlwZSA9IHR5cGUKICAgIHNlbGYudGFyZ2V0UGF0aCA9IHRhcmdldFBhdGgKICAgIHNlbGYuaXNDb2xsZWN0aW9uQ2FwID0gaXNDb2xsZWN0aW9uQ2FwCiAgICBzZWxmLnRva2VuSURzID0gdG9rZW5JRHMKICAgIHNlbGYuaXNCYWxhbmNlQ2FwID0gaXNCYWxhbmNlQ2FwCiAgICBzZWxmLmJhbGFuY2UgPSBiYWxhbmNlCiAgfQp9CgphY2Nlc3MoYWxsKSBmdW4gbWFpbihhZGRyZXNzOiBBZGRyZXNzLCBwYXRoTWFwOiB7U3RyaW5nOiBCb29sfSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQoKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCiAgbGV0IGJhbGFuY2VDYXBUeXBlID0gVHlwZTxDYXBhYmlsaXR5PCZBbnlSZXNvdXJjZXtGdW5naWJsZVRva2VuLkJhbGFuY2V9Pj4oKQogIGxldCBjb2xsZWN0aW9uVHlwZSA9IFR5cGU8Q2FwYWJpbGl0eTwmQW55UmVzb3VyY2V7Tm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uUHVibGljfT4+KCkKCiAgYWNjb3VudC5mb3JFYWNoUHVibGljKGZ1biAocGF0aDogUHVibGljUGF0aCwgdHlwZTogVHlwZSk6IEJvb2wgewogICAgaWYgIXBhdGhNYXAuY29udGFpbnNLZXkocGF0aC50b1N0cmluZygpKSB7CiAgICAgIHJldHVybiB0cnVlCiAgICB9CgogICAgdmFyIHRhcmdldFBhdGg6IFN0cmluZz8gPSBuaWwKICAgIHZhciBpc0NvbGxlY3Rpb25DYXAgPSBmYWxzZQogICAgdmFyIGlzQmFsYW5jZUNhcCA9IGZhbHNlCiAgICB2YXIgdG9rZW5JRHM6IFtVSW50NjRdID0gW10KICAgIHZhciBiYWxhbmNlOiBVRml4NjQ/ID0gbmlsCgogICAgaWYgbGV0IHRhcmdldCA9IGFjY291bnQuZ2V0TGlua1RhcmdldChwYXRoKSB7CiAgICAgIHRhcmdldFBhdGggPSB0YXJnZXQudG9TdHJpbmcoKQogICAgfQoKICAgIGlmICh0eXBlLmlzU3VidHlwZShvZjogYmFsYW5jZUNhcFR5cGUpKSB7CiAgICAgIGlzQmFsYW5jZUNhcCA9IHRydWUKICAgICAgbGV0IHZhdWx0UmVmID0gYWNjb3VudAogICAgICAgICAgLmdldENhcGFiaWxpdHkocGF0aCkKICAgICAgICAgIC5ib3Jyb3c8JntGdW5naWJsZVRva2VuLkJhbGFuY2V9PigpCgogICAgICBpZiBsZXQgdmF1bHQgPSB2YXVsdFJlZiB7CiAgICAgICAgICBiYWxhbmNlID0gdmF1bHQuYmFsYW5jZQogICAgICB9CiAgICB9IGVsc2UgaWYgKHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkpIHsKICAgICAgaXNDb2xsZWN0aW9uQ2FwID0gdHJ1ZQogICAgICBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQKICAgICAgICAuZ2V0Q2FwYWJpbGl0eShwYXRoKQogICAgICAgIC5ib3Jyb3c8JntOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PigpCgogICAgICBpZiBsZXQgY29sbGVjdGlvbiA9IGNvbGxlY3Rpb25SZWYgewogICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvbi5nZXRJRHMoKQogICAgICB9CiAgICB9CgogICAgbGV0IGl0ZW0gPSBJdGVtKAogICAgICBhZGRyZXNzOiBhZGRyZXNzLAogICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgIHR5cGU6IHR5cGUsCiAgICAgIHRhcmdldFBhdGg6IHRhcmdldFBhdGgsCiAgICAgIGlzQ29sbGVjdGlvbkNhcDogaXNDb2xsZWN0aW9uQ2FwLAogICAgICB0b2tlbklEczogdG9rZW5JRHMsCiAgICAgIGlzQmFsYW5jZUNhcDogaXNCYWxhbmNlQ2FwLAogICAgICBiYWxhbmNlOiBiYWxhbmNlCiAgICApCgogICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICByZXR1cm4gdHJ1ZQogIH0pCgogIHJldHVybiBpdGVtcwp9",
                "getPublicPaths": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRQdWJsaWNQYXRocyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcyk6IFtQdWJsaWNQYXRoXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCBjbGVhbmRQYXRoczogW1B1YmxpY1BhdGhdID0gW10KICBmb3IgcGF0aCBpbiBhY2NvdW50LnB1YmxpY1BhdGhzIHsKICAgIGNsZWFuZFBhdGhzLmFwcGVuZChwYXRoKQogIH0KICByZXR1cm4gY2xlYW5kUGF0aHMKfQ==",
                "getStoragePaths": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdG9yYWdlUGF0aHMgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgcHViIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MpOiBbU3RvcmFnZVBhdGhdIHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IGNsZWFuZFBhdGhzOiBbU3RvcmFnZVBhdGhdID0gW10KICBmb3IgcGF0aCBpbiBhY2NvdW50LnN0b3JhZ2VQYXRocyB7CiAgICBjbGVhbmRQYXRocy5hcHBlbmQocGF0aCkKICB9CiAgcmV0dXJuIGNsZWFuZFBhdGhzCn0=",
                "getStoredItems": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdG9yZWRJdGVtcyAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBpbXBvcnQgRnVuZ2libGVUb2tlbiBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgTm9uRnVuZ2libGVUb2tlbiBmcm9tIDB4Tm9uRnVuZ2libGVUb2tlbgppbXBvcnQgTWV0YWRhdGFWaWV3cyBmcm9tIDB4TWV0YWRhdGFWaWV3cwoKcHViIHN0cnVjdCBDb2xsZWN0aW9uRGlzcGxheSB7CiAgcHViIGxldCBuYW1lOiBTdHJpbmcKICBwdWIgbGV0IHNxdWFyZUltYWdlOiBNZXRhZGF0YVZpZXdzLk1lZGlhCgogIGluaXQobmFtZTogU3RyaW5nLCBzcXVhcmVJbWFnZTogTWV0YWRhdGFWaWV3cy5NZWRpYSkgewogICAgc2VsZi5uYW1lID0gbmFtZQogICAgc2VsZi5zcXVhcmVJbWFnZSA9IHNxdWFyZUltYWdlCiAgfQp9CgpwdWIgc3RydWN0IEl0ZW0gewogIHB1YiBsZXQgYWRkcmVzczogQWRkcmVzcwogIHB1YiBsZXQgcGF0aDogU3RyaW5nCiAgcHViIGxldCB0eXBlOiBUeXBlCiAgcHViIGxldCBpc1Jlc291cmNlOiBCb29sCiAgcHViIGxldCBpc05GVENvbGxlY3Rpb246IEJvb2wKICBwdWIgbGV0IGRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PwogIHB1YiBsZXQgdG9rZW5JRHM6IFtVSW50NjRdCiAgcHViIGxldCBpc1ZhdWx0OiBCb29sCiAgcHViIGxldCBiYWxhbmNlOiBVRml4NjQ/CgogIGluaXQoYWRkcmVzczogQWRkcmVzcywgcGF0aDogU3RyaW5nLCB0eXBlOiBUeXBlLCBpc1Jlc291cmNlOiBCb29sLCAKICAgIGlzTkZUQ29sbGVjdGlvbjogQm9vbCwgZGlzcGxheTogQ29sbGVjdGlvbkRpc3BsYXk/LAogICAgdG9rZW5JRHM6IFtVSW50NjRdLCBpc1ZhdWx0OiBCb29sLCBiYWxhbmNlOiBVRml4NjQ/KSB7CiAgICAgIHNlbGYuYWRkcmVzcyA9IGFkZHJlc3MKICAgICAgc2VsZi5wYXRoID0gcGF0aAogICAgICBzZWxmLnR5cGUgPSB0eXBlCiAgICAgIHNlbGYuaXNSZXNvdXJjZSA9IGlzUmVzb3VyY2UKICAgICAgc2VsZi5pc05GVENvbGxlY3Rpb24gPSBpc05GVENvbGxlY3Rpb24KICAgICAgc2VsZi5kaXNwbGF5ID0gZGlzcGxheQogICAgICBzZWxmLnRva2VuSURzID0gdG9rZW5JRHMKICAgICAgc2VsZi5pc1ZhdWx0ID0gaXNWYXVsdAogICAgICBzZWxmLmJhbGFuY2UgPSBiYWxhbmNlCiAgfQp9CgpwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aElkZW50aWZpZXJzOiBbU3RyaW5nXSk6IFtJdGVtXSB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCByZXNvdXJjZVR5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZT4oKQogIGxldCB2YXVsdFR5cGUgPSBUeXBlPEBGdW5naWJsZVRva2VuLlZhdWx0PigpCiAgbGV0IGNvbGxlY3Rpb25UeXBlID0gVHlwZTxATm9uRnVuZ2libGVUb2tlbi5Db2xsZWN0aW9uPigpCiAgbGV0IG1ldGFkYXRhVmlld1R5cGUgPSBUeXBlPEBBbnlSZXNvdXJjZXtNZXRhZGF0YVZpZXdzLlJlc29sdmVyQ29sbGVjdGlvbn0+KCkKICBsZXQgaXRlbXM6IFtJdGVtXSA9IFtdCgogIGZvciBpZGVudGlmaWVyIGluIHBhdGhJZGVudGlmaWVycyB7CiAgICBsZXQgcGF0aCA9IFN0b3JhZ2VQYXRoKGlkZW50aWZpZXI6IGlkZW50aWZpZXIpIQoKICAgIGlmIGxldCB0eXBlID0gYWNjb3VudC50eXBlKGF0OiBwYXRoKSB7CiAgICAgIGxldCBpc1Jlc291cmNlID0gdHlwZS5pc1N1YnR5cGUob2Y6IHJlc291cmNlVHlwZSkKICAgICAgbGV0IGlzTkZUQ29sbGVjdGlvbiA9IHR5cGUuaXNTdWJ0eXBlKG9mOiBjb2xsZWN0aW9uVHlwZSkKICAgICAgbGV0IGNvbmZvcm1lZE1ldGFkYXRhVmlld3MgPSB0eXBlLmlzU3VidHlwZShvZjogbWV0YWRhdGFWaWV3VHlwZSkKCiAgICAgIHZhciB0b2tlbklEczogW1VJbnQ2NF0gPSBbXQogICAgICB2YXIgY29sbGVjdGlvbkRpc3BsYXk6IENvbGxlY3Rpb25EaXNwbGF5PyA9IG5pbAogICAgICBpZiBpc05GVENvbGxlY3Rpb24gJiYgY29uZm9ybWVkTWV0YWRhdGFWaWV3cyB7CiAgICAgICAgaWYgbGV0IGNvbGxlY3Rpb25SZWYgPSBhY2NvdW50LmJvcnJvdzwme01ldGFkYXRhVmlld3MuUmVzb2x2ZXJDb2xsZWN0aW9uLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9Pihmcm9tOiBwYXRoKSB7CiAgICAgICAgICB0b2tlbklEcyA9IGNvbGxlY3Rpb25SZWYuZ2V0SURzKCkKCiAgICAgICAgICAvLyBUT0RPOiBtb3ZlIHRvIGEgbGlzdAogICAgICAgICAgaWYgdG9rZW5JRHMubGVuZ3RoID4gMCAKICAgICAgICAgICYmIHBhdGggIT0gL3N0b3JhZ2UvUmFyaWJsZU5GVENvbGxlY3Rpb24gCiAgICAgICAgICAmJiBwYXRoICE9IC9zdG9yYWdlL0FSVElGQUNUUGFja1YzQ29sbGVjdGlvbgogICAgICAgICAgJiYgcGF0aCAhPSAvc3RvcmFnZS9BcmxlZVNjZW5lIHsKICAgICAgICAgICAgbGV0IHJlc29sdmVyID0gY29sbGVjdGlvblJlZi5ib3Jyb3dWaWV3UmVzb2x2ZXIoaWQ6IHRva2VuSURzWzBdKSAKICAgICAgICAgICAgaWYgbGV0IGRpc3BsYXkgPSBNZXRhZGF0YVZpZXdzLmdldE5GVENvbGxlY3Rpb25EaXNwbGF5KHJlc29sdmVyKSB7CiAgICAgICAgICAgICAgY29sbGVjdGlvbkRpc3BsYXkgPSBDb2xsZWN0aW9uRGlzcGxheSgKICAgICAgICAgICAgICAgIG5hbWU6IGRpc3BsYXkubmFtZSwKICAgICAgICAgICAgICAgIHNxdWFyZUltYWdlOiBkaXNwbGF5LnNxdWFyZUltYWdlCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgaWYgaXNORlRDb2xsZWN0aW9uIHsKICAgICAgICBpZiBsZXQgY29sbGVjdGlvblJlZiA9IGFjY291bnQuYm9ycm93PCZOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb24+KGZyb206IHBhdGgpIHsKICAgICAgICAgIHRva2VuSURzID0gY29sbGVjdGlvblJlZi5nZXRJRHMoKQogICAgICAgIH0KICAgICAgfQoKICAgICAgbGV0IGlzVmF1bHQgPSB0eXBlLmlzU3VidHlwZShvZjogdmF1bHRUeXBlKSAKICAgICAgdmFyIGJhbGFuY2U6IFVGaXg2ND8gPSBuaWwKICAgICAgaWYgaXNWYXVsdCB7CiAgICAgICAgaWYgbGV0IHZhdWx0UmVmID0gYWNjb3VudC5ib3Jyb3c8JkZ1bmdpYmxlVG9rZW4uVmF1bHQ+KGZyb206IHBhdGgpIHsKICAgICAgICAgIGJhbGFuY2UgPSB2YXVsdFJlZi5iYWxhbmNlCiAgICAgICAgfQogICAgICB9CgogICAgICBsZXQgaXRlbSA9IEl0ZW0oCiAgICAgICAgYWRkcmVzczogYWRkcmVzcywKICAgICAgICBwYXRoOiBwYXRoLnRvU3RyaW5nKCksCiAgICAgICAgdHlwZTogdHlwZSwKICAgICAgICBpc1Jlc291cmNlOiBpc1Jlc291cmNlLAogICAgICAgIGlzTkZUQ29sbGVjdGlvbjogaXNORlRDb2xsZWN0aW9uLAogICAgICAgIGRpc3BsYXk6IGNvbGxlY3Rpb25EaXNwbGF5LAogICAgICAgIHRva2VuSURzOiB0b2tlbklEcywKICAgICAgICBpc1ZhdWx0OiBpc1ZhdWx0LAogICAgICAgIGJhbGFuY2U6IGJhbGFuY2UKICAgICAgKQoKICAgICAgaXRlbXMuYXBwZW5kKGl0ZW0pCiAgICB9CiAgfQoKICByZXR1cm4gaXRlbXMKfQ==",
                "getStoredResource": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdG9yZWRSZXNvdXJjZSAtIHYyLjI4CiAgICAvLyA8cGxhdGZvcm1faW5mbz4KICAgICBwdWIgZnVuIG1haW4oYWRkcmVzczogQWRkcmVzcywgcGF0aFN0cjogU3RyaW5nKTogJkFueVJlc291cmNlPyB7CiAgbGV0IGFjY291bnQgPSBnZXRBdXRoQWNjb3VudChhZGRyZXNzKQogIGxldCBwYXRoID0gU3RvcmFnZVBhdGgoaWRlbnRpZmllcjogcGF0aFN0cikhCiAgcmV0dXJuIGFjY291bnQuYm9ycm93PCZBbnlSZXNvdXJjZT4oZnJvbTogcGF0aCkKfQ==",
                "getStoredStruct": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBnZXRTdG9yZWRTdHJ1Y3QgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgcHViIGZ1biBtYWluKGFkZHJlc3M6IEFkZHJlc3MsIHBhdGhTdHI6IFN0cmluZyk6ICZBbnlTdHJ1Y3Q/IHsKICBsZXQgYWNjb3VudCA9IGdldEF1dGhBY2NvdW50KGFkZHJlc3MpCiAgbGV0IHBhdGggPSBTdG9yYWdlUGF0aChpZGVudGlmaWVyOiBwYXRoU3RyKSEKICByZXR1cm4gYWNjb3VudC5ib3Jyb3c8JkFueVN0cnVjdD4oZnJvbTogcGF0aCkKfQ=="
            },
            "temp": {
                "addKeys": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBhZGRLZXlzIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KCnRyYW5zYWN0aW9uKHB1YmxpY0tleTogU3RyaW5nKSB7CiAgICBwcmVwYXJlKHNpZ25lcjogYXV0aChLZXlzKSAmQWNjb3VudCkgewogICAgICAgIGxldCBrZXkgPSBQdWJsaWNLZXkoCiAgICAgICAgICAgIHB1YmxpY0tleTogcHVibGljS2V5LmRlY29kZUhleCgpLAogICAgICAgICAgICBzaWduYXR1cmVBbGdvcml0aG06IFNpZ25hdHVyZUFsZ29yaXRobShyYXdWYWx1ZTogMSkhCiAgICAgICAgKQogICAgICAgIHZhciBpZHggPSAwCiAgICAgICAgd2hpbGUgaWR4IDwgOTkgewogICAgICAgICAgICBzaWduZXIua2V5cy5hZGQoCiAgICAgICAgICAgICAgICBwdWJsaWNLZXk6IGtleSwKICAgICAgICAgICAgICAgIGhhc2hBbGdvcml0aG06IEhhc2hBbGdvcml0aG0ocmF3VmFsdWU6IDEpISwKICAgICAgICAgICAgICAgIHdlaWdodDogMTAwMC4wCiAgICAgICAgICAgICkKICAgICAgICAgICAgaWR4ID0gaWR4ICsgMQogICAgICAgIH0KICAgICAgIAogICAgfQp9",
                "createAccount": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBjcmVhdGVBY2NvdW50IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBDcnlwdG8KaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KaW1wb3J0IEVWTSBmcm9tIDB4RVZNCmltcG9ydCBVU0RDRmxvdyBmcm9tIDB4VVNEQ0Zsb3cKaW1wb3J0IHN0Rmxvd1Rva2VuIGZyb20gMHhzdEZsb3dUb2tlbgoKdHJhbnNhY3Rpb24ocHVibGljS2V5czogW0NyeXB0by5LZXlMaXN0RW50cnldLCBjb250cmFjdHM6IHtTdHJpbmc6IFN0cmluZ30pIHsKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICBsZXQgbmV3QWNjb3VudCA9IEFjY291bnQocGF5ZXI6IHNpZ25lcikKCiAgICAgICAgZm9yIGtleSBpbiBwdWJsaWNLZXlzIHsKICAgICAgICAgICAgbmV3QWNjb3VudC5rZXlzLmFkZChwdWJsaWNLZXk6IGtleS5wdWJsaWNLZXksIGhhc2hBbGdvcml0aG06IGtleS5oYXNoQWxnb3JpdGhtLCB3ZWlnaHQ6IGtleS53ZWlnaHQpCiAgICAgICAgfQoKICAgICAgICBmb3IgY29udHJhY3QgaW4gY29udHJhY3RzLmtleXMgewogICAgICAgICAgICBuZXdBY2NvdW50LmNvbnRyYWN0cy5hZGQobmFtZTogY29udHJhY3QsIGNvZGU6IGNvbnRyYWN0c1tjb250cmFjdF0hLmRlY29kZUhleCgpKQogICAgICAgIH0KCiAgICAgICAgbGV0IGNvYSA8LSBFVk0uY3JlYXRlQ2FkZW5jZU93bmVkQWNjb3VudCgpCiAgICAgICAgbGV0IGNvYVBhdGggPSAvc3RvcmFnZS9ldm0KICAgICAgICBuZXdBY2NvdW50LnN0b3JhZ2Uuc2F2ZSg8LWNvYSwgdG86IGNvYVBhdGgpCiAgICAgICAgbGV0IGNvYUNhcGFiaWxpdHkgPSBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPCZFVk0uQ2FkZW5jZU93bmVkQWNjb3VudD4oY29hUGF0aCkKICAgICAgICBuZXdBY2NvdW50LmNhcGFiaWxpdGllcy5wdWJsaXNoKGNvYUNhcGFiaWxpdHksIGF0OiAvcHVibGljL2V2bSkKICAgICAgICBsZXQgdXNkY1ZhdWx0IDwtIFVTRENGbG93LmNyZWF0ZUVtcHR5VmF1bHQodmF1bHRUeXBlOiBUeXBlPEBVU0RDRmxvdy5WYXVsdD4oKSkKICAgICAgICBuZXdBY2NvdW50LnN0b3JhZ2Uuc2F2ZSg8LXVzZGNWYXVsdCwgdG86IFVTRENGbG93LlZhdWx0U3RvcmFnZVBhdGgpCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KFVTRENGbG93LlZhdWx0U3RvcmFnZVBhdGgpLAogICAgICAgICAgICBhdDogVVNEQ0Zsb3cuVmF1bHRQdWJsaWNQYXRoCiAgICAgICAgKQogICAgICAgIG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnB1Ymxpc2goCiAgICAgICAgICAgIG5ld0FjY291bnQuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntGdW5naWJsZVRva2VuLlJlY2VpdmVyLCBGdW5naWJsZVRva2VuLkJhbGFuY2V9PihVU0RDRmxvdy5WYXVsdFN0b3JhZ2VQYXRoKSwKICAgICAgICAgICAgYXQ6IFVTRENGbG93LlJlY2VpdmVyUHVibGljUGF0aAogICAgICAgICkKCiAgICAgICAgLy8gc3RGbG93CiAgICAgICAgbGV0IHN0Rmxvd1ZhdWx0IDwtIHN0Rmxvd1Rva2VuLmNyZWF0ZUVtcHR5VmF1bHQodmF1bHRUeXBlOiBUeXBlPEBzdEZsb3dUb2tlbi5WYXVsdD4oKSkKICAgICAgICBuZXdBY2NvdW50LnN0b3JhZ2Uuc2F2ZSg8LXN0Rmxvd1ZhdWx0LCB0bzogc3RGbG93VG9rZW4udG9rZW5WYXVsdFBhdGgpCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHN0Rmxvd1Rva2VuLnRva2VuVmF1bHRQYXRoKSwKICAgICAgICAgICAgYXQ6IHN0Rmxvd1Rva2VuLnRva2VuQmFsYW5jZVBhdGgKICAgICAgICApCiAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMucHVibGlzaCgKICAgICAgICAgICAgbmV3QWNjb3VudC5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXIsIEZ1bmdpYmxlVG9rZW4uQmFsYW5jZX0+KHN0Rmxvd1Rva2VuLnRva2VuVmF1bHRQYXRoKSwKICAgICAgICAgICAgYXQ6IHN0Rmxvd1Rva2VuLnRva2VuUmVjZWl2ZXJQYXRoCiAgICAgICAgKQogICAgfQoKfQ==",
                "mintNFT": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBtaW50TkZUIC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIC8vLyBUaGlzIHNjcmlwdCB1c2VzIHRoZSBORlRNaW50ZXIgcmVzb3VyY2UgdG8gbWludCBhIG5ldyBORlQKLy8vIEl0IG11c3QgYmUgcnVuIHdpdGggdGhlIGFjY291bnQgdGhhdCBoYXMgdGhlIG1pbnRlciByZXNvdXJjZQovLy8gc3RvcmVkIGluIC9zdG9yYWdlL05GVE1pbnRlcgoKaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweDYzMWU4OGFlN2YxZDdjMjAKCmltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHg5YTA3NjZkOTNiNjYwOGI3CmltcG9ydCBFeGFtcGxlTkZUIGZyb20gMHgzOTBiNDcwNWRhNjMwNWMzCgp0cmFuc2FjdGlvbigKICAgIHJlY2lwaWVudDogQWRkcmVzcywKICAgIG5hbWU6IFN0cmluZywKICAgIGRlc2NyaXB0aW9uOiBTdHJpbmcsCiAgICB0aHVtYm5haWw6IFN0cmluZywKICAgIGN1dHM6IFtVRml4NjRdLAogICAgcm95YWx0eURlc2NyaXB0aW9uczogW1N0cmluZ10sCiAgICByb3lhbHR5QmVuZWZpY2lhcmllczogW0FkZHJlc3NdCikgewoKICAgIC8vLyBsb2NhbCB2YXJpYWJsZSBmb3Igc3RvcmluZyB0aGUgbWludGVyIHJlZmVyZW5jZQogICAgbGV0IG1pbnRlcjogJkV4YW1wbGVORlQuTkZUTWludGVyCgogICAgLy8vIFJlZmVyZW5jZSB0byB0aGUgcmVjZWl2ZXIncyBjb2xsZWN0aW9uCiAgICBsZXQgcmVjaXBpZW50Q29sbGVjdGlvblJlZjogJntOb25GdW5naWJsZVRva2VuLlJlY2VpdmVyfQoKICAgIHByZXBhcmUoc2lnbmVyOiBhdXRoKEJvcnJvd1ZhbHVlKSAmQWNjb3VudCkgewoKICAgICAgICBsZXQgY29sbGVjdGlvbkRhdGEgPSBFeGFtcGxlTkZULnJlc29sdmVDb250cmFjdFZpZXcoCiAgICAgICAgICAgICAgICByZXNvdXJjZVR5cGU6IG5pbCwKICAgICAgICAgICAgICAgIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkKICAgICAgICAgICAgKSBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YT8KICAgICAgICAgICAgPz8gcGFuaWMoIlZpZXdSZXNvbHZlciBkb2VzIG5vdCByZXNvbHZlIE5GVENvbGxlY3Rpb25EYXRhIHZpZXciKQogICAgICAgIAogICAgICAgIC8vIGJvcnJvdyBhIHJlZmVyZW5jZSB0byB0aGUgTkZUTWludGVyIHJlc291cmNlIGluIHN0b3JhZ2UKICAgICAgICBzZWxmLm1pbnRlciA9IHNpZ25lci5zdG9yYWdlLmJvcnJvdzwmRXhhbXBsZU5GVC5ORlRNaW50ZXI+KGZyb206IEV4YW1wbGVORlQuTWludGVyU3RvcmFnZVBhdGgpCiAgICAgICAgICAgID8/IHBhbmljKCJBY2NvdW50IGRvZXMgbm90IHN0b3JlIGFuIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIHBhdGgiKQoKICAgICAgICAvLyBCb3Jyb3cgdGhlIHJlY2lwaWVudCdzIHB1YmxpYyBORlQgY29sbGVjdGlvbiByZWZlcmVuY2UKICAgICAgICBzZWxmLnJlY2lwaWVudENvbGxlY3Rpb25SZWYgPSBnZXRBY2NvdW50KHJlY2lwaWVudCkuY2FwYWJpbGl0aWVzLmJvcnJvdzwme05vbkZ1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigKICAgICAgICAgICAgICAgIGNvbGxlY3Rpb25EYXRhLnB1YmxpY1BhdGgKICAgICAgICAgICAgKSA/PyBwYW5pYygiQ291bGQgbm90IGdldCByZWNlaXZlciByZWZlcmVuY2UgdG8gdGhlIE5GVCBDb2xsZWN0aW9uIikKICAgIH0KCiAgICBwcmUgewogICAgICAgIGN1dHMubGVuZ3RoID09IHJveWFsdHlEZXNjcmlwdGlvbnMubGVuZ3RoICYmIGN1dHMubGVuZ3RoID09IHJveWFsdHlCZW5lZmljaWFyaWVzLmxlbmd0aDogIkFycmF5IGxlbmd0aCBzaG91bGQgYmUgZXF1YWwgZm9yIHJveWFsdHkgcmVsYXRlZCBkZXRhaWxzIgogICAgfQoKICAgIGV4ZWN1dGUgewoKICAgICAgICAvLyBDcmVhdGUgdGhlIHJveWFsdHkgZGV0YWlscwogICAgICAgIHZhciBjb3VudCA9IDAKICAgICAgICB2YXIgcm95YWx0aWVzOiBbTWV0YWRhdGFWaWV3cy5Sb3lhbHR5XSA9IFtdCiAgICAgICAgbG9nKHJveWFsdHlCZW5lZmljaWFyaWVzLmxlbmd0aCkKICAgICAgICB3aGlsZSByb3lhbHR5QmVuZWZpY2lhcmllcy5sZW5ndGggPiBjb3VudCB7CiAgICAgICAgICAgIGxldCBiZW5lZmljaWFyeSA9IHJveWFsdHlCZW5lZmljaWFyaWVzW2NvdW50XQogICAgICAgICAgICBsZXQgYmVuZWZpY2lhcnlDYXBhYmlsaXR5ID0gZ2V0QWNjb3VudChiZW5lZmljaWFyeSkuY2FwYWJpbGl0aWVzLmdldDwme0Z1bmdpYmxlVG9rZW4uUmVjZWl2ZXJ9PigKICAgICAgICAgICAgICAgICAgICBNZXRhZGF0YVZpZXdzLmdldFJveWFsdHlSZWNlaXZlclB1YmxpY1BhdGgoKQogICAgICAgICAgICAgICAgKQogICAgICAgICAgICBpZiAhYmVuZWZpY2lhcnlDYXBhYmlsaXR5LmNoZWNrKCkgewogICAgICAgICAgICAgICAgcGFuaWMoIkJlbmVmaWNpYXJ5IGRvZXMgbm90IGhhdmUgUmVjZWl2ZXIgY29uZmlndXJlZCBhdCBSb3lhbHR5UmVjZWl2ZXJQdWJsaWNQYXRoIikKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcm95YWx0aWVzLmFwcGVuZCgKICAgICAgICAgICAgICAgIE1ldGFkYXRhVmlld3MuUm95YWx0eSgKICAgICAgICAgICAgICAgICAgICByZWNlaXZlcjogYmVuZWZpY2lhcnlDYXBhYmlsaXR5LAogICAgICAgICAgICAgICAgICAgIGN1dDogY3V0c1tjb3VudF0sCiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHJveWFsdHlEZXNjcmlwdGlvbnNbY291bnRdCiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICkKICAgICAgICAgICAgY291bnQgPSBjb3VudCArIDEKICAgICAgICB9CgoKICAgICAgICAvLyBNaW50IHRoZSBORlQgYW5kIGRlcG9zaXQgaXQgdG8gdGhlIHJlY2lwaWVudCdzIGNvbGxlY3Rpb24KICAgICAgICBsZXQgbWludGVkTkZUIDwtIHNlbGYubWludGVyLm1pbnRORlQoCiAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiwKICAgICAgICAgICAgdGh1bWJuYWlsOiB0aHVtYm5haWwsCiAgICAgICAgICAgIHJveWFsdGllczogcm95YWx0aWVzCiAgICAgICAgKQogICAgICAgIHNlbGYucmVjaXBpZW50Q29sbGVjdGlvblJlZi5kZXBvc2l0KHRva2VuOiA8LW1pbnRlZE5GVCkKICAgIH0KCn0=",
                "onboardEvmToFlow": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBvbmJvYXJkRXZtVG9GbG93IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIGltcG9ydCBGdW5naWJsZVRva2VuIGZyb20gMHhmMjMzZGNlZTg4ZmUwYWJlCmltcG9ydCBGbG93VG9rZW4gZnJvbSAweDE2NTQ2NTMzOTkwNDBhNjEKCmltcG9ydCBTY29wZWRGVFByb3ZpZGVycyBmcm9tIDB4MWU0YWEwYjg3ZDEwYjE0MQoKaW1wb3J0IEVWTSBmcm9tIDB4ZTQ2N2I5ZGQxMWZhMDBkZgoKaW1wb3J0IEZsb3dFVk1CcmlkZ2UgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKaW1wb3J0IEZsb3dFVk1CcmlkZ2VDb25maWcgZnJvbSAweDFlNGFhMGI4N2QxMGIxNDEKCi8vLyBUaGlzIHRyYW5zYWN0aW9uIG9uYm9hcmRzIEVSQzIwL0VSQzcyMSBhc3NldHMgdG8gdGhlIGJyaWRnZSwgY29uZmlndXJpbmcgdGhlIGJyaWRnZSB0byBtb3ZlIGFzc2V0cyBiZXR3ZWVuCi8vLyBlbnZpcm9ubWVudHMKLy8vIE5PVEU6IFRoaXMgbXVzdCBiZSBkb25lIGJlZm9yZSBicmlkZ2luZyBhIENhZGVuY2UtbmF0aXZlIE5GVCB0byBFVk0KLy8vCi8vLyBAcGFyYW0gYWRkcmVzc2VzQXNIZXg6IEFycmF5IG9mIEVWTSBjb250cmFjdCBhZGRyZXNzZXMgZGVmaW5pbmcgdGhlIAovLy8gICAgIGJyaWRnZWFibGUgYXNzZXQgdG8gYmUgb25ib2FyZGVkCi8vLwp0cmFuc2FjdGlvbihhZGRyZXNzZXNBc0hleDogW1N0cmluZ10pIHsKbGV0IHNjb3BlZFByb3ZpZGVyOiBAU2NvcGVkRlRQcm92aWRlcnMuU2NvcGVkRlRQcm92aWRlcgoKcHJlcGFyZShzaWduZXI6IGF1dGgoQ29weVZhbHVlLCBCb3Jyb3dWYWx1ZSwgSXNzdWVTdG9yYWdlQ2FwYWJpbGl0eUNvbnRyb2xsZXIsIFB1Ymxpc2hDYXBhYmlsaXR5LCBTYXZlVmFsdWUpICZBY2NvdW50KSB7CiAgICAvKiAtLS0gQ29uZmlndXJlIGEgU2NvcGVkRlRQcm92aWRlciAtLS0gKi8KICAgIC8vCiAgICAvLyBJc3N1ZSBhbmQgc3RvcmUgYnJpZGdlLWRlZGljYXRlZCBQcm92aWRlciBDYXBhYmlsaXR5IGluIHN0b3JhZ2UgaWYgbmVjZXNzYXJ5CiAgICBpZiBzaWduZXIuc3RvcmFnZS50eXBlKGF0OiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoKSA9PSBuaWwgewogICAgICAgIGxldCBwcm92aWRlckNhcCA9IHNpZ25lci5jYXBhYmlsaXRpZXMuc3RvcmFnZS5pc3N1ZTxhdXRoKEZ1bmdpYmxlVG9rZW4uV2l0aGRyYXcpICZ7RnVuZ2libGVUb2tlbi5Qcm92aWRlcn0+KAogICAgICAgICAgICAvc3RvcmFnZS9mbG93VG9rZW5WYXVsdAogICAgICAgICkKICAgICAgICBzaWduZXIuc3RvcmFnZS5zYXZlKHByb3ZpZGVyQ2FwLCB0bzogRmxvd0VWTUJyaWRnZUNvbmZpZy5wcm92aWRlckNhcGFiaWxpdHlTdG9yYWdlUGF0aCkKICAgIH0KICAgIC8vIENvcHkgdGhlIHN0b3JlZCBQcm92aWRlciBjYXBhYmlsaXR5IGFuZCBjcmVhdGUgYSBTY29wZWRGVFByb3ZpZGVyCiAgICBsZXQgcHJvdmlkZXJDYXBDb3B5ID0gc2lnbmVyLnN0b3JhZ2UuY29weTxDYXBhYmlsaXR5PGF1dGgoRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntGdW5naWJsZVRva2VuLlByb3ZpZGVyfT4+KAogICAgICAgICAgICBmcm9tOiBGbG93RVZNQnJpZGdlQ29uZmlnLnByb3ZpZGVyQ2FwYWJpbGl0eVN0b3JhZ2VQYXRoCiAgICAgICAgKSA/PyBwYW5pYygiSW52YWxpZCBQcm92aWRlciBDYXBhYmlsaXR5IGZvdW5kIGluIHN0b3JhZ2UuIikKICAgIC8vIFNldCBhIHdpdGhkcmF3YWwgbGltaXQgZm9yIHRoZSBwcm92aWRlcgogICAgbGV0IHByb3ZpZGVyTGltaXQgPSBGbG93RVZNQnJpZGdlQ29uZmlnLm9uYm9hcmRGZWUgKiBVRml4NjQoYWRkcmVzc2VzQXNIZXgubGVuZ3RoKQogICAgbGV0IHByb3ZpZGVyRmlsdGVyID0gU2NvcGVkRlRQcm92aWRlcnMuQWxsb3dhbmNlRmlsdGVyKHByb3ZpZGVyTGltaXQpCiAgICAvLyBDcmVhdGUgU2NvcGVkRlRQcm92aWRlciB0byBleHBpcmUganVzdCBhZnRlciB0aGlzIHRyYW5zYWN0aW9uCiAgICBzZWxmLnNjb3BlZFByb3ZpZGVyIDwtIFNjb3BlZEZUUHJvdmlkZXJzLmNyZWF0ZVNjb3BlZEZUUHJvdmlkZXIoCiAgICAgICAgICAgIHByb3ZpZGVyOiBwcm92aWRlckNhcENvcHksCiAgICAgICAgICAgIGZpbHRlcnM6IFsgcHJvdmlkZXJGaWx0ZXIgXSwKICAgICAgICAgICAgZXhwaXJhdGlvbjogZ2V0Q3VycmVudEJsb2NrKCkudGltZXN0YW1wICsgMS4wCiAgICAgICAgKQp9CmV4ZWN1dGUgewogICAgLy8gSXRlcmF0ZSBvdmVyIHByb3ZpZGVkIGFycmF5CiAgICBmb3IgYWRkcmVzc0hleCBpbiBhZGRyZXNzZXNBc0hleCB7CiAgICAgICAgLy8gQ29udmVydCBoZXggc3RyaW5nIHRvIEVWTUFkZHJlc3MKICAgICAgICBsZXQgYWRkcmVzcyA9IEVWTS5hZGRyZXNzRnJvbVN0cmluZyhhZGRyZXNzSGV4KQogICAgICAgIC8vIENvbnRpbnVlIGlmIHRoZSBoZXggaXMgbm90IGEgdmFsaWQgRVZNIGFkZHJlc3Mgb3IgaWYgdGhlIGFkZHJlc3MgaXMgYWxyZWFkeSBvbmJvYXJkZWQKICAgICAgICBpZiBhZGRyZXNzID09IG5pbCB8fCBGbG93RVZNQnJpZGdlLmV2bUFkZHJlc3NSZXF1aXJlc09uYm9hcmRpbmcoYWRkcmVzcyEpICE9IHRydWUgewogICAgICAgICAgICBjb250aW51ZQogICAgICAgIH0KICAgICAgICBGbG93RVZNQnJpZGdlLm9uYm9hcmRCeUVWTUFkZHJlc3MoCiAgICAgICAgICAgIGFkZHJlc3MhLAogICAgICAgICAgICBmZWVQcm92aWRlcjogJnNlbGYuc2NvcGVkUHJvdmlkZXIgYXMgYXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9CiAgICAgICAgKQogICAgfQogICAgZGVzdHJveSBzZWxmLnNjb3BlZFByb3ZpZGVyCn0KfQ==",
                "setupFTProvider": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZXR1cEZUUHJvdmlkZXIgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IEZ1bmdpYmxlVG9rZW4gZnJvbSAweEZ1bmdpYmxlVG9rZW4KCmltcG9ydCBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cyBmcm9tIDB4RnVuZ2libGVUb2tlbgppbXBvcnQgPFRva2VuPiBmcm9tIDxUb2tlbkFkZHJlc3M+Cgp0cmFuc2FjdGlvbiB7CiAgICBwcmVwYXJlKGFjY3Q6IGF1dGgoQ2FwYWJpbGl0aWVzKSAmQWNjb3VudCkgewogICAgICAgIGxldCB2YXVsdERhdGEgPSBFeGFtcGxlVG9rZW4ucmVzb2x2ZUNvbnRyYWN0VmlldyhyZXNvdXJjZVR5cGU6IG5pbCwgdmlld1R5cGU6IFR5cGU8RnVuZ2libGVUb2tlbk1ldGFkYXRhVmlld3MuRlRWYXVsdERhdGE+KCkpIGFzISBGdW5naWJsZVRva2VuTWV0YWRhdGFWaWV3cy5GVFZhdWx0RGF0YT8KICAgICAgICAgICAgPz8gcGFuaWMoIkNvdWxkIG5vdCBnZXQgdGhlIHZhdWx0IGRhdGEgdmlldyBmb3IgRXhhbXBsZVRva2VuIikKICAgIAogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8YXV0aChGdW5naWJsZVRva2VuLldpdGhkcmF3KSAme0Z1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9Pih2YXVsdERhdGEuc3RvcmFnZVBhdGgpCiAgICB9Cn0KIA==",
                "setupNFTFull": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICBzZXR1cE5GVEZ1bGwgLSB2Mi4yOAogICAgLy8gPHBsYXRmb3JtX2luZm8+CiAgICAgaW1wb3J0IE5vbkZ1bmdpYmxlVG9rZW4gZnJvbSAweE5vbkZ1bmdpYmxlVG9rZW4KaW1wb3J0IE1ldGFkYXRhVmlld3MgZnJvbSAweE1ldGFkYXRhVmlld3MKCmltcG9ydCA8VG9rZW4+IGZyb20gPFRva2VuQWRkcmVzcz4KCnRyYW5zYWN0aW9uIHsKICAgIHByZXBhcmUoYWNjdDogYXV0aChTdG9yYWdlLCBDYXBhYmlsaXRpZXMpICZBY2NvdW50KSB7CiAgICAgICAgbGV0IGQgPSBFeGFtcGxlTkZULnJlc29sdmVDb250cmFjdFZpZXcocmVzb3VyY2VUeXBlOiBuaWwsIHZpZXdUeXBlOiBUeXBlPE1ldGFkYXRhVmlld3MuTkZUQ29sbGVjdGlvbkRhdGE+KCkpISBhcyEgTWV0YWRhdGFWaWV3cy5ORlRDb2xsZWN0aW9uRGF0YQoKICAgICAgICBpZiBhY2N0LnN0b3JhZ2UuYm9ycm93PCZFeGFtcGxlTkZULkNvbGxlY3Rpb24+KGZyb206IGQuc3RvcmFnZVBhdGgpID09IG5pbCB7CiAgICAgICAgICAgIGFjY3Quc3RvcmFnZS5zYXZlKDwtIEV4YW1wbGVORlQuY3JlYXRlRW1wdHlDb2xsZWN0aW9uKCksIHRvOiBFeGFtcGxlTkZULkNvbGxlY3Rpb25TdG9yYWdlUGF0aCkKICAgICAgICB9CgogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnVucHVibGlzaChkLnB1YmxpY1BhdGgpCiAgICAgICAgbGV0IGNhcCA9IGFjY3QuY2FwYWJpbGl0aWVzLnN0b3JhZ2UuaXNzdWU8JntFeGFtcGxlTkZULkV4YW1wbGVORlRDb2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWN9PihkLnN0b3JhZ2VQYXRoKQogICAgICAgIGFjY3QuY2FwYWJpbGl0aWVzLnB1Ymxpc2goY2FwLCBhdDogZC5wdWJsaWNQYXRoKQoKICAgICAgICBhY2N0LmNhcGFiaWxpdGllcy5zdG9yYWdlLmlzc3VlPGF1dGgoTm9uRnVuZ2libGVUb2tlbi5XaXRoZHJhdykgJntFeGFtcGxlTkZULkV4YW1wbGVORlRDb2xsZWN0aW9uUHVibGljLCBOb25GdW5naWJsZVRva2VuLkNvbGxlY3Rpb25QdWJsaWMsIE5vbkZ1bmdpYmxlVG9rZW4uUHJvdmlkZXJ9PihkLnN0b3JhZ2VQYXRoKQogICAgfQp9Cg==",
                "test": "CiAgICAvLyBGbG93IFdhbGxldCAtIHRlc3RuZXQgU2NyaXB0ICB0ZXN0IC0gdjIuMjgKICAgIC8vIDxwbGF0Zm9ybV9pbmZvPgogICAgIA=="
            }
        }
    },
    "version": "2.28"
}
